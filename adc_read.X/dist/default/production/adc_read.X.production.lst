

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Oct 14 02:06:09 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           ; Version 1.41
    44                           ; Generated 25/01/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4520 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	smallconst
    79  000600                     __psmallconst:
    80                           	opt stack 0
    81  000600  00                 	db	0
    82  000601                     _dpowers:
    83                           	opt stack 0
    84  000601  0001               	dw	1
    85  000603  0000               	dw	0
    86  000605  000A               	dw	10
    87  000607  0000               	dw	0
    88  000609  0064               	dw	100
    89  00060B  0000               	dw	0
    90  00060D  03E8               	dw	1000
    91  00060F  0000               	dw	0
    92  000611  2710               	dw	10000
    93  000613  0000               	dw	0
    94  000615  86A0               	dw	34464
    95  000617  0001               	dw	1
    96  000619  4240               	dw	16960
    97  00061B  000F               	dw	15
    98  00061D  9680               	dw	38528
    99  00061F  0098               	dw	152
   100  000621  E100               	dw	57600
   101  000623  05F5               	dw	1525
   102  000625  CA00               	dw	51712
   103  000627  3B9A               	dw	15258
   104  000629                     __end_of_dpowers:
   105                           	opt stack 0
   106  000629                     __powers_:
   107                           	opt stack 0
   108  000629  00                 	db	0
   109  00062A  80                 	db	128
   110  00062B  3F                 	db	63
   111  00062C  00                 	db	0
   112  00062D  20                 	db	32
   113  00062E  41                 	db	65
   114  00062F  00                 	db	0
   115  000630  C8                 	db	200
   116  000631  42                 	db	66
   117  000632  00                 	db	0
   118  000633  7A                 	db	122
   119  000634  44                 	db	68
   120  000635  40                 	db	64
   121  000636  1C                 	db	28
   122  000637  46                 	db	70
   123  000638  50                 	db	80
   124  000639  C3                 	db	195
   125  00063A  47                 	db	71
   126  00063B  24                 	db	36
   127  00063C  74                 	db	116
   128  00063D  49                 	db	73
   129  00063E  97                 	db	151
   130  00063F  18                 	db	24
   131  000640  4B                 	db	75
   132  000641  BC                 	db	188
   133  000642  BE                 	db	190
   134  000643  4C                 	db	76
   135  000644  6B                 	db	107
   136  000645  6E                 	db	110
   137  000646  4E                 	db	78
   138  000647  03                 	db	3
   139  000648  15                 	db	21
   140  000649  50                 	db	80
   141  00064A  79                 	db	121
   142  00064B  AD                 	db	173
   143  00064C  60                 	db	96
   144  00064D  F3                 	db	243
   145  00064E  49                 	db	73
   146  00064F  71                 	db	113
   147  000650                     __end_of__powers_:
   148                           	opt stack 0
   149  000650                     __npowers_:
   150                           	opt stack 0
   151  000650  00                 	db	0
   152  000651  80                 	db	128
   153  000652  3F                 	db	63
   154  000653  CD                 	db	205
   155  000654  CC                 	db	204
   156  000655  3D                 	db	61
   157  000656  D7                 	db	215
   158  000657  23                 	db	35
   159  000658  3C                 	db	60
   160  000659  12                 	db	18
   161  00065A  83                 	db	131
   162  00065B  3A                 	db	58
   163  00065C  B7                 	db	183
   164  00065D  D1                 	db	209
   165  00065E  38                 	db	56
   166  00065F  C6                 	db	198
   167  000660  27                 	db	39
   168  000661  37                 	db	55
   169  000662  38                 	db	56
   170  000663  86                 	db	134
   171  000664  35                 	db	53
   172  000665  C0                 	db	192
   173  000666  D6                 	db	214
   174  000667  33                 	db	51
   175  000668  CC                 	db	204
   176  000669  2B                 	db	43
   177  00066A  32                 	db	50
   178  00066B  70                 	db	112
   179  00066C  89                 	db	137
   180  00066D  30                 	db	48
   181  00066E  E7                 	db	231
   182  00066F  DB                 	db	219
   183  000670  2E                 	db	46
   184  000671  E5                 	db	229
   185  000672  3C                 	db	60
   186  000673  1E                 	db	30
   187  000674  42                 	db	66
   188  000675  A2                 	db	162
   189  000676  0D                 	db	13
   190  000677                     __end_of__npowers_:
   191                           	opt stack 0
   192  000677                     _hexpowers:
   193                           	opt stack 0
   194  000677  0001               	dw	1
   195  000679  0000               	dw	0
   196  00067B  0010               	dw	16
   197  00067D  0000               	dw	0
   198  00067F  0100               	dw	256
   199  000681  0000               	dw	0
   200  000683  1000               	dw	4096
   201  000685  0000               	dw	0
   202  000687  0000               	dw	0
   203  000689  0001               	dw	1
   204  00068B  0000               	dw	0
   205  00068D  0010               	dw	16
   206  00068F  0000               	dw	0
   207  000691  0100               	dw	256
   208  000693  0000               	dw	0
   209  000695  1000               	dw	4096
   210  000697                     __end_of_hexpowers:
   211                           	opt stack 0
   212  0000                     _RCREG	set	4014
   213  0000                     _TXREG	set	4013
   214  0000                     _PIE1bits	set	3997
   215  0000                     _IPR1bits	set	3999
   216  0000                     _TXSTAbits	set	4012
   217  0000                     _BAUDCONbits	set	4024
   218  0000                     _RCSTAbits	set	4011
   219  0000                     _SPBRG	set	4015
   220  0000                     _SPBRGH	set	4016
   221  0000                     _TRISCbits	set	3988
   222  0000                     _PIR1bits	set	3998
   223  0000                     _ADRESL	set	4035
   224  0000                     _ADRESH	set	4036
   225  0000                     _INTCONbits	set	4082
   226  0000                     _RCONbits	set	4048
   227  0000                     _ADCON0bits	set	4034
   228  0000                     _ADCON2bits	set	4032
   229  0000                     _ADCON1bits	set	4033
   230  0000                     _TRISAbits	set	3986
   231  0000                     _LATB	set	3978
   232  0000                     _TRISB	set	3987
   233  0000                     _OSCCONbits	set	4051
   234  000697                     STR_1:
   235  000697  0D                 	db	13
   236  000698  41                 	db	65	;'A'
   237  000699  44                 	db	68	;'D'
   238  00069A  43                 	db	67	;'C'
   239  00069B  20                 	db	32
   240  00069C  52                 	db	82	;'R'
   241  00069D  65                 	db	101	;'e'
   242  00069E  61                 	db	97	;'a'
   243  00069F  64                 	db	100	;'d'
   244  0006A0  3A                 	db	58	;':'
   245  0006A1  20                 	db	32
   246  0006A2  30                 	db	48	;'0'
   247  0006A3  78                 	db	120	;'x'
   248  0006A4  25                 	db	37
   249  0006A5  30                 	db	48	;'0'
   250  0006A6  32                 	db	50	;'2'
   251  0006A7  78                 	db	120	;'x'
   252  0006A8  25                 	db	37
   253  0006A9  30                 	db	48	;'0'
   254  0006AA  32                 	db	50	;'2'
   255  0006AB  78                 	db	120	;'x'
   256  0006AC  09                 	db	9
   257  0006AD  00                 	db	0
   258  0006AE                     STR_3:
   259  0006AE  30                 	db	48	;'0'
   260  0006AF  31                 	db	49	;'1'
   261  0006B0  32                 	db	50	;'2'
   262  0006B1  33                 	db	51	;'3'
   263  0006B2  34                 	db	52	;'4'
   264  0006B3  35                 	db	53	;'5'
   265  0006B4  36                 	db	54	;'6'
   266  0006B5  37                 	db	55	;'7'
   267  0006B6  38                 	db	56	;'8'
   268  0006B7  39                 	db	57	;'9'
   269  0006B8  61                 	db	97	;'a'
   270  0006B9  62                 	db	98	;'b'
   271  0006BA  63                 	db	99	;'c'
   272  0006BB  64                 	db	100	;'d'
   273  0006BC  65                 	db	101	;'e'
   274  0006BD  66                 	db	102	;'f'
   275  0006BE  00                 	db	0
   276  0006BF                     STR_2:
   277  0006BF  41                 	db	65	;'A'
   278  0006C0  44                 	db	68	;'D'
   279  0006C1  43                 	db	67	;'C'
   280  0006C2  20                 	db	32
   281  0006C3  56                 	db	86	;'V'
   282  0006C4  6F                 	db	111	;'o'
   283  0006C5  6C                 	db	108	;'l'
   284  0006C6  74                 	db	116	;'t'
   285  0006C7  3A                 	db	58	;':'
   286  0006C8  20                 	db	32
   287  0006C9  25                 	db	37
   288  0006CA  2E                 	db	46
   289  0006CB  32                 	db	50	;'2'
   290  0006CC  66                 	db	102	;'f'
   291  0006CD  09                 	db	9
   292  0006CE  00                 	db	0
   293                           
   294                           ; #config settings
   295  0006CF  00                 	db	0	; dummy byte at the end
   296  0000                     
   297                           	psect	cinit
   298  00263A                     __pcinit:
   299                           	opt stack 0
   300  00263A                     start_initialization:
   301                           	opt stack 0
   302  00263A                     __initialization:
   303                           	opt stack 0
   304                           
   305                           ; Clear objects allocated to BANK1 (256 bytes)
   306  00263A  EE01  F000         	lfsr	0,__pbssBANK1
   307  00263E  EE11 F000          	lfsr	1,256
   308  002642                     clear_0:
   309  002642  6AEE               	clrf	postinc0,c
   310  002644  50E5               	movf	postdec1,w,c
   311  002646  50E1               	movf	fsr1l,w,c
   312  002648  E1FC               	bnz	clear_0
   313  00264A  50E2               	movf	fsr1h,w,c
   314  00264C  E1FA               	bnz	clear_0
   315                           
   316                           ; Clear objects allocated to COMRAM (7 bytes)
   317  00264E  EE00  F053         	lfsr	0,__pbssCOMRAM
   318  002652  0E07               	movlw	7
   319  002654                     clear_1:
   320  002654  6AEE               	clrf	postinc0,c
   321  002656  06E8               	decf	wreg,f,c
   322  002658  E1FD               	bnz	clear_1
   323  00265A                     end_of_initialization:
   324                           	opt stack 0
   325  00265A                     __end_of__initialization:
   326                           	opt stack 0
   327  00265A  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   328  00265C  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   329  00265E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   330  002660  6EF8               	movwf	tblptru,c
   331  002662  0100               	movlb	0
   332  002664  EFCA  F00D         	goto	_main	;jump to C main() function
   333                           tblptru	equ	0xFF8
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           postdec1	equ	0xFE5
   337                           fsr1h	equ	0xFE2
   338                           fsr1l	equ	0xFE1
   339                           
   340                           	psect	bssCOMRAM
   341  000053                     __pbssCOMRAM:
   342                           	opt stack 0
   343  000053                     _adc_volt:
   344                           	opt stack 0
   345  000053                     	ds	3
   346  000056                     _adc_to_led:
   347                           	opt stack 0
   348  000056                     	ds	2
   349  000058                     _got_data_bool:
   350                           	opt stack 0
   351  000058                     	ds	1
   352  000059                     _data:
   353                           	opt stack 0
   354  000059                     	ds	1
   355                           tblptru	equ	0xFF8
   356                           postinc0	equ	0xFEE
   357                           wreg	equ	0xFE8
   358                           postdec1	equ	0xFE5
   359                           fsr1h	equ	0xFE2
   360                           fsr1l	equ	0xFE1
   361                           
   362                           	psect	bssBANK1
   363  000100                     __pbssBANK1:
   364                           	opt stack 0
   365  000100                     _print_buffer:
   366                           	opt stack 0
   367  000100                     	ds	256
   368                           tblptru	equ	0xFF8
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           postdec1	equ	0xFE5
   372                           fsr1h	equ	0xFE2
   373                           fsr1l	equ	0xFE1
   374                           
   375                           	psect	cstackBANK0
   376  000080                     __pcstackBANK0:
   377                           	opt stack 0
   378  000080                     ??___fttol:
   379  000080                     ?___ftadd:
   380                           	opt stack 0
   381  000080                     ___ftadd@f1:
   382                           	opt stack 0
   383                           
   384                           ; 3 bytes @ 0x0
   385  000080                     	ds	3
   386  000083                     ___ftadd@f2:
   387                           	opt stack 0
   388                           
   389                           ; 3 bytes @ 0x3
   390  000083                     	ds	2
   391  000085                     ___fttol@sign1:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x5
   395  000085                     	ds	1
   396  000086                     ??___ftadd:
   397  000086                     ___fttol@lval:
   398                           	opt stack 0
   399                           
   400                           ; 4 bytes @ 0x6
   401  000086                     	ds	3
   402  000089                     ___ftadd@sign:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x9
   406  000089                     	ds	1
   407  00008A                     ___ftadd@exp2:
   408                           	opt stack 0
   409  00008A                     ___fttol@exp1:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0xA
   413  00008A                     	ds	1
   414  00008B                     ___ftadd@exp1:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0xB
   418  00008B                     	ds	1
   419  00008C                     ?___ftsub:
   420                           	opt stack 0
   421  00008C                     ___ftsub@f1:
   422                           	opt stack 0
   423                           
   424                           ; 3 bytes @ 0xC
   425  00008C                     	ds	3
   426  00008F                     ___ftsub@f2:
   427                           	opt stack 0
   428                           
   429                           ; 3 bytes @ 0xF
   430  00008F                     	ds	3
   431  000092                     ?_sprintf:
   432                           	opt stack 0
   433  000092                     sprintf@sp:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x12
   437  000092                     	ds	2
   438  000094                     sprintf@f:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x14
   442  000094                     	ds	6
   443  00009A                     ??_sprintf:
   444                           
   445                           ; 1 bytes @ 0x1A
   446  00009A                     	ds	6
   447  0000A0                     _sprintf$1401:
   448                           	opt stack 0
   449                           
   450                           ; 3 bytes @ 0x20
   451  0000A0                     	ds	3
   452  0000A3                     sprintf@idx:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x23
   456  0000A3                     	ds	1
   457  0000A4                     sprintf@ap:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x24
   461  0000A4                     	ds	2
   462  0000A6                     sprintf@val:
   463                           	opt stack 0
   464                           
   465                           ; 4 bytes @ 0x26
   466  0000A6                     	ds	4
   467  0000AA                     sprintf@tmpval:
   468                           	opt stack 0
   469                           
   470                           ; 4 bytes @ 0x2A
   471  0000AA                     	ds	4
   472  0000AE                     sprintf@exp:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x2E
   476  0000AE                     	ds	2
   477  0000B0                     sprintf@flag:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x30
   481  0000B0                     	ds	2
   482  0000B2                     sprintf@width:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x32
   486  0000B2                     	ds	2
   487  0000B4                     sprintf@fval:
   488                           	opt stack 0
   489                           
   490                           ; 3 bytes @ 0x34
   491  0000B4                     	ds	3
   492  0000B7                     sprintf@prec:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x37
   496  0000B7                     	ds	2
   497  0000B9                     sprintf@c:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x39
   501  0000B9                     	ds	1
   502  0000BA                     ??_main:
   503                           
   504                           ; 1 bytes @ 0x3A
   505  0000BA                     	ds	3
   506                           tblptru	equ	0xFF8
   507                           postinc0	equ	0xFEE
   508                           wreg	equ	0xFE8
   509                           postdec1	equ	0xFE5
   510                           fsr1h	equ	0xFE2
   511                           fsr1l	equ	0xFE1
   512                           
   513                           	psect	cstackCOMRAM
   514  000001                     __pcstackCOMRAM:
   515                           	opt stack 0
   516  000001                     uart_receiver@c:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x0
   520  000001                     	ds	2
   521  000003                     uart_receiver@rx_flag:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x2
   525  000003                     	ds	2
   526  000005                     uart_receiver@er:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x4
   530  000005                     	ds	1
   531  000006                     ??_high_isr:
   532                           
   533                           ; 1 bytes @ 0x5
   534  000006                     	ds	14
   535  000014                     ??_low_isr:
   536                           
   537                           ; 1 bytes @ 0x13
   538  000014                     	ds	17
   539  000025                     ??_isdigit:
   540  000025                     ?___awmod:
   541                           	opt stack 0
   542  000025                     ?___ftpack:
   543                           	opt stack 0
   544  000025                     ?___ftneg:
   545                           	opt stack 0
   546  000025                     ?__tdiv_to_l_:
   547                           	opt stack 0
   548  000025                     ?__div_to_l_:
   549                           	opt stack 0
   550  000025                     ?___lldiv:
   551                           	opt stack 0
   552  000025                     ?___llmod:
   553                           	opt stack 0
   554  000025                     uart_init@gen_reg:
   555                           	opt stack 0
   556  000025                     uart_send@c:
   557                           	opt stack 0
   558  000025                     ___awmod@dividend:
   559                           	opt stack 0
   560  000025                     __div_to_l_@f1:
   561                           	opt stack 0
   562  000025                     ___ftpack@arg:
   563                           	opt stack 0
   564  000025                     __tdiv_to_l_@f1:
   565                           	opt stack 0
   566  000025                     ___ftge@ff1:
   567                           	opt stack 0
   568  000025                     ___ftneg@f1:
   569                           	opt stack 0
   570  000025                     ___lldiv@dividend:
   571                           	opt stack 0
   572  000025                     ___llmod@dividend:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x24
   576  000025                     	ds	1
   577  000026                     _isdigit$1070:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x25
   581  000026                     	ds	1
   582  000027                     isdigit@c:
   583                           	opt stack 0
   584  000027                     uart_init@sync:
   585                           	opt stack 0
   586  000027                     uart_send_string@c:
   587                           	opt stack 0
   588  000027                     ___awmod@divisor:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x26
   592  000027                     	ds	1
   593  000028                     ___ftpack@exp:
   594                           	opt stack 0
   595  000028                     __div_to_l_@f2:
   596                           	opt stack 0
   597  000028                     __tdiv_to_l_@f2:
   598                           	opt stack 0
   599  000028                     ___ftge@ff2:
   600                           	opt stack 0
   601                           
   602                           ; 3 bytes @ 0x27
   603  000028                     	ds	1
   604  000029                     uart_send_string@i:
   605                           	opt stack 0
   606  000029                     ___awmod@counter:
   607                           	opt stack 0
   608  000029                     ___ftpack@sign:
   609                           	opt stack 0
   610  000029                     uart_init@brgh:
   611                           	opt stack 0
   612  000029                     ___lldiv@divisor:
   613                           	opt stack 0
   614  000029                     ___llmod@divisor:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x28
   618  000029                     	ds	1
   619  00002A                     ??___ftpack:
   620  00002A                     ___awmod@sign:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x29
   624  00002A                     	ds	1
   625  00002B                     ??__tdiv_to_l_:
   626  00002B                     ??___ftge:
   627  00002B                     ?___awdiv:
   628                           	opt stack 0
   629  00002B                     uart_init@brg16:
   630                           	opt stack 0
   631  00002B                     ___awdiv@dividend:
   632                           	opt stack 0
   633  00002B                     __div_to_l_@quot:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0x2A
   637  00002B                     	ds	2
   638  00002D                     ?___lltoft:
   639                           	opt stack 0
   640  00002D                     ?___lwtoft:
   641                           	opt stack 0
   642  00002D                     ___llmod@counter:
   643                           	opt stack 0
   644  00002D                     ___awdiv@divisor:
   645                           	opt stack 0
   646  00002D                     ___lwtoft@c:
   647                           	opt stack 0
   648  00002D                     ___lldiv@quotient:
   649                           	opt stack 0
   650  00002D                     ___lltoft@c:
   651                           	opt stack 0
   652                           
   653                           ; 4 bytes @ 0x2C
   654  00002D                     	ds	1
   655  00002E                     __tdiv_to_l_@quot:
   656                           	opt stack 0
   657                           
   658                           ; 4 bytes @ 0x2D
   659  00002E                     	ds	1
   660  00002F                     ___awdiv@counter:
   661                           	opt stack 0
   662  00002F                     __div_to_l_@cntr:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x2E
   666  00002F                     	ds	1
   667  000030                     ___awdiv@sign:
   668                           	opt stack 0
   669  000030                     __div_to_l_@exp1:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x2F
   673  000030                     	ds	1
   674  000031                     ??___lltoft:
   675  000031                     ___lldiv@counter:
   676                           	opt stack 0
   677  000031                     ___awdiv@quotient:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x30
   681  000031                     	ds	1
   682  000032                     __tdiv_to_l_@cntr:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x31
   686  000032                     	ds	1
   687  000033                     ?___wmul:
   688                           	opt stack 0
   689  000033                     __tdiv_to_l_@exp1:
   690                           	opt stack 0
   691  000033                     ___wmul@multiplier:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x32
   695  000033                     	ds	2
   696  000035                     ___lltoft@exp:
   697                           	opt stack 0
   698  000035                     ___wmul@multiplicand:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x34
   702  000035                     	ds	2
   703  000037                     ___wmul@product:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x36
   707  000037                     	ds	2
   708  000039                     ?___ftmul:
   709                           	opt stack 0
   710  000039                     ___ftmul@f1:
   711                           	opt stack 0
   712                           
   713                           ; 3 bytes @ 0x38
   714  000039                     	ds	3
   715  00003C                     ___ftmul@f2:
   716                           	opt stack 0
   717                           
   718                           ; 3 bytes @ 0x3B
   719  00003C                     	ds	3
   720  00003F                     ??___ftmul:
   721                           
   722                           ; 1 bytes @ 0x3E
   723  00003F                     	ds	3
   724  000042                     ___ftmul@exp:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x41
   728  000042                     	ds	1
   729  000043                     ___ftmul@f3_as_product:
   730                           	opt stack 0
   731                           
   732                           ; 3 bytes @ 0x42
   733  000043                     	ds	3
   734  000046                     ___ftmul@cntr:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x45
   738  000046                     	ds	1
   739  000047                     ___ftmul@sign:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x46
   743  000047                     	ds	1
   744  000048                     ?_fround:
   745                           	opt stack 0
   746  000048                     ?_scale:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x47
   750  000048                     	ds	3
   751  00004B                     _fround$1399:
   752                           	opt stack 0
   753  00004B                     _scale$1400:
   754                           	opt stack 0
   755                           
   756                           ; 3 bytes @ 0x4A
   757  00004B                     	ds	3
   758  00004E                     scale@scl:
   759                           	opt stack 0
   760  00004E                     _fround$1398:
   761                           	opt stack 0
   762                           
   763                           ; 3 bytes @ 0x4D
   764  00004E                     	ds	1
   765  00004F                     ?___fttol:
   766                           	opt stack 0
   767  00004F                     ___fttol@f1:
   768                           	opt stack 0
   769                           
   770                           ; 3 bytes @ 0x4E
   771  00004F                     	ds	2
   772  000051                     fround@prec:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x50
   776  000051                     	ds	1
   777  000052                     
   778                           ; 1 bytes @ 0x51
   779  000052                     	ds	1
   780                           tblptru	equ	0xFF8
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           postdec1	equ	0xFE5
   784                           fsr1h	equ	0xFE2
   785                           fsr1l	equ	0xFE1
   786                           
   787 ;;
   788 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   789 ;;
   790 ;; *************** function _main *****************
   791 ;; Defined at:
   792 ;;		line 22 in file "main.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;		None
   795 ;; Auto vars:     Size  Location     Type
   796 ;;		None
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   806 ;;      Params:         0       0       0       0       0       0       0
   807 ;;      Locals:         0       0       0       0       0       0       0
   808 ;;      Temps:          0       3       0       0       0       0       0
   809 ;;      Totals:         0       3       0       0       0       0       0
   810 ;;Total ram usage:        3 bytes
   811 ;; Hardware stack levels required when called:    7
   812 ;; This function calls:
   813 ;;		___ftmul
   814 ;;		___lwtoft
   815 ;;		_sprintf
   816 ;;		_uart_init
   817 ;;		_uart_send_string
   818 ;; This function is called by:
   819 ;;		Startup code after reset
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           	psect	text0
   824  001B94                     __ptext0:
   825                           	opt stack 0
   826  001B94                     _main:
   827                           	opt stack 24
   828                           
   829                           ;main.c: 24: OSCCONbits.IRCF = 0x07;
   830                           
   831                           ;incstack = 0
   832  001B94  88D3               	bsf	4051,4,c	;volatile
   833  001B96  8AD3               	bsf	4051,5,c	;volatile
   834  001B98  8CD3               	bsf	4051,6,c	;volatile
   835                           
   836                           ;main.c: 25: OSCCONbits.SCS = 0x03;
   837  001B9A  0E03               	movlw	3
   838  001B9C  12D3               	iorwf	4051,f,c	;volatile
   839  001B9E                     l45:
   840  001B9E  A4D3               	btfss	4051,2,c	;volatile
   841  001BA0  D7FE               	goto	l45
   842                           
   843                           ;main.c: 28: TRISB=0;
   844  001BA2  0E00               	movlw	0
   845  001BA4  6E93               	movwf	3987,c	;volatile
   846                           
   847                           ;main.c: 29: LATB=0;
   848  001BA6  0E00               	movlw	0
   849  001BA8  6E8A               	movwf	3978,c	;volatile
   850                           
   851                           ;main.c: 30: uart_init(51,0,1,0);
   852  001BAA  0E00               	movlw	0
   853  001BAC  6E26               	movwf	uart_init@gen_reg+1,c
   854  001BAE  0E33               	movlw	51
   855  001BB0  6E25               	movwf	uart_init@gen_reg,c
   856  001BB2  0E00               	movlw	0
   857  001BB4  6E28               	movwf	uart_init@sync+1,c
   858  001BB6  0E00               	movlw	0
   859  001BB8  6E27               	movwf	uart_init@sync,c
   860  001BBA  0E00               	movlw	0
   861  001BBC  6E2A               	movwf	uart_init@brgh+1,c
   862  001BBE  0E01               	movlw	1
   863  001BC0  6E29               	movwf	uart_init@brgh,c
   864  001BC2  0E00               	movlw	0
   865  001BC4  6E2C               	movwf	uart_init@brg16+1,c
   866  001BC6  0E00               	movlw	0
   867  001BC8  6E2B               	movwf	uart_init@brg16,c
   868  001BCA  ECE8  F012         	call	_uart_init	;wreg free
   869                           
   870                           ;main.c: 32: TRISAbits.RA0 = 1;
   871  001BCE  8092               	bsf	3986,0,c	;volatile
   872                           
   873                           ;main.c: 34: ADCON1bits.VCFG0 = 0;
   874  001BD0  98C1               	bcf	4033,4,c	;volatile
   875                           
   876                           ;main.c: 35: ADCON1bits.VCFG1 = 0;
   877  001BD2  9AC1               	bcf	4033,5,c	;volatile
   878                           
   879                           ;main.c: 36: ADCON1bits.PCFG = 0x0E;
   880  001BD4  50C1               	movf	4033,w,c	;volatile
   881  001BD6  0BF0               	andlw	-16
   882  001BD8  090E               	iorlw	14
   883  001BDA  6EC1               	movwf	4033,c	;volatile
   884                           
   885                           ;main.c: 38: ADCON2bits.ADFM = 1;
   886  001BDC  8EC0               	bsf	4032,7,c	;volatile
   887                           
   888                           ;main.c: 39: ADCON2bits.ACQT = 0x04;
   889  001BDE  50C0               	movf	4032,w,c	;volatile
   890  001BE0  0BC7               	andlw	-57
   891  001BE2  0920               	iorlw	32
   892  001BE4  6EC0               	movwf	4032,c	;volatile
   893                           
   894                           ;main.c: 40: ADCON2bits.ADCS = 0x04;
   895  001BE6  50C0               	movf	4032,w,c	;volatile
   896  001BE8  0BF8               	andlw	-8
   897  001BEA  0904               	iorlw	4
   898  001BEC  6EC0               	movwf	4032,c	;volatile
   899                           
   900                           ;main.c: 42: ADCON0bits.CHS = 0;
   901  001BEE  94C2               	bcf	4034,2,c	;volatile
   902  001BF0  96C2               	bcf	4034,3,c	;volatile
   903  001BF2  98C2               	bcf	4034,4,c	;volatile
   904  001BF4  9AC2               	bcf	4034,5,c	;volatile
   905                           
   906                           ;main.c: 43: ADCON0bits.ADON = 1;
   907  001BF6  80C2               	bsf	4034,0,c	;volatile
   908                           
   909                           ;main.c: 45: RCONbits.IPEN = 1;
   910  001BF8  8ED0               	bsf	4048,7,c	;volatile
   911                           
   912                           ;main.c: 46: INTCONbits.GIEH = 1;
   913  001BFA  8EF2               	bsf	intcon,7,c	;volatile
   914                           
   915                           ;main.c: 47: INTCONbits.GIEL = 1;
   916  001BFC  8CF2               	bsf	intcon,6,c	;volatile
   917  001BFE                     l3391:
   918                           
   919                           ;main.c: 50: ADCON0bits.GODONE = 1;
   920  001BFE  82C2               	bsf	4034,1,c	;volatile
   921  001C00                     l49:
   922  001C00  B2C2               	btfsc	4034,1,c	;volatile
   923  001C02  D7FE               	goto	l49
   924                           
   925                           ;main.c: 52: sprintf(print_buffer,"\rADC Read: 0x%02x%02x\t",ADRESH,ADRESL);
   926  001C04  0E00               	movlw	low _print_buffer
   927  001C06  0100               	movlb	0	; () banked
   928  001C08  6F92               	movwf	sprintf@sp& (0+255),b
   929  001C0A  0E01               	movlw	high _print_buffer
   930  001C0C  0100               	movlb	0	; () banked
   931  001C0E  6F93               	movwf	(sprintf@sp+1)& (0+255),b
   932  001C10  0E97               	movlw	low STR_1
   933  001C12  0100               	movlb	0	; () banked
   934  001C14  6F94               	movwf	sprintf@f& (0+255),b
   935  001C16  0E06               	movlw	high STR_1
   936  001C18  0100               	movlb	0	; () banked
   937  001C1A  6F95               	movwf	(sprintf@f+1)& (0+255),b
   938  001C1C  CFC4 F096          	movff	4036,?_sprintf+4	;volatile
   939  001C20  0100               	movlb	0	; () banked
   940  001C22  6B97               	clrf	(?_sprintf+5)& (0+255),b
   941  001C24  CFC3 F098          	movff	4035,?_sprintf+6	;volatile
   942  001C28  0100               	movlb	0	; () banked
   943  001C2A  6B99               	clrf	(?_sprintf+7)& (0+255),b
   944  001C2C  EC68  F003         	call	_sprintf	;wreg free
   945                           
   946                           ;main.c: 53: uart_send_string(print_buffer);
   947  001C30  0E00               	movlw	low _print_buffer
   948  001C32  6E27               	movwf	uart_send_string@c,c
   949  001C34  0E01               	movlw	high _print_buffer
   950  001C36  6E28               	movwf	uart_send_string@c+1,c
   951  001C38  EC03  F013         	call	_uart_send_string	;wreg free
   952                           
   953                           ;main.c: 55: adc_to_led = (ADRESH << 6) | (ADRESL >> 2);
   954  001C3C  50C4               	movf	4036,w,c	;volatile
   955  001C3E  0100               	movlb	0	; () banked
   956  001C40  6FBA               	movwf	??_main& (0+255),b
   957  001C42  6BBB               	clrf	(??_main+1)& (0+255),b
   958  001C44  0E06               	movlw	6
   959  001C46                     u4095:
   960  001C46  90D8               	bcf	status,0,c
   961  001C48  0100               	movlb	0	; () banked
   962  001C4A  37BA               	rlcf	??_main& (0+255),f,b
   963  001C4C  37BB               	rlcf	(??_main+1)& (0+255),f,b
   964  001C4E  2EE8               	decfsz	wreg,f,c
   965  001C50  D7FA               	goto	u4095
   966  001C52  CFC3 F0BC          	movff	4035,??_main+2	;volatile
   967  001C56  0100               	movlb	0	; () banked
   968  001C58  90D8               	bcf	status,0,c
   969  001C5A  33BC               	rrcf	(??_main+2)& (0+255),f,b
   970  001C5C  0100               	movlb	0	; () banked
   971  001C5E  90D8               	bcf	status,0,c
   972  001C60  33BC               	rrcf	(??_main+2)& (0+255),f,b
   973  001C62  0100               	movlb	0	; () banked
   974  001C64  51BC               	movf	(??_main+2)& (0+255),w,b
   975  001C66  0100               	movlb	0	; () banked
   976  001C68  11BA               	iorwf	??_main& (0+255),w,b
   977  001C6A  6E56               	movwf	_adc_to_led,c
   978  001C6C  0100               	movlb	0	; () banked
   979  001C6E  51BB               	movf	(??_main+1)& (0+255),w,b
   980  001C70  6E57               	movwf	_adc_to_led+1,c
   981                           
   982                           ; BSR set to: 0
   983                           ;main.c: 56: LATB = adc_to_led;
   984  001C72  C056  FF8A         	movff	_adc_to_led,3978	;volatile
   985                           
   986                           ; BSR set to: 0
   987                           ;main.c: 58: adc_to_led = (ADRESH << 8) | (ADRESL);
   988  001C76  50C3               	movf	4035,w,c	;volatile
   989  001C78  CFC4 F0BA          	movff	4036,??_main	;volatile
   990  001C7C  0100               	movlb	0	; () banked
   991  001C7E  6BBB               	clrf	(??_main+1)& (0+255),b
   992  001C80  C0BA  F0BB         	movff	??_main,??_main+1
   993  001C84  0100               	movlb	0	; () banked
   994  001C86  6BBA               	clrf	??_main& (0+255),b
   995  001C88  0100               	movlb	0	; () banked
   996  001C8A  11BA               	iorwf	??_main& (0+255),w,b
   997  001C8C  6E56               	movwf	_adc_to_led,c
   998  001C8E  0100               	movlb	0	; () banked
   999  001C90  51BB               	movf	(??_main+1)& (0+255),w,b
  1000  001C92  6E57               	movwf	_adc_to_led+1,c
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;main.c: 60: adc_volt = adc_to_led * (5.0/1023.0);
  1004  001C94  C056  F02D         	movff	_adc_to_led,___lwtoft@c
  1005  001C98  C057  F02E         	movff	_adc_to_led+1,___lwtoft@c+1
  1006  001C9C  EC70  F013         	call	___lwtoft	;wreg free
  1007  001CA0  C02D  F039         	movff	?___lwtoft,___ftmul@f1
  1008  001CA4  C02E  F03A         	movff	?___lwtoft+1,___ftmul@f1+1
  1009  001CA8  C02F  F03B         	movff	?___lwtoft+2,___ftmul@f1+2
  1010  001CAC  0E28               	movlw	40
  1011  001CAE  6E3C               	movwf	___ftmul@f2,c
  1012  001CB0  0EA0               	movlw	160
  1013  001CB2  6E3D               	movwf	___ftmul@f2+1,c
  1014  001CB4  0E3B               	movlw	59
  1015  001CB6  6E3E               	movwf	___ftmul@f2+2,c
  1016  001CB8  EC43  F010         	call	___ftmul	;wreg free
  1017  001CBC  C039  F053         	movff	?___ftmul,_adc_volt
  1018  001CC0  C03A  F054         	movff	?___ftmul+1,_adc_volt+1
  1019  001CC4  C03B  F055         	movff	?___ftmul+2,_adc_volt+2
  1020                           
  1021                           ;main.c: 61: sprintf(print_buffer,"ADC Volt: %.2f\t",adc_volt);
  1022  001CC8  0E00               	movlw	low _print_buffer
  1023  001CCA  0100               	movlb	0	; () banked
  1024  001CCC  6F92               	movwf	sprintf@sp& (0+255),b
  1025  001CCE  0E01               	movlw	high _print_buffer
  1026  001CD0  0100               	movlb	0	; () banked
  1027  001CD2  6F93               	movwf	(sprintf@sp+1)& (0+255),b
  1028  001CD4  0EBF               	movlw	low STR_2
  1029  001CD6  0100               	movlb	0	; () banked
  1030  001CD8  6F94               	movwf	sprintf@f& (0+255),b
  1031  001CDA  0E06               	movlw	high STR_2
  1032  001CDC  0100               	movlb	0	; () banked
  1033  001CDE  6F95               	movwf	(sprintf@f+1)& (0+255),b
  1034  001CE0  C053  F096         	movff	_adc_volt,?_sprintf+4
  1035  001CE4  C054  F097         	movff	_adc_volt+1,?_sprintf+5
  1036  001CE8  C055  F098         	movff	_adc_volt+2,?_sprintf+6
  1037  001CEC  EC68  F003         	call	_sprintf	;wreg free
  1038                           
  1039                           ;main.c: 62: uart_send_string(print_buffer);
  1040  001CF0  0E00               	movlw	low _print_buffer
  1041  001CF2  6E27               	movwf	uart_send_string@c,c
  1042  001CF4  0E01               	movlw	high _print_buffer
  1043  001CF6  6E28               	movwf	uart_send_string@c+1,c
  1044  001CF8  EC03  F013         	call	_uart_send_string	;wreg free
  1045  001CFC  D780               	goto	l3391
  1046  001CFE                     __end_of_main:
  1047                           	opt stack 0
  1048                           tblptru	equ	0xFF8
  1049                           intcon	equ	0xFF2
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           postdec1	equ	0xFE5
  1053                           fsr1h	equ	0xFE2
  1054                           fsr1l	equ	0xFE1
  1055                           status	equ	0xFD8
  1056                           
  1057 ;; *************** function _uart_send_string *****************
  1058 ;; Defined at:
  1059 ;;		line 50 in file "uart_layer.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;  c               2   38[COMRAM] PTR unsigned char 
  1062 ;;		 -> print_buffer(256), 
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;  i               1   40[COMRAM] unsigned char 
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1074 ;;      Params:         2       0       0       0       0       0       0
  1075 ;;      Locals:         1       0       0       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0       0       0
  1077 ;;      Totals:         3       0       0       0       0       0       0
  1078 ;;Total ram usage:        3 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; Hardware stack levels required when called:    4
  1081 ;; This function calls:
  1082 ;;		_uart_send
  1083 ;; This function is called by:
  1084 ;;		_main
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text1
  1089  002606                     __ptext1:
  1090                           	opt stack 0
  1091  002606                     _uart_send_string:
  1092                           	opt stack 26
  1093                           
  1094                           ;uart_layer.c: 51: uint8_t i=0;
  1095                           
  1096                           ;incstack = 0
  1097  002606  0E00               	movlw	0
  1098  002608  6E29               	movwf	uart_send_string@i,c
  1099                           
  1100                           ;uart_layer.c: 52: while(c[i] != '\0'){
  1101  00260A  D00B               	goto	l2825
  1102  00260C                     l2821:
  1103                           
  1104                           ;uart_layer.c: 53: uart_send(&c[i]);
  1105  00260C  5029               	movf	uart_send_string@i,w,c
  1106  00260E  0D01               	mullw	1
  1107  002610  50F3               	movf	prodl,w,c
  1108  002612  2427               	addwf	uart_send_string@c,w,c
  1109  002614  6E25               	movwf	uart_send@c,c
  1110  002616  50F4               	movf	prodh,w,c
  1111  002618  2028               	addwfc	uart_send_string@c+1,w,c
  1112  00261A  6E26               	movwf	uart_send@c+1,c
  1113  00261C  EC91  F013         	call	_uart_send	;wreg free
  1114                           
  1115                           ;uart_layer.c: 54: i++;
  1116  002620  2A29               	incf	uart_send_string@i,f,c
  1117  002622                     l2825:
  1118  002622  5029               	movf	uart_send_string@i,w,c
  1119  002624  0D01               	mullw	1
  1120  002626  50F3               	movf	prodl,w,c
  1121  002628  2427               	addwf	uart_send_string@c,w,c
  1122  00262A  6ED9               	movwf	fsr2l,c
  1123  00262C  50F4               	movf	prodh,w,c
  1124  00262E  2028               	addwfc	uart_send_string@c+1,w,c
  1125  002630  6EDA               	movwf	fsr2h,c
  1126  002632  50DF               	movf	indf2,w,c
  1127  002634  B4D8               	btfsc	status,2,c
  1128  002636  0012               	return	
  1129  002638  D7E9               	goto	l2821
  1130  00263A                     __end_of_uart_send_string:
  1131                           	opt stack 0
  1132                           tblptru	equ	0xFF8
  1133                           prodh	equ	0xFF4
  1134                           prodl	equ	0xFF3
  1135                           intcon	equ	0xFF2
  1136                           postinc0	equ	0xFEE
  1137                           wreg	equ	0xFE8
  1138                           postdec1	equ	0xFE5
  1139                           fsr1h	equ	0xFE2
  1140                           fsr1l	equ	0xFE1
  1141                           indf2	equ	0xFDF
  1142                           fsr2h	equ	0xFDA
  1143                           fsr2l	equ	0xFD9
  1144                           status	equ	0xFD8
  1145                           
  1146 ;; *************** function _uart_send *****************
  1147 ;; Defined at:
  1148 ;;		line 24 in file "uart_layer.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;  c               2   36[COMRAM] PTR unsigned char 
  1151 ;;		 -> print_buffer(256), 
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;		None
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  1    wreg      void 
  1156 ;; Registers used:
  1157 ;;		wreg, fsr2l, fsr2h, status,2
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1163 ;;      Params:         2       0       0       0       0       0       0
  1164 ;;      Locals:         0       0       0       0       0       0       0
  1165 ;;      Temps:          0       0       0       0       0       0       0
  1166 ;;      Totals:         2       0       0       0       0       0       0
  1167 ;;Total ram usage:        2 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; Hardware stack levels required when called:    3
  1170 ;; This function calls:
  1171 ;;		Nothing
  1172 ;; This function is called by:
  1173 ;;		_uart_send_string
  1174 ;;		_uart_send_array
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text2
  1179  002722                     __ptext2:
  1180                           	opt stack 0
  1181  002722                     _uart_send:
  1182                           	opt stack 26
  1183                           
  1184                           ;uart_layer.c: 25: TXREG=*c;
  1185                           
  1186                           ;incstack = 0
  1187  002722  C025  FFD9         	movff	uart_send@c,fsr2l
  1188  002726  C026  FFDA         	movff	uart_send@c+1,fsr2h
  1189  00272A  50DF               	movf	indf2,w,c
  1190  00272C  6EAD               	movwf	4013,c	;volatile
  1191                           
  1192                           ;uart_layer.c: 26: while(TXSTAbits.TRMT==0){
  1193  00272E  D001               	goto	l89
  1194  002730                     l90:
  1195                           
  1196                           ;uart_layer.c: 27: __nop();
  1197  002730  F000               	nop	
  1198  002732                     l89:
  1199  002732  B2AC               	btfsc	4012,1,c	;volatile
  1200  002734  0012               	return	
  1201  002736  D7FC               	goto	l90
  1202  002738                     __end_of_uart_send:
  1203                           	opt stack 0
  1204                           tblptru	equ	0xFF8
  1205                           prodh	equ	0xFF4
  1206                           prodl	equ	0xFF3
  1207                           intcon	equ	0xFF2
  1208                           postinc0	equ	0xFEE
  1209                           wreg	equ	0xFE8
  1210                           postdec1	equ	0xFE5
  1211                           fsr1h	equ	0xFE2
  1212                           fsr1l	equ	0xFE1
  1213                           indf2	equ	0xFDF
  1214                           fsr2h	equ	0xFDA
  1215                           fsr2l	equ	0xFD9
  1216                           status	equ	0xFD8
  1217                           
  1218 ;; *************** function _uart_init *****************
  1219 ;; Defined at:
  1220 ;;		line 4 in file "uart_layer.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;  gen_reg         2   36[COMRAM] unsigned int 
  1223 ;;  sync            2   38[COMRAM] unsigned int 
  1224 ;;  brgh            2   40[COMRAM] unsigned int 
  1225 ;;  brg16           2   42[COMRAM] unsigned int 
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, status,2
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1237 ;;      Params:         8       0       0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0
  1240 ;;      Totals:         8       0       0       0       0       0       0
  1241 ;;Total ram usage:        8 bytes
  1242 ;; Hardware stack levels used:    1
  1243 ;; Hardware stack levels required when called:    3
  1244 ;; This function calls:
  1245 ;;		Nothing
  1246 ;; This function is called by:
  1247 ;;		_main
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text3
  1252  0025D0                     __ptext3:
  1253                           	opt stack 0
  1254  0025D0                     _uart_init:
  1255                           	opt stack 27
  1256                           
  1257                           ;uart_layer.c: 6: TRISCbits.RC7=1;
  1258                           
  1259                           ;incstack = 0
  1260  0025D0  8E94               	bsf	3988,7,c	;volatile
  1261                           
  1262                           ;uart_layer.c: 7: TRISCbits.RC6=1;
  1263  0025D2  8C94               	bsf	3988,6,c	;volatile
  1264                           
  1265                           ;uart_layer.c: 9: SPBRGH = (gen_reg & 0xFF00) >> 8;
  1266  0025D4  5026               	movf	uart_init@gen_reg+1,w,c
  1267  0025D6  6EB0               	movwf	4016,c	;volatile
  1268                           
  1269                           ;uart_layer.c: 10: SPBRG = gen_reg & 0x00FF;
  1270  0025D8  C025  FFAF         	movff	uart_init@gen_reg,4015	;volatile
  1271                           
  1272                           ;uart_layer.c: 12: RCSTAbits.CREN = 1;
  1273  0025DC  88AB               	bsf	4011,4,c	;volatile
  1274                           
  1275                           ;uart_layer.c: 13: RCSTAbits.SPEN = 1;
  1276  0025DE  8EAB               	bsf	4011,7,c	;volatile
  1277                           
  1278                           ;uart_layer.c: 14: BAUDCONbits.BRG16 = brg16;
  1279  0025E0  B02B               	btfsc	uart_init@brg16,0,c
  1280  0025E2  D002               	bra	u2545
  1281  0025E4  96B8               	bcf	4024,3,c	;volatile
  1282  0025E6  D001               	bra	u2546
  1283  0025E8                     u2545:
  1284  0025E8  86B8               	bsf	4024,3,c	;volatile
  1285  0025EA                     u2546:
  1286                           
  1287                           ;uart_layer.c: 16: TXSTAbits.SYNC = sync;
  1288  0025EA  B027               	btfsc	uart_init@sync,0,c
  1289  0025EC  D002               	bra	u2555
  1290  0025EE  98AC               	bcf	4012,4,c	;volatile
  1291  0025F0  D001               	bra	u2556
  1292  0025F2                     u2555:
  1293  0025F2  88AC               	bsf	4012,4,c	;volatile
  1294  0025F4                     u2556:
  1295                           
  1296                           ;uart_layer.c: 17: TXSTAbits.BRGH = brgh;
  1297  0025F4  B029               	btfsc	uart_init@brgh,0,c
  1298  0025F6  D002               	bra	u2565
  1299  0025F8  94AC               	bcf	4012,2,c	;volatile
  1300  0025FA  D001               	bra	u2566
  1301  0025FC                     u2565:
  1302  0025FC  84AC               	bsf	4012,2,c	;volatile
  1303  0025FE                     u2566:
  1304                           
  1305                           ;uart_layer.c: 18: TXSTAbits.TXEN = 1;
  1306  0025FE  8AAC               	bsf	4012,5,c	;volatile
  1307                           
  1308                           ;uart_layer.c: 20: IPR1bits.RCIP=1;
  1309  002600  8A9F               	bsf	3999,5,c	;volatile
  1310                           
  1311                           ;uart_layer.c: 21: PIE1bits.RCIE=1;
  1312  002602  8A9D               	bsf	3997,5,c	;volatile
  1313  002604  0012               	return		;funcret
  1314  002606                     __end_of_uart_init:
  1315                           	opt stack 0
  1316                           tblptru	equ	0xFF8
  1317                           prodh	equ	0xFF4
  1318                           prodl	equ	0xFF3
  1319                           intcon	equ	0xFF2
  1320                           postinc0	equ	0xFEE
  1321                           wreg	equ	0xFE8
  1322                           postdec1	equ	0xFE5
  1323                           fsr1h	equ	0xFE2
  1324                           fsr1l	equ	0xFE1
  1325                           indf2	equ	0xFDF
  1326                           fsr2h	equ	0xFDA
  1327                           fsr2l	equ	0xFD9
  1328                           status	equ	0xFD8
  1329                           
  1330 ;; *************** function _sprintf *****************
  1331 ;; Defined at:
  1332 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;  sp              2   18[BANK0 ] PTR unsigned char 
  1335 ;;		 -> print_buffer(256), 
  1336 ;;  f               2   20[BANK0 ] PTR const unsigned char 
  1337 ;;		 -> STR_2(16), STR_1(23), 
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;  idx             1   35[BANK0 ] unsigned char 
  1340 ;;  tmpval          4   42[BANK0 ] struct .
  1341 ;;  val             4   38[BANK0 ] unsigned long 
  1342 ;;  fval            3   52[BANK0 ] unsigned long 
  1343 ;;  cp              3    0        PTR const unsigned char 
  1344 ;;  prec            2   55[BANK0 ] int 
  1345 ;;  width           2   50[BANK0 ] int 
  1346 ;;  flag            2   48[BANK0 ] unsigned short 
  1347 ;;  exp             2   46[BANK0 ] int 
  1348 ;;  ap              2   36[BANK0 ] PTR void [1]
  1349 ;;		 -> ?_sprintf(2), 
  1350 ;;  len             2    0        unsigned int 
  1351 ;;  c               1   57[BANK0 ] char 
  1352 ;;  d               1    0        unsigned char 
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  2   18[BANK0 ] int 
  1355 ;; Registers used:
  1356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1362 ;;      Params:         0       8       0       0       0       0       0
  1363 ;;      Locals:         0      26       0       0       0       0       0
  1364 ;;      Temps:          0       6       0       0       0       0       0
  1365 ;;      Totals:         0      40       0       0       0       0       0
  1366 ;;Total ram usage:       40 bytes
  1367 ;; Hardware stack levels used:    1
  1368 ;; Hardware stack levels required when called:    6
  1369 ;; This function calls:
  1370 ;;		___awdiv
  1371 ;;		___ftadd
  1372 ;;		___ftge
  1373 ;;		___ftmul
  1374 ;;		___ftneg
  1375 ;;		___ftsub
  1376 ;;		___fttol
  1377 ;;		___lldiv
  1378 ;;		___llmod
  1379 ;;		___lltoft
  1380 ;;		___wmul
  1381 ;;		__div_to_l_
  1382 ;;		__tdiv_to_l_
  1383 ;;		_fround
  1384 ;;		_isdigit
  1385 ;;		_scale
  1386 ;; This function is called by:
  1387 ;;		_main
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           	psect	text4
  1392  0006D0                     __ptext4:
  1393                           	opt stack 0
  1394  0006D0                     _sprintf:
  1395                           	opt stack 24
  1396                           
  1397                           ;doprnt.c: 494: va_list ap;
  1398                           ;doprnt.c: 499: signed char c;
  1399                           ;doprnt.c: 501: int width;
  1400                           ;doprnt.c: 504: int prec;
  1401                           ;doprnt.c: 508: unsigned short flag;
  1402                           ;doprnt.c: 515: char d;
  1403                           ;doprnt.c: 516: double fval;
  1404                           ;doprnt.c: 517: int exp;
  1405                           ;doprnt.c: 523: union {
  1406                           ;doprnt.c: 524: unsigned long vd;
  1407                           ;doprnt.c: 525: double integ;
  1408                           ;doprnt.c: 526: } tmpval;
  1409                           ;doprnt.c: 528: unsigned long val;
  1410                           ;doprnt.c: 529: unsigned len;
  1411                           ;doprnt.c: 530: const char * cp;
  1412                           ;doprnt.c: 533: *ap = __va_start();
  1413                           
  1414                           ;incstack = 0
  1415  0006D0  0E96               	movlw	low (?_sprintf+4)
  1416  0006D2  0100               	movlb	0	; () banked
  1417  0006D4  6FA4               	movwf	sprintf@ap& (0+255),b
  1418  0006D6  0E00               	movlw	high (?_sprintf+4)
  1419  0006D8  0100               	movlb	0	; () banked
  1420  0006DA  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  1421                           
  1422                           ;doprnt.c: 536: while(c = *f++) {
  1423  0006DC  EF65  F009         	goto	l3353
  1424  0006E0                     l3033:
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;doprnt.c: 538: if(c != '%')
  1428  0006E0  0E25               	movlw	37
  1429  0006E2  0100               	movlb	0	; () banked
  1430  0006E4  19B9               	xorwf	sprintf@c& (0+255),w,b
  1431  0006E6  B4D8               	btfsc	status,2,c
  1432  0006E8  D00B               	goto	l3039
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;doprnt.c: 540: {
  1436                           ;doprnt.c: 541: ((*sp++ = (c)));
  1437  0006EA  C092  FFD9         	movff	sprintf@sp,fsr2l
  1438  0006EE  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  1439  0006F2  C0B9  FFDF         	movff	sprintf@c,indf2
  1440                           
  1441                           ; BSR set to: 0
  1442  0006F6  0100               	movlb	0	; () banked
  1443  0006F8  4B92               	infsnz	sprintf@sp& (0+255),f,b
  1444  0006FA  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  1445                           
  1446                           ;doprnt.c: 542: continue;
  1447  0006FC  EF65  F009         	goto	l3353
  1448  000700                     l3039:
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;doprnt.c: 543: }
  1452                           ;doprnt.c: 546: width = 0;
  1453  000700  0E00               	movlw	0
  1454  000702  0100               	movlb	0	; () banked
  1455  000704  6FB3               	movwf	(sprintf@width+1)& (0+255),b
  1456  000706  0E00               	movlw	0
  1457  000708  6FB2               	movwf	sprintf@width& (0+255),b
  1458                           
  1459                           ;doprnt.c: 548: flag = 0;
  1460  00070A  0E00               	movlw	0
  1461  00070C  0100               	movlb	0	; () banked
  1462  00070E  6FB1               	movwf	(sprintf@flag+1)& (0+255),b
  1463  000710  0E00               	movlw	0
  1464  000712  6FB0               	movwf	sprintf@flag& (0+255),b
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;doprnt.c: 551: switch(*f) {
  1468                           
  1469                           ;doprnt.c: 550: for(;;) {
  1470  000714  D005               	goto	l3045
  1471  000716                     l3041:
  1472                           
  1473                           ;doprnt.c: 580: flag |= 0x04;
  1474  000716  0100               	movlb	0	; () banked
  1475  000718  85B0               	bsf	sprintf@flag& (0+255),2,b
  1476                           
  1477                           ;doprnt.c: 581: f++;
  1478  00071A  0100               	movlb	0	; () banked
  1479  00071C  4B94               	infsnz	sprintf@f& (0+255),f,b
  1480  00071E  2B95               	incf	(sprintf@f+1)& (0+255),f,b
  1481  000720                     l3045:
  1482  000720  C094  FFF6         	movff	sprintf@f,tblptrl
  1483  000724  C095  FFF7         	movff	sprintf@f+1,tblptrh
  1484  000728                     	if	0	;tblptru may be non-zero
  1485  000728                     	endif
  1486  000728                     	if	0	;tblptru may be non-zero
  1487  000728                     	endif
  1488  000728  0008               	tblrd		*
  1489  00072A  50F5               	movf	tablat,w,c
  1490                           
  1491                           ; Switch size 1, requested type "space"
  1492                           ; Number of cases is 1, Range of values is 48 to 48
  1493                           ; switch strategies available:
  1494                           ; Name         Instructions Cycles
  1495                           ; simple_byte            4     3 (average)
  1496                           ;	Chosen strategy is simple_byte
  1497  00072C  0A30               	xorlw	48	; case 48
  1498  00072E  B4D8               	btfsc	status,2,c
  1499  000730  D7F2               	goto	l3041
  1500                           
  1501                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1502                           
  1503                           ;doprnt.c: 586: }
  1504                           
  1505                           ;doprnt.c: 585: break;
  1506  000732  C094  FFF6         	movff	sprintf@f,tblptrl
  1507  000736  C095  FFF7         	movff	sprintf@f+1,tblptrh
  1508  00073A                     	if	0	;tblptru may be non-zero
  1509  00073A                     	endif
  1510  00073A                     	if	0	;tblptru may be non-zero
  1511  00073A                     	endif
  1512  00073A  0008               	tblrd		*
  1513  00073C  50F5               	movf	tablat,w,c
  1514  00073E  EC82  F013         	call	_isdigit
  1515  000742  A0D8               	btfss	status,0,c
  1516  000744  D03F               	goto	l3059
  1517                           
  1518                           ;doprnt.c: 598: width = 0;
  1519  000746  0E00               	movlw	0
  1520  000748  0100               	movlb	0	; () banked
  1521  00074A  6FB3               	movwf	(sprintf@width+1)& (0+255),b
  1522  00074C  0E00               	movlw	0
  1523  00074E  6FB2               	movwf	sprintf@width& (0+255),b
  1524  000750                     l3051:
  1525                           
  1526                           ;doprnt.c: 600: width *= 10;
  1527  000750  C0B2  F033         	movff	sprintf@width,___wmul@multiplier
  1528  000754  C0B3  F034         	movff	sprintf@width+1,___wmul@multiplier+1
  1529  000758  0E00               	movlw	0
  1530  00075A  6E36               	movwf	___wmul@multiplicand+1,c
  1531  00075C  0E0A               	movlw	10
  1532  00075E  6E35               	movwf	___wmul@multiplicand,c
  1533  000760  EC4B  F013         	call	___wmul	;wreg free
  1534  000764  C033  F0B2         	movff	?___wmul,sprintf@width
  1535  000768  C034  F0B3         	movff	?___wmul+1,sprintf@width+1
  1536                           
  1537                           ;doprnt.c: 601: width += *f++ - '0';
  1538  00076C  0ED0               	movlw	208
  1539  00076E  0100               	movlb	0	; () banked
  1540  000770  6F9A               	movwf	??_sprintf& (0+255),b
  1541  000772  0EFF               	movlw	255
  1542  000774  0100               	movlb	0	; () banked
  1543  000776  6F9B               	movwf	(??_sprintf+1)& (0+255),b
  1544  000778  C094  FFF6         	movff	sprintf@f,tblptrl
  1545  00077C  C095  FFF7         	movff	sprintf@f+1,tblptrh
  1546  000780                     	if	0	;tblptru may be non-zero
  1547  000780                     	endif
  1548  000780                     	if	0	;tblptru may be non-zero
  1549  000780                     	endif
  1550  000780  0008               	tblrd		*
  1551  000782  50F5               	movf	tablat,w,c
  1552  000784  0100               	movlb	0	; () banked
  1553  000786  6F9C               	movwf	(??_sprintf+2)& (0+255),b
  1554  000788  6B9D               	clrf	(??_sprintf+3)& (0+255),b
  1555  00078A  0100               	movlb	0	; () banked
  1556  00078C  519A               	movf	??_sprintf& (0+255),w,b
  1557  00078E  0100               	movlb	0	; () banked
  1558  000790  279C               	addwf	(??_sprintf+2)& (0+255),f,b
  1559  000792  0100               	movlb	0	; () banked
  1560  000794  519B               	movf	(??_sprintf+1)& (0+255),w,b
  1561  000796  0100               	movlb	0	; () banked
  1562  000798  239D               	addwfc	(??_sprintf+3)& (0+255),f,b
  1563  00079A  0100               	movlb	0	; () banked
  1564  00079C  519C               	movf	(??_sprintf+2)& (0+255),w,b
  1565  00079E  0100               	movlb	0	; () banked
  1566  0007A0  27B2               	addwf	sprintf@width& (0+255),f,b
  1567  0007A2  0100               	movlb	0	; () banked
  1568  0007A4  519D               	movf	(??_sprintf+3)& (0+255),w,b
  1569  0007A6  0100               	movlb	0	; () banked
  1570  0007A8  23B3               	addwfc	(sprintf@width+1)& (0+255),f,b
  1571                           
  1572                           ; BSR set to: 0
  1573  0007AA  0100               	movlb	0	; () banked
  1574  0007AC  4B94               	infsnz	sprintf@f& (0+255),f,b
  1575  0007AE  2B95               	incf	(sprintf@f+1)& (0+255),f,b
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1579  0007B0  C094  FFF6         	movff	sprintf@f,tblptrl
  1580  0007B4  C095  FFF7         	movff	sprintf@f+1,tblptrh
  1581  0007B8                     	if	0	;tblptru may be non-zero
  1582  0007B8                     	endif
  1583  0007B8                     	if	0	;tblptru may be non-zero
  1584  0007B8                     	endif
  1585  0007B8  0008               	tblrd		*
  1586  0007BA  50F5               	movf	tablat,w,c
  1587  0007BC  EC82  F013         	call	_isdigit
  1588  0007C0  B0D8               	btfsc	status,0,c
  1589  0007C2  D7C6               	goto	l3051
  1590  0007C4                     l3059:
  1591                           
  1592                           ;doprnt.c: 608: }
  1593                           ;doprnt.c: 611: if(*f == '.') {
  1594  0007C4  C094  FFF6         	movff	sprintf@f,tblptrl
  1595  0007C8  C095  FFF7         	movff	sprintf@f+1,tblptrh
  1596  0007CC                     	if	0	;tblptru may be non-zero
  1597  0007CC                     	endif
  1598  0007CC                     	if	0	;tblptru may be non-zero
  1599  0007CC                     	endif
  1600  0007CC  0008               	tblrd		*
  1601  0007CE  50F5               	movf	tablat,w,c
  1602  0007D0  0A2E               	xorlw	46
  1603  0007D2  A4D8               	btfss	status,2,c
  1604  0007D4  D034               	goto	l3071
  1605                           
  1606                           ;doprnt.c: 612: flag |= 0x4000;
  1607  0007D6  0100               	movlb	0	; () banked
  1608  0007D8  8DB1               	bsf	(sprintf@flag+1)& (0+255),6,b
  1609                           
  1610                           ;doprnt.c: 613: f++;
  1611  0007DA  0100               	movlb	0	; () banked
  1612  0007DC  4B94               	infsnz	sprintf@f& (0+255),f,b
  1613  0007DE  2B95               	incf	(sprintf@f+1)& (0+255),f,b
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;doprnt.c: 620: {
  1617                           ;doprnt.c: 621: prec = 0;
  1618  0007E0  0E00               	movlw	0
  1619  0007E2  0100               	movlb	0	; () banked
  1620  0007E4  6FB8               	movwf	(sprintf@prec+1)& (0+255),b
  1621  0007E6  0E00               	movlw	0
  1622  0007E8  6FB7               	movwf	sprintf@prec& (0+255),b
  1623                           
  1624                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1625  0007EA  D01E               	goto	l3069
  1626  0007EC                     l3065:
  1627                           
  1628                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1629  0007EC  C0B7  F033         	movff	sprintf@prec,___wmul@multiplier
  1630  0007F0  C0B8  F034         	movff	sprintf@prec+1,___wmul@multiplier+1
  1631  0007F4  0E00               	movlw	0
  1632  0007F6  6E36               	movwf	___wmul@multiplicand+1,c
  1633  0007F8  0E0A               	movlw	10
  1634  0007FA  6E35               	movwf	___wmul@multiplicand,c
  1635  0007FC  EC4B  F013         	call	___wmul	;wreg free
  1636  000800  C094  FFF6         	movff	sprintf@f,tblptrl
  1637  000804  C095  FFF7         	movff	sprintf@f+1,tblptrh
  1638  000808                     	if	0	;tblptru may be non-zero
  1639  000808                     	endif
  1640  000808                     	if	0	;tblptru may be non-zero
  1641  000808                     	endif
  1642  000808  0008               	tblrd		*
  1643  00080A  50F5               	movf	tablat,w,c
  1644  00080C  2633               	addwf	?___wmul,f,c
  1645  00080E  0E00               	movlw	0
  1646  000810  2234               	addwfc	?___wmul+1,f,c
  1647  000812  0ED0               	movlw	208
  1648  000814  2433               	addwf	?___wmul,w,c
  1649  000816  0100               	movlb	0	; () banked
  1650  000818  6FB7               	movwf	sprintf@prec& (0+255),b
  1651  00081A  0EFF               	movlw	255
  1652  00081C  2034               	addwfc	?___wmul+1,w,c
  1653  00081E  0100               	movlb	0	; () banked
  1654  000820  6FB8               	movwf	(sprintf@prec+1)& (0+255),b
  1655                           
  1656                           ; BSR set to: 0
  1657  000822  0100               	movlb	0	; () banked
  1658  000824  4B94               	infsnz	sprintf@f& (0+255),f,b
  1659  000826  2B95               	incf	(sprintf@f+1)& (0+255),f,b
  1660  000828                     l3069:
  1661                           
  1662                           ; BSR set to: 0
  1663  000828  C094  FFF6         	movff	sprintf@f,tblptrl
  1664  00082C  C095  FFF7         	movff	sprintf@f+1,tblptrh
  1665  000830                     	if	0	;tblptru may be non-zero
  1666  000830                     	endif
  1667  000830                     	if	0	;tblptru may be non-zero
  1668  000830                     	endif
  1669  000830  0008               	tblrd		*
  1670  000832  50F5               	movf	tablat,w,c
  1671  000834  EC82  F013         	call	_isdigit
  1672  000838  A0D8               	btfss	status,0,c
  1673  00083A  D00C               	goto	l3079
  1674  00083C  D7D7               	goto	l3065
  1675  00083E                     l3071:
  1676                           
  1677                           ;doprnt.c: 626: prec = 0;
  1678  00083E  0E00               	movlw	0
  1679  000840  0100               	movlb	0	; () banked
  1680  000842  6FB8               	movwf	(sprintf@prec+1)& (0+255),b
  1681  000844  0E00               	movlw	0
  1682  000846  6FB7               	movwf	sprintf@prec& (0+255),b
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;doprnt.c: 628: flag |= 0x1000;
  1686  000848  0100               	movlb	0	; () banked
  1687  00084A  89B1               	bsf	(sprintf@flag+1)& (0+255),4,b
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;doprnt.c: 630: }
  1691                           ;doprnt.c: 635: switch(c = *f++) {
  1692  00084C  D003               	goto	l3079
  1693  00084E                     l3075:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;doprnt.c: 663: flag |= 0x400;
  1697  00084E  0100               	movlb	0	; () banked
  1698  000850  85B1               	bsf	(sprintf@flag+1)& (0+255),2,b
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;doprnt.c: 723: break;
  1702                           
  1703                           ;doprnt.c: 718: case 'x':
  1704                           
  1705                           ;doprnt.c: 664: break;
  1706  000852  D017               	goto	l3081
  1707  000854                     l3079:
  1708  000854  C094  FFF6         	movff	sprintf@f,tblptrl
  1709  000858  C095  FFF7         	movff	sprintf@f+1,tblptrh
  1710  00085C  0100               	movlb	0	; () banked
  1711  00085E  4B94               	infsnz	sprintf@f& (0+255),f,b
  1712  000860  2B95               	incf	(sprintf@f+1)& (0+255),f,b
  1713  000862                     	if	0	;tblptru may be non-zero
  1714  000862                     	endif
  1715  000862                     	if	0	;tblptru may be non-zero
  1716  000862                     	endif
  1717  000862  0008               	tblrd		*
  1718  000864  CFF5 F0B9          	movff	tablat,sprintf@c
  1719  000868  0100               	movlb	0	; () banked
  1720  00086A  51B9               	movf	sprintf@c& (0+255),w,b
  1721                           
  1722                           ; Switch size 1, requested type "space"
  1723                           ; Number of cases is 3, Range of values is 0 to 120
  1724                           ; switch strategies available:
  1725                           ; Name         Instructions Cycles
  1726                           ; simple_byte           10     6 (average)
  1727                           ;	Chosen strategy is simple_byte
  1728  00086C  0A00               	xorlw	0	; case 0
  1729  00086E  B4D8               	btfsc	status,2,c
  1730  000870  EF74  F009         	goto	l3355
  1731  000874  0A66               	xorlw	102	; case 102
  1732  000876  B4D8               	btfsc	status,2,c
  1733  000878  D7EA               	goto	l3075
  1734  00087A  0A1E               	xorlw	30	; case 120
  1735  00087C  A4D8               	btfss	status,2,c
  1736  00087E  EF65  F009         	goto	l3353
  1737  000882                     l3081:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;doprnt.c: 825: if(flag & (0x700)) {
  1741  000882  0E07               	movlw	7
  1742  000884  0100               	movlb	0	; () banked
  1743  000886  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  1744  000888  B4D8               	btfsc	status,2,c
  1745  00088A  D39D               	goto	l3261
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;doprnt.c: 827: if(flag & 0x1000)
  1749  00088C  0100               	movlb	0	; () banked
  1750  00088E  A9B1               	btfss	(sprintf@flag+1)& (0+255),4,b
  1751  000890  D005               	goto	l3087
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;doprnt.c: 829: prec = 6;
  1755  000892  0E00               	movlw	0
  1756  000894  0100               	movlb	0	; () banked
  1757  000896  6FB8               	movwf	(sprintf@prec+1)& (0+255),b
  1758  000898  0E06               	movlw	6
  1759  00089A  6FB7               	movwf	sprintf@prec& (0+255),b
  1760  00089C                     l3087:
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1764  00089C  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  1765  0008A0  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  1766  0008A4  CFDE F0B4          	movff	postinc2,sprintf@fval
  1767  0008A8  CFDE F0B5          	movff	postinc2,sprintf@fval+1
  1768  0008AC  CFDD F0B6          	movff	postdec2,sprintf@fval+2
  1769                           
  1770                           ; BSR set to: 0
  1771  0008B0  0E03               	movlw	3
  1772  0008B2  0100               	movlb	0	; () banked
  1773  0008B4  27A4               	addwf	sprintf@ap& (0+255),f,b
  1774  0008B6  0E00               	movlw	0
  1775  0008B8  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;doprnt.c: 831: if(fval < 0.0) {
  1779  0008BA  0100               	movlb	0	; () banked
  1780  0008BC  AFB6               	btfss	(sprintf@fval+2)& (0+255),7,b
  1781  0008BE  D011               	goto	l3097
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;doprnt.c: 832: fval = -fval;
  1785  0008C0  C0B4  F025         	movff	sprintf@fval,___ftneg@f1
  1786  0008C4  C0B5  F026         	movff	sprintf@fval+1,___ftneg@f1+1
  1787  0008C8  C0B6  F027         	movff	sprintf@fval+2,___ftneg@f1+2
  1788  0008CC  EC5E  F013         	call	___ftneg	;wreg free
  1789  0008D0  C025  F0B4         	movff	?___ftneg,sprintf@fval
  1790  0008D4  C026  F0B5         	movff	?___ftneg+1,sprintf@fval+1
  1791  0008D8  C027  F0B6         	movff	?___ftneg+2,sprintf@fval+2
  1792                           
  1793                           ;doprnt.c: 833: flag |= 0x03;
  1794  0008DC  0E03               	movlw	3
  1795  0008DE  0100               	movlb	0	; () banked
  1796  0008E0  13B0               	iorwf	sprintf@flag& (0+255),f,b
  1797  0008E2                     l3097:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;doprnt.c: 834: }
  1801                           ;doprnt.c: 835: exp = 0;
  1802  0008E2  0E00               	movlw	0
  1803  0008E4  0100               	movlb	0	; () banked
  1804  0008E6  6FAF               	movwf	(sprintf@exp+1)& (0+255),b
  1805  0008E8  0E00               	movlw	0
  1806  0008EA  6FAE               	movwf	sprintf@exp& (0+255),b
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;doprnt.c: 836: if( fval!=0) {
  1810  0008EC  0100               	movlb	0	; () banked
  1811  0008EE  51B4               	movf	sprintf@fval& (0+255),w,b
  1812  0008F0  0100               	movlb	0	; () banked
  1813  0008F2  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1814  0008F4  0100               	movlb	0	; () banked
  1815  0008F6  11B6               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1816  0008F8  B4D8               	btfsc	status,2,c
  1817  0008FA  D091               	goto	l3125
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1821  0008FC  0E82               	movlw	130
  1822  0008FE  0100               	movlb	0	; () banked
  1823  000900  6F9A               	movwf	??_sprintf& (0+255),b
  1824  000902  0EFF               	movlw	255
  1825  000904  0100               	movlb	0	; () banked
  1826  000906  6F9B               	movwf	(??_sprintf+1)& (0+255),b
  1827  000908  C0B4  F09C         	movff	sprintf@fval,??_sprintf+2
  1828  00090C  C0B5  F09D         	movff	sprintf@fval+1,??_sprintf+3
  1829  000910  C0B6  F09E         	movff	sprintf@fval+2,??_sprintf+4
  1830  000914  C0B7  F09F         	movff	sprintf@fval+3,??_sprintf+5
  1831  000918  0E10               	movlw	16
  1832  00091A  D006               	goto	u3600
  1833  00091C                     u3605:
  1834  00091C  0100               	movlb	0	; () banked
  1835  00091E  90D8               	bcf	status,0,c
  1836  000920  339F               	rrcf	(??_sprintf+5)& (0+255),f,b
  1837  000922  339E               	rrcf	(??_sprintf+4)& (0+255),f,b
  1838  000924  339D               	rrcf	(??_sprintf+3)& (0+255),f,b
  1839  000926  339C               	rrcf	(??_sprintf+2)& (0+255),f,b
  1840  000928                     u3600:
  1841  000928  2EE8               	decfsz	wreg,f,c
  1842  00092A  D7F8               	goto	u3605
  1843  00092C  0100               	movlb	0	; () banked
  1844  00092E  519C               	movf	(??_sprintf+2)& (0+255),w,b
  1845  000930  0100               	movlb	0	; () banked
  1846  000932  259A               	addwf	??_sprintf& (0+255),w,b
  1847  000934  0100               	movlb	0	; () banked
  1848  000936  6FAE               	movwf	sprintf@exp& (0+255),b
  1849  000938  0E00               	movlw	0
  1850  00093A  0100               	movlb	0	; () banked
  1851  00093C  219B               	addwfc	(??_sprintf+1)& (0+255),w,b
  1852  00093E  0100               	movlb	0	; () banked
  1853  000940  6FAF               	movwf	(sprintf@exp+1)& (0+255),b
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;doprnt.c: 838: exp--;
  1857  000942  0100               	movlb	0	; () banked
  1858  000944  07AE               	decf	sprintf@exp& (0+255),f,b
  1859  000946  A0D8               	btfss	status,0,c
  1860  000948  07AF               	decf	(sprintf@exp+1)& (0+255),f,b
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;doprnt.c: 839: exp *= 3;
  1864  00094A  C0AE  F033         	movff	sprintf@exp,___wmul@multiplier
  1865  00094E  C0AF  F034         	movff	sprintf@exp+1,___wmul@multiplier+1
  1866  000952  0E00               	movlw	0
  1867  000954  6E36               	movwf	___wmul@multiplicand+1,c
  1868  000956  0E03               	movlw	3
  1869  000958  6E35               	movwf	___wmul@multiplicand,c
  1870  00095A  EC4B  F013         	call	___wmul	;wreg free
  1871  00095E  C033  F0AE         	movff	?___wmul,sprintf@exp
  1872  000962  C034  F0AF         	movff	?___wmul+1,sprintf@exp+1
  1873                           
  1874                           ;doprnt.c: 840: exp /= 10;
  1875  000966  C0AE  F02B         	movff	sprintf@exp,___awdiv@dividend
  1876  00096A  C0AF  F02C         	movff	sprintf@exp+1,___awdiv@dividend+1
  1877  00096E  0E00               	movlw	0
  1878  000970  6E2E               	movwf	___awdiv@divisor+1,c
  1879  000972  0E0A               	movlw	10
  1880  000974  6E2D               	movwf	___awdiv@divisor,c
  1881  000976  ECA6  F011         	call	___awdiv	;wreg free
  1882  00097A  C02B  F0AE         	movff	?___awdiv,sprintf@exp
  1883  00097E  C02C  F0AF         	movff	?___awdiv+1,sprintf@exp+1
  1884                           
  1885                           ;doprnt.c: 841: if(exp < 0)
  1886  000982  0100               	movlb	0	; () banked
  1887  000984  AFAF               	btfss	(sprintf@exp+1)& (0+255),7,b
  1888  000986  D004               	goto	l3113
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;doprnt.c: 842: exp--;
  1892  000988  0100               	movlb	0	; () banked
  1893  00098A  07AE               	decf	sprintf@exp& (0+255),f,b
  1894  00098C  A0D8               	btfss	status,0,c
  1895  00098E  07AF               	decf	(sprintf@exp+1)& (0+255),f,b
  1896  000990                     l3113:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1900  000990  0100               	movlb	0	; () banked
  1901  000992  51AE               	movf	sprintf@exp& (0+255),w,b
  1902  000994  0800               	sublw	0
  1903  000996  EC7B  F009         	call	_scale
  1904  00099A  C048  F0AA         	movff	?_scale,sprintf@tmpval
  1905  00099E  C049  F0AB         	movff	?_scale+1,sprintf@tmpval+1
  1906  0009A2  C04A  F0AC         	movff	?_scale+2,sprintf@tmpval+2
  1907                           
  1908                           ;doprnt.c: 847: tmpval.integ *= fval;
  1909  0009A6  C0AA  F039         	movff	sprintf@tmpval,___ftmul@f1
  1910  0009AA  C0AB  F03A         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1911  0009AE  C0AC  F03B         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1912  0009B2  C0B4  F03C         	movff	sprintf@fval,___ftmul@f2
  1913  0009B6  C0B5  F03D         	movff	sprintf@fval+1,___ftmul@f2+1
  1914  0009BA  C0B6  F03E         	movff	sprintf@fval+2,___ftmul@f2+2
  1915  0009BE  EC43  F010         	call	___ftmul	;wreg free
  1916  0009C2  C039  F0AA         	movff	?___ftmul,sprintf@tmpval
  1917  0009C6  C03A  F0AB         	movff	?___ftmul+1,sprintf@tmpval+1
  1918  0009CA  C03B  F0AC         	movff	?___ftmul+2,sprintf@tmpval+2
  1919                           
  1920                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1921  0009CE  C0AA  F025         	movff	sprintf@tmpval,___ftge@ff1
  1922  0009D2  C0AB  F026         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1923  0009D6  C0AC  F027         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1924  0009DA  0E00               	movlw	0
  1925  0009DC  6E28               	movwf	___ftge@ff2,c
  1926  0009DE  0E80               	movlw	128
  1927  0009E0  6E29               	movwf	___ftge@ff2+1,c
  1928  0009E2  0E3F               	movlw	63
  1929  0009E4  6E2A               	movwf	___ftge@ff2+2,c
  1930  0009E6  EC5E  F011         	call	___ftge	;wreg free
  1931  0009EA  B0D8               	btfsc	status,0,c
  1932  0009EC  D005               	goto	l3121
  1933                           
  1934                           ;doprnt.c: 849: exp--;
  1935  0009EE  0100               	movlb	0	; () banked
  1936  0009F0  07AE               	decf	sprintf@exp& (0+255),f,b
  1937  0009F2  A0D8               	btfss	status,0,c
  1938  0009F4  07AF               	decf	(sprintf@exp+1)& (0+255),f,b
  1939  0009F6  D013               	goto	l3125
  1940  0009F8                     l3121:
  1941                           
  1942                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1943  0009F8  C0AA  F025         	movff	sprintf@tmpval,___ftge@ff1
  1944  0009FC  C0AB  F026         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1945  000A00  C0AC  F027         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1946  000A04  0E00               	movlw	0
  1947  000A06  6E28               	movwf	___ftge@ff2,c
  1948  000A08  0E20               	movlw	32
  1949  000A0A  6E29               	movwf	___ftge@ff2+1,c
  1950  000A0C  0E41               	movlw	65
  1951  000A0E  6E2A               	movwf	___ftge@ff2+2,c
  1952  000A10  EC5E  F011         	call	___ftge	;wreg free
  1953  000A14  A0D8               	btfss	status,0,c
  1954  000A16  D003               	goto	l3125
  1955                           
  1956                           ;doprnt.c: 851: exp++;
  1957  000A18  0100               	movlb	0	; () banked
  1958  000A1A  4BAE               	infsnz	sprintf@exp& (0+255),f,b
  1959  000A1C  2BAF               	incf	(sprintf@exp+1)& (0+255),f,b
  1960  000A1E                     l3125:
  1961                           
  1962                           ;doprnt.c: 852: }
  1963                           ;doprnt.c: 1112: if(prec <= 12)
  1964  000A1E  0100               	movlb	0	; () banked
  1965  000A20  BFB8               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1966  000A22  D008               	goto	l3127
  1967  000A24  0100               	movlb	0	; () banked
  1968  000A26  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  1969  000A28  E11D               	bnz	l3129
  1970  000A2A  0E0D               	movlw	13
  1971  000A2C  0100               	movlb	0	; () banked
  1972  000A2E  5DB7               	subwf	sprintf@prec& (0+255),w,b
  1973  000A30  B0D8               	btfsc	status,0,c
  1974  000A32  D018               	goto	l3129
  1975  000A34                     l3127:
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;doprnt.c: 1113: fval += fround(prec);
  1979  000A34  C0B4  F080         	movff	sprintf@fval,___ftadd@f1
  1980  000A38  C0B5  F081         	movff	sprintf@fval+1,___ftadd@f1+1
  1981  000A3C  C0B6  F082         	movff	sprintf@fval+2,___ftadd@f1+2
  1982  000A40  0100               	movlb	0	; () banked
  1983  000A42  51B7               	movf	sprintf@prec& (0+255),w,b
  1984  000A44  ECA7  F00C         	call	_fround
  1985  000A48  C048  F083         	movff	?_fround,___ftadd@f2
  1986  000A4C  C049  F084         	movff	?_fround+1,___ftadd@f2+1
  1987  000A50  C04A  F085         	movff	?_fround+2,___ftadd@f2+2
  1988  000A54  EC73  F00B         	call	___ftadd	;wreg free
  1989  000A58  C080  F0B4         	movff	?___ftadd,sprintf@fval
  1990  000A5C  C081  F0B5         	movff	?___ftadd+1,sprintf@fval+1
  1991  000A60  C082  F0B6         	movff	?___ftadd+2,sprintf@fval+2
  1992  000A64                     l3129:
  1993                           
  1994                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1995  000A64  0100               	movlb	0	; () banked
  1996  000A66  BFAF               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1997  000A68  D008               	goto	l3131
  1998  000A6A  0100               	movlb	0	; () banked
  1999  000A6C  51AF               	movf	(sprintf@exp+1)& (0+255),w,b
  2000  000A6E  E126               	bnz	l3137
  2001  000A70  0E0A               	movlw	10
  2002  000A72  0100               	movlb	0	; () banked
  2003  000A74  5DAE               	subwf	sprintf@exp& (0+255),w,b
  2004  000A76  B0D8               	btfsc	status,0,c
  2005  000A78  D021               	goto	l3137
  2006  000A7A                     l3131:
  2007                           
  2008                           ; BSR set to: 0
  2009  000A7A  0100               	movlb	0	; () banked
  2010  000A7C  51B4               	movf	sprintf@fval& (0+255),w,b
  2011  000A7E  0100               	movlb	0	; () banked
  2012  000A80  11B5               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2013  000A82  0100               	movlb	0	; () banked
  2014  000A84  11B6               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2015  000A86  B4D8               	btfsc	status,2,c
  2016  000A88  D05B               	goto	l3151
  2017                           
  2018                           ; BSR set to: 0
  2019  000A8A  C0B4  F04F         	movff	sprintf@fval,___fttol@f1
  2020  000A8E  C0B5  F050         	movff	sprintf@fval+1,___fttol@f1+1
  2021  000A92  C0B6  F051         	movff	sprintf@fval+2,___fttol@f1+2
  2022  000A96  EC18  F00F         	call	___fttol	;wreg free
  2023  000A9A  504F               	movf	?___fttol,w,c
  2024  000A9C  1050               	iorwf	?___fttol+1,w,c
  2025  000A9E  1051               	iorwf	?___fttol+2,w,c
  2026  000AA0  1052               	iorwf	?___fttol+3,w,c
  2027  000AA2  A4D8               	btfss	status,2,c
  2028  000AA4  D04D               	goto	l3151
  2029  000AA6  0100               	movlb	0	; () banked
  2030  000AA8  BFAF               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2031  000AAA  D04A               	goto	l3151
  2032  000AAC  0100               	movlb	0	; () banked
  2033  000AAE  51AF               	movf	(sprintf@exp+1)& (0+255),w,b
  2034  000AB0  E105               	bnz	l3137
  2035  000AB2  0E02               	movlw	2
  2036  000AB4  0100               	movlb	0	; () banked
  2037  000AB6  5DAE               	subwf	sprintf@exp& (0+255),w,b
  2038  000AB8  A0D8               	btfss	status,0,c
  2039  000ABA  D042               	goto	l3151
  2040  000ABC                     l3137:
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2044  000ABC  C0AA  F025         	movff	sprintf@tmpval,___ftge@ff1
  2045  000AC0  C0AB  F026         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2046  000AC4  C0AC  F027         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2047  000AC8  0E70               	movlw	112
  2048  000ACA  6E28               	movwf	___ftge@ff2,c
  2049  000ACC  0E89               	movlw	137
  2050  000ACE  6E29               	movwf	___ftge@ff2+1,c
  2051  000AD0  0E40               	movlw	64
  2052  000AD2  6E2A               	movwf	___ftge@ff2+2,c
  2053  000AD4  EC5E  F011         	call	___ftge	;wreg free
  2054  000AD8  B0D8               	btfsc	status,0,c
  2055  000ADA  D003               	goto	l3141
  2056                           
  2057                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2058  000ADC  0100               	movlb	0	; () banked
  2059  000ADE  0EF7               	movlw	247
  2060  000AE0  D002               	goto	L1
  2061  000AE2                     l3141:
  2062                           
  2063                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2064  000AE2  0100               	movlb	0	; () banked
  2065  000AE4  0EF8               	movlw	248
  2066  000AE6                     L1:
  2067  000AE6  27AE               	addwf	sprintf@exp& (0+255),f,b
  2068  000AE8  0EFF               	movlw	255
  2069  000AEA  23AF               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;doprnt.c: 1124: }
  2073                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2074                           
  2075                           ; BSR set to: 0
  2076  000AEC  0100               	movlb	0	; () banked
  2077  000AEE  51AE               	movf	sprintf@exp& (0+255),w,b
  2078  000AF0  EC7B  F009         	call	_scale
  2079  000AF4  C048  F0AA         	movff	?_scale,sprintf@tmpval
  2080  000AF8  C049  F0AB         	movff	?_scale+1,sprintf@tmpval+1
  2081  000AFC  C04A  F0AC         	movff	?_scale+2,sprintf@tmpval+2
  2082                           
  2083                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2084  000B00  C0B4  F025         	movff	sprintf@fval,__tdiv_to_l_@f1
  2085  000B04  C0B5  F026         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2086  000B08  C0B6  F027         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2087  000B0C  C0AA  F028         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2088  000B10  C0AB  F029         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2089  000B14  C0AC  F02A         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2090  000B18  EC7F  F00E         	call	__tdiv_to_l_	;wreg free
  2091  000B1C  C025  F0A6         	movff	?__tdiv_to_l_,sprintf@val
  2092  000B20  C026  F0A7         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2093  000B24  C027  F0A8         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2094  000B28  C028  F0A9         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2095                           
  2096                           ;doprnt.c: 1129: fval = 0.0;
  2097  000B2C  0E00               	movlw	0
  2098  000B2E  0100               	movlb	0	; () banked
  2099  000B30  6FB4               	movwf	sprintf@fval& (0+255),b
  2100  000B32  0E00               	movlw	0
  2101  000B34  0100               	movlb	0	; () banked
  2102  000B36  6FB5               	movwf	(sprintf@fval+1)& (0+255),b
  2103  000B38  0E00               	movlw	0
  2104  000B3A  0100               	movlb	0	; () banked
  2105  000B3C  6FB6               	movwf	(sprintf@fval+2)& (0+255),b
  2106                           
  2107                           ;doprnt.c: 1130: } else {
  2108  000B3E  D033               	goto	l3155
  2109  000B40                     l3151:
  2110                           
  2111                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2112  000B40  C0B4  F04F         	movff	sprintf@fval,___fttol@f1
  2113  000B44  C0B5  F050         	movff	sprintf@fval+1,___fttol@f1+1
  2114  000B48  C0B6  F051         	movff	sprintf@fval+2,___fttol@f1+2
  2115  000B4C  EC18  F00F         	call	___fttol	;wreg free
  2116  000B50  C04F  F0A6         	movff	?___fttol,sprintf@val
  2117  000B54  C050  F0A7         	movff	?___fttol+1,sprintf@val+1
  2118  000B58  C051  F0A8         	movff	?___fttol+2,sprintf@val+2
  2119  000B5C  C052  F0A9         	movff	?___fttol+3,sprintf@val+3
  2120                           
  2121                           ;doprnt.c: 1132: fval -= (double)val;
  2122  000B60  C0B4  F08C         	movff	sprintf@fval,___ftsub@f1
  2123  000B64  C0B5  F08D         	movff	sprintf@fval+1,___ftsub@f1+1
  2124  000B68  C0B6  F08E         	movff	sprintf@fval+2,___ftsub@f1+2
  2125  000B6C  C0A6  F02D         	movff	sprintf@val,___lltoft@c
  2126  000B70  C0A7  F02E         	movff	sprintf@val+1,___lltoft@c+1
  2127  000B74  C0A8  F02F         	movff	sprintf@val+2,___lltoft@c+2
  2128  000B78  C0A9  F030         	movff	sprintf@val+3,___lltoft@c+3
  2129  000B7C  EC94  F012         	call	___lltoft	;wreg free
  2130  000B80  C02D  F08F         	movff	?___lltoft,___ftsub@f2
  2131  000B84  C02E  F090         	movff	?___lltoft+1,___ftsub@f2+1
  2132  000B88  C02F  F091         	movff	?___lltoft+2,___ftsub@f2+2
  2133  000B8C  ECC2  F012         	call	___ftsub	;wreg free
  2134  000B90  C08C  F0B4         	movff	?___ftsub,sprintf@fval
  2135  000B94  C08D  F0B5         	movff	?___ftsub+1,sprintf@fval+1
  2136  000B98  C08E  F0B6         	movff	?___ftsub+2,sprintf@fval+2
  2137                           
  2138                           ;doprnt.c: 1133: exp = 0;
  2139  000B9C  0E00               	movlw	0
  2140  000B9E  0100               	movlb	0	; () banked
  2141  000BA0  6FAF               	movwf	(sprintf@exp+1)& (0+255),b
  2142  000BA2  0E00               	movlw	0
  2143  000BA4  6FAE               	movwf	sprintf@exp& (0+255),b
  2144  000BA6                     l3155:
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;doprnt.c: 1134: }
  2148                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2149  000BA6  0E01               	movlw	1
  2150  000BA8  0100               	movlb	0	; () banked
  2151  000BAA  6FB9               	movwf	sprintf@c& (0+255),b
  2152  000BAC                     l3157:
  2153                           
  2154                           ; BSR set to: 0
  2155  000BAC  0E0A               	movlw	10
  2156  000BAE  0100               	movlb	0	; () banked
  2157  000BB0  19B9               	xorwf	sprintf@c& (0+255),w,b
  2158  000BB2  B4D8               	btfsc	status,2,c
  2159  000BB4  D01E               	goto	l3169
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;doprnt.c: 1137: if(val < dpowers[c])
  2163                           
  2164                           ; BSR set to: 0
  2165                           
  2166                           ; BSR set to: 0
  2167  000BB6  0100               	movlb	0	; () banked
  2168  000BB8  51B9               	movf	sprintf@c& (0+255),w,b
  2169  000BBA  0D04               	mullw	4
  2170  000BBC  0E01               	movlw	low _dpowers
  2171  000BBE  24F3               	addwf	prodl,w,c
  2172  000BC0  6EF6               	movwf	tblptrl,c
  2173  000BC2  0E06               	movlw	high _dpowers
  2174  000BC4  20F4               	addwfc	prodh,w,c
  2175  000BC6  6EF7               	movwf	tblptrh,c
  2176  000BC8                     	if	0	;There are less than 3 active tblptr bytes
  2177  000BC8                     	endif
  2178  000BC8  0009               	tblrd		*+
  2179  000BCA  50F5               	movf	tablat,w,c
  2180  000BCC  0100               	movlb	0	; () banked
  2181  000BCE  5DA6               	subwf	sprintf@val& (0+255),w,b
  2182  000BD0  0009               	tblrd		*+
  2183  000BD2  50F5               	movf	tablat,w,c
  2184  000BD4  0100               	movlb	0	; () banked
  2185  000BD6  59A7               	subwfb	(sprintf@val+1)& (0+255),w,b
  2186  000BD8  0009               	tblrd		*+
  2187  000BDA  50F5               	movf	tablat,w,c
  2188  000BDC  0100               	movlb	0	; () banked
  2189  000BDE  59A8               	subwfb	(sprintf@val+2)& (0+255),w,b
  2190  000BE0  0009               	tblrd		*+
  2191  000BE2  50F5               	movf	tablat,w,c
  2192  000BE4  0100               	movlb	0	; () banked
  2193  000BE6  59A9               	subwfb	(sprintf@val+3)& (0+255),w,b
  2194  000BE8  A0D8               	btfss	status,0,c
  2195  000BEA  D003               	goto	l3169
  2196                           
  2197                           ; BSR set to: 0
  2198                           
  2199                           ; BSR set to: 0
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;doprnt.c: 1138: break;
  2203  000BEC  0100               	movlb	0	; () banked
  2204  000BEE  2BB9               	incf	sprintf@c& (0+255),f,b
  2205  000BF0  D7DD               	goto	l3157
  2206  000BF2                     l3169:
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;doprnt.c: 1142: width -= prec + c + exp;
  2210  000BF2  C0B9  F09A         	movff	sprintf@c,??_sprintf
  2211  000BF6  0100               	movlb	0	; () banked
  2212  000BF8  6B9B               	clrf	(??_sprintf+1)& (0+255),b
  2213  000BFA  BF9A               	btfsc	??_sprintf& (0+255),7,b
  2214  000BFC  079B               	decf	(??_sprintf+1)& (0+255),f,b
  2215  000BFE  0100               	movlb	0	; () banked
  2216  000C00  51B7               	movf	sprintf@prec& (0+255),w,b
  2217  000C02  0100               	movlb	0	; () banked
  2218  000C04  279A               	addwf	??_sprintf& (0+255),f,b
  2219  000C06  0100               	movlb	0	; () banked
  2220  000C08  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  2221  000C0A  0100               	movlb	0	; () banked
  2222  000C0C  239B               	addwfc	(??_sprintf+1)& (0+255),f,b
  2223  000C0E  0100               	movlb	0	; () banked
  2224  000C10  51AE               	movf	sprintf@exp& (0+255),w,b
  2225  000C12  0100               	movlb	0	; () banked
  2226  000C14  279A               	addwf	??_sprintf& (0+255),f,b
  2227  000C16  0100               	movlb	0	; () banked
  2228  000C18  51AF               	movf	(sprintf@exp+1)& (0+255),w,b
  2229  000C1A  0100               	movlb	0	; () banked
  2230  000C1C  239B               	addwfc	(??_sprintf+1)& (0+255),f,b
  2231  000C1E  0100               	movlb	0	; () banked
  2232  000C20  519A               	movf	??_sprintf& (0+255),w,b
  2233  000C22  0100               	movlb	0	; () banked
  2234  000C24  5FB2               	subwf	sprintf@width& (0+255),f,b
  2235  000C26  0100               	movlb	0	; () banked
  2236  000C28  519B               	movf	(??_sprintf+1)& (0+255),w,b
  2237  000C2A  0100               	movlb	0	; () banked
  2238  000C2C  5BB3               	subwfb	(sprintf@width+1)& (0+255),f,b
  2239                           
  2240                           ;doprnt.c: 1143: if(
  2241                           ;doprnt.c: 1147: prec)
  2242  000C2E  0100               	movlb	0	; () banked
  2243  000C30  51B7               	movf	sprintf@prec& (0+255),w,b
  2244  000C32  0100               	movlb	0	; () banked
  2245  000C34  11B8               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2246  000C36  B4D8               	btfsc	status,2,c
  2247  000C38  D004               	goto	l3173
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;doprnt.c: 1148: width--;
  2251  000C3A  0100               	movlb	0	; () banked
  2252  000C3C  07B2               	decf	sprintf@width& (0+255),f,b
  2253  000C3E  A0D8               	btfss	status,0,c
  2254  000C40  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  2255  000C42                     l3173:
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;doprnt.c: 1149: if(flag & 0x03)
  2259  000C42  0E03               	movlw	3
  2260  000C44  0100               	movlb	0	; () banked
  2261  000C46  15B0               	andwf	sprintf@flag& (0+255),w,b
  2262  000C48  0100               	movlb	0	; () banked
  2263  000C4A  6F9A               	movwf	??_sprintf& (0+255),b
  2264  000C4C  0E00               	movlw	0
  2265  000C4E  0100               	movlb	0	; () banked
  2266  000C50  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  2267  000C52  0100               	movlb	0	; () banked
  2268  000C54  6F9B               	movwf	(??_sprintf+1)& (0+255),b
  2269  000C56  0100               	movlb	0	; () banked
  2270  000C58  519A               	movf	??_sprintf& (0+255),w,b
  2271  000C5A  0100               	movlb	0	; () banked
  2272  000C5C  119B               	iorwf	(??_sprintf+1)& (0+255),w,b
  2273  000C5E  B4D8               	btfsc	status,2,c
  2274  000C60  D004               	goto	l3177
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;doprnt.c: 1150: width--;
  2278  000C62  0100               	movlb	0	; () banked
  2279  000C64  07B2               	decf	sprintf@width& (0+255),f,b
  2280  000C66  A0D8               	btfss	status,0,c
  2281  000C68  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  2282  000C6A                     l3177:
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;doprnt.c: 1153: if(flag & 0x04) {
  2286  000C6A  0100               	movlb	0	; () banked
  2287  000C6C  A5B0               	btfss	sprintf@flag& (0+255),2,b
  2288  000C6E  D03F               	goto	l3199
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;doprnt.c: 1157: if(flag & 0x03)
  2292  000C70  0E03               	movlw	3
  2293  000C72  0100               	movlb	0	; () banked
  2294  000C74  15B0               	andwf	sprintf@flag& (0+255),w,b
  2295  000C76  0100               	movlb	0	; () banked
  2296  000C78  6F9A               	movwf	??_sprintf& (0+255),b
  2297  000C7A  0E00               	movlw	0
  2298  000C7C  0100               	movlb	0	; () banked
  2299  000C7E  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  2300  000C80  0100               	movlb	0	; () banked
  2301  000C82  6F9B               	movwf	(??_sprintf+1)& (0+255),b
  2302  000C84  0100               	movlb	0	; () banked
  2303  000C86  519A               	movf	??_sprintf& (0+255),w,b
  2304  000C88  0100               	movlb	0	; () banked
  2305  000C8A  119B               	iorwf	(??_sprintf+1)& (0+255),w,b
  2306  000C8C  B4D8               	btfsc	status,2,c
  2307  000C8E  D017               	goto	l3191
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  2311  000C90  C092  FFD9         	movff	sprintf@sp,fsr2l
  2312  000C94  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  2313  000C98  0E2D               	movlw	45
  2314  000C9A  6EDF               	movwf	indf2,c
  2315                           
  2316                           ; BSR set to: 0
  2317  000C9C  0100               	movlb	0	; () banked
  2318  000C9E  4B92               	infsnz	sprintf@sp& (0+255),f,b
  2319  000CA0  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;doprnt.c: 1168: while(width > 0) {
  2323  000CA2  D00D               	goto	l3191
  2324  000CA4                     l3185:
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  2328  000CA4  C092  FFD9         	movff	sprintf@sp,fsr2l
  2329  000CA8  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  2330  000CAC  0E30               	movlw	48
  2331  000CAE  6EDF               	movwf	indf2,c
  2332                           
  2333                           ; BSR set to: 0
  2334  000CB0  0100               	movlb	0	; () banked
  2335  000CB2  4B92               	infsnz	sprintf@sp& (0+255),f,b
  2336  000CB4  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;doprnt.c: 1170: width--;
  2340  000CB6  0100               	movlb	0	; () banked
  2341  000CB8  07B2               	decf	sprintf@width& (0+255),f,b
  2342  000CBA  A0D8               	btfss	status,0,c
  2343  000CBC  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  2344  000CBE                     l3191:
  2345                           
  2346                           ; BSR set to: 0
  2347  000CBE  0100               	movlb	0	; () banked
  2348  000CC0  BFB3               	btfsc	(sprintf@width+1)& (0+255),7,b
  2349  000CC2  D083               	goto	l3215
  2350  000CC4  0100               	movlb	0	; () banked
  2351  000CC6  51B3               	movf	(sprintf@width+1)& (0+255),w,b
  2352  000CC8  E1ED               	bnz	l3185
  2353  000CCA  0100               	movlb	0	; () banked
  2354  000CCC  05B2               	decf	sprintf@width& (0+255),w,b
  2355  000CCE  A0D8               	btfss	status,0,c
  2356  000CD0  D07C               	goto	l3215
  2357  000CD2  D7E8               	goto	l3185
  2358  000CD4                     l3193:
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2362  000CD4  C092  FFD9         	movff	sprintf@sp,fsr2l
  2363  000CD8  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  2364  000CDC  0E20               	movlw	32
  2365  000CDE  6EDF               	movwf	indf2,c
  2366                           
  2367                           ; BSR set to: 0
  2368  000CE0  0100               	movlb	0	; () banked
  2369  000CE2  4B92               	infsnz	sprintf@sp& (0+255),f,b
  2370  000CE4  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;doprnt.c: 1182: width--;
  2374  000CE6  0100               	movlb	0	; () banked
  2375  000CE8  07B2               	decf	sprintf@width& (0+255),f,b
  2376  000CEA  A0D8               	btfss	status,0,c
  2377  000CEC  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  2378  000CEE                     l3199:
  2379                           
  2380                           ; BSR set to: 0
  2381  000CEE  0100               	movlb	0	; () banked
  2382  000CF0  BFB3               	btfsc	(sprintf@width+1)& (0+255),7,b
  2383  000CF2  D007               	goto	l3201
  2384  000CF4  0100               	movlb	0	; () banked
  2385  000CF6  51B3               	movf	(sprintf@width+1)& (0+255),w,b
  2386  000CF8  E1ED               	bnz	l3193
  2387  000CFA  0100               	movlb	0	; () banked
  2388  000CFC  05B2               	decf	sprintf@width& (0+255),w,b
  2389  000CFE  B0D8               	btfsc	status,0,c
  2390  000D00  D7E9               	goto	l3193
  2391  000D02                     l3201:
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;doprnt.c: 1183: }
  2395                           ;doprnt.c: 1188: if(flag & 0x03)
  2396  000D02  0E03               	movlw	3
  2397  000D04  0100               	movlb	0	; () banked
  2398  000D06  15B0               	andwf	sprintf@flag& (0+255),w,b
  2399  000D08  0100               	movlb	0	; () banked
  2400  000D0A  6F9A               	movwf	??_sprintf& (0+255),b
  2401  000D0C  0E00               	movlw	0
  2402  000D0E  0100               	movlb	0	; () banked
  2403  000D10  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  2404  000D12  0100               	movlb	0	; () banked
  2405  000D14  6F9B               	movwf	(??_sprintf+1)& (0+255),b
  2406  000D16  0100               	movlb	0	; () banked
  2407  000D18  519A               	movf	??_sprintf& (0+255),w,b
  2408  000D1A  0100               	movlb	0	; () banked
  2409  000D1C  119B               	iorwf	(??_sprintf+1)& (0+255),w,b
  2410  000D1E  B4D8               	btfsc	status,2,c
  2411  000D20  D054               	goto	l3215
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2415  000D22  C092  FFD9         	movff	sprintf@sp,fsr2l
  2416  000D26  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  2417  000D2A  0E2D               	movlw	45
  2418  000D2C  D04C               	goto	L2
  2419  000D2E                     l3205:
  2420                           
  2421                           ; BSR set to: 0
  2422  000D2E  0100               	movlb	0	; () banked
  2423  000D30  4B92               	infsnz	sprintf@sp& (0+255),f,b
  2424  000D32  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;doprnt.c: 1195: }
  2428                           ;doprnt.c: 1196: while(c--) {
  2429                           
  2430                           ; BSR set to: 0
  2431  000D34  D04A               	goto	l3215
  2432  000D36                     l3207:
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;doprnt.c: 1200: {
  2436                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2437  000D36  C0A6  F025         	movff	sprintf@val,___lldiv@dividend
  2438  000D3A  C0A7  F026         	movff	sprintf@val+1,___lldiv@dividend+1
  2439  000D3E  C0A8  F027         	movff	sprintf@val+2,___lldiv@dividend+2
  2440  000D42  C0A9  F028         	movff	sprintf@val+3,___lldiv@dividend+3
  2441  000D46  0100               	movlb	0	; () banked
  2442  000D48  51B9               	movf	sprintf@c& (0+255),w,b
  2443  000D4A  0D04               	mullw	4
  2444  000D4C  0E01               	movlw	low _dpowers
  2445  000D4E  24F3               	addwf	prodl,w,c
  2446  000D50  6EF6               	movwf	tblptrl,c
  2447  000D52  0E06               	movlw	high _dpowers
  2448  000D54  20F4               	addwfc	prodh,w,c
  2449  000D56  6EF7               	movwf	tblptrh,c
  2450  000D58                     	if	0	;There are less than 3 active tblptr bytes
  2451  000D58                     	endif
  2452  000D58  0009               	tblrd		*+
  2453  000D5A  CFF5 F029          	movff	tablat,___lldiv@divisor
  2454  000D5E  0009               	tblrd		*+
  2455  000D60  CFF5 F02A          	movff	tablat,___lldiv@divisor+1
  2456  000D64  0009               	tblrd		*+
  2457  000D66  CFF5 F02B          	movff	tablat,___lldiv@divisor+2
  2458  000D6A  000A               	tblrd		*-
  2459  000D6C  CFF5 F02C          	movff	tablat,___lldiv@divisor+3
  2460  000D70  ECE8  F011         	call	___lldiv	;wreg free
  2461  000D74  C025  F0AA         	movff	?___lldiv,sprintf@tmpval
  2462  000D78  C026  F0AB         	movff	?___lldiv+1,sprintf@tmpval+1
  2463  000D7C  C027  F0AC         	movff	?___lldiv+2,sprintf@tmpval+2
  2464  000D80  C028  F0AD         	movff	?___lldiv+3,sprintf@tmpval+3
  2465                           
  2466                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2467  000D84  C0AA  F025         	movff	sprintf@tmpval,___llmod@dividend
  2468  000D88  C0AB  F026         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2469  000D8C  C0AC  F027         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2470  000D90  C0AD  F028         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2471  000D94  0E0A               	movlw	10
  2472  000D96  6E29               	movwf	___llmod@divisor,c
  2473  000D98  0E00               	movlw	0
  2474  000D9A  6E2A               	movwf	___llmod@divisor+1,c
  2475  000D9C  0E00               	movlw	0
  2476  000D9E  6E2B               	movwf	___llmod@divisor+2,c
  2477  000DA0  0E00               	movlw	0
  2478  000DA2  6E2C               	movwf	___llmod@divisor+3,c
  2479  000DA4  EC61  F012         	call	___llmod	;wreg free
  2480  000DA8  C025  F0AA         	movff	?___llmod,sprintf@tmpval
  2481  000DAC  C026  F0AB         	movff	?___llmod+1,sprintf@tmpval+1
  2482  000DB0  C027  F0AC         	movff	?___llmod+2,sprintf@tmpval+2
  2483  000DB4  C028  F0AD         	movff	?___llmod+3,sprintf@tmpval+3
  2484                           
  2485                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2486  000DB8  0100               	movlb	0	; () banked
  2487  000DBA  51AA               	movf	sprintf@tmpval& (0+255),w,b
  2488  000DBC  0F30               	addlw	48
  2489  000DBE  C092  FFD9         	movff	sprintf@sp,fsr2l
  2490  000DC2  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  2491  000DC6                     L2:
  2492  000DC6  6EDF               	movwf	indf2,c
  2493  000DC8  D7B2               	goto	l3205
  2494  000DCA                     l3215:
  2495                           
  2496                           ; BSR set to: 0
  2497  000DCA  0100               	movlb	0	; () banked
  2498  000DCC  07B9               	decf	sprintf@c& (0+255),f,b
  2499  000DCE  0100               	movlb	0	; () banked
  2500  000DD0  29B9               	incf	sprintf@c& (0+255),w,b
  2501  000DD2  B4D8               	btfsc	status,2,c
  2502  000DD4  D00E               	goto	l3223
  2503  000DD6  D7AF               	goto	l3207
  2504  000DD8                     l3217:
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2508  000DD8  C092  FFD9         	movff	sprintf@sp,fsr2l
  2509  000DDC  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  2510  000DE0  0E30               	movlw	48
  2511  000DE2  6EDF               	movwf	indf2,c
  2512                           
  2513                           ; BSR set to: 0
  2514  000DE4  0100               	movlb	0	; () banked
  2515  000DE6  4B92               	infsnz	sprintf@sp& (0+255),f,b
  2516  000DE8  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;doprnt.c: 1209: exp--;
  2520  000DEA  0100               	movlb	0	; () banked
  2521  000DEC  07AE               	decf	sprintf@exp& (0+255),f,b
  2522  000DEE  A0D8               	btfss	status,0,c
  2523  000DF0  07AF               	decf	(sprintf@exp+1)& (0+255),f,b
  2524  000DF2                     l3223:
  2525                           
  2526                           ; BSR set to: 0
  2527  000DF2  0100               	movlb	0	; () banked
  2528  000DF4  BFAF               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2529  000DF6  D007               	goto	l3225
  2530  000DF8  0100               	movlb	0	; () banked
  2531  000DFA  51AF               	movf	(sprintf@exp+1)& (0+255),w,b
  2532  000DFC  E1ED               	bnz	l3217
  2533  000DFE  0100               	movlb	0	; () banked
  2534  000E00  05AE               	decf	sprintf@exp& (0+255),w,b
  2535  000E02  B0D8               	btfsc	status,0,c
  2536  000E04  D7E9               	goto	l3217
  2537  000E06                     l3225:
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;doprnt.c: 1210: }
  2541                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2542  000E06  0100               	movlb	0	; () banked
  2543  000E08  BFB8               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2544  000E0A  D00C               	goto	l212
  2545  000E0C  0100               	movlb	0	; () banked
  2546  000E0E  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  2547  000E10  E105               	bnz	u3820
  2548  000E12  0E09               	movlw	9
  2549  000E14  0100               	movlb	0	; () banked
  2550  000E16  5DB7               	subwf	sprintf@prec& (0+255),w,b
  2551  000E18  A0D8               	btfss	status,0,c
  2552  000E1A  D004               	goto	l212
  2553  000E1C                     u3820:
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2557  000E1C  0E08               	movlw	8
  2558  000E1E  0100               	movlb	0	; () banked
  2559  000E20  6FB9               	movwf	sprintf@c& (0+255),b
  2560  000E22  D002               	goto	l3229
  2561  000E24                     l212:
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;doprnt.c: 1213: else
  2565                           ;doprnt.c: 1214: c = prec;
  2566  000E24  C0B7  F0B9         	movff	sprintf@prec,sprintf@c
  2567  000E28                     l3229:
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;doprnt.c: 1215: prec -= c;
  2571  000E28  0100               	movlb	0	; () banked
  2572  000E2A  51B9               	movf	sprintf@c& (0+255),w,b
  2573  000E2C  0100               	movlb	0	; () banked
  2574  000E2E  5FB7               	subwf	sprintf@prec& (0+255),f,b
  2575  000E30  0E00               	movlw	0
  2576  000E32  0100               	movlb	0	; () banked
  2577  000E34  BFB9               	btfsc	sprintf@c& (0+255),7,b
  2578  000E36  0EFF               	movlw	255
  2579  000E38  0100               	movlb	0	; () banked
  2580  000E3A  5BB8               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;doprnt.c: 1219: if(c)
  2584  000E3C  0100               	movlb	0	; () banked
  2585  000E3E  51B9               	movf	sprintf@c& (0+255),w,b
  2586  000E40  0100               	movlb	0	; () banked
  2587  000E42  B4D8               	btfsc	status,2,c
  2588  000E44  D009               	goto	l3237
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2592  000E46  C092  FFD9         	movff	sprintf@sp,fsr2l
  2593  000E4A  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  2594  000E4E  0E2E               	movlw	46
  2595  000E50  6EDF               	movwf	indf2,c
  2596                           
  2597                           ; BSR set to: 0
  2598  000E52  0100               	movlb	0	; () banked
  2599  000E54  4B92               	infsnz	sprintf@sp& (0+255),f,b
  2600  000E56  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  2601  000E58                     l3237:
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2605  000E58  0100               	movlb	0	; () banked
  2606  000E5A  51B9               	movf	sprintf@c& (0+255),w,b
  2607  000E5C  EC7B  F009         	call	_scale
  2608  000E60  C048  F0A0         	movff	?_scale,_sprintf$1401
  2609  000E64  C049  F0A1         	movff	?_scale+1,_sprintf$1401+1
  2610  000E68  C04A  F0A2         	movff	?_scale+2,_sprintf$1401+2
  2611                           
  2612                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2613  000E6C  C0B4  F03C         	movff	sprintf@fval,___ftmul@f2
  2614  000E70  C0B5  F03D         	movff	sprintf@fval+1,___ftmul@f2+1
  2615  000E74  C0B6  F03E         	movff	sprintf@fval+2,___ftmul@f2+2
  2616  000E78  C0A0  F039         	movff	_sprintf$1401,___ftmul@f1
  2617  000E7C  C0A1  F03A         	movff	_sprintf$1401+1,___ftmul@f1+1
  2618  000E80  C0A2  F03B         	movff	_sprintf$1401+2,___ftmul@f1+2
  2619  000E84  EC43  F010         	call	___ftmul	;wreg free
  2620  000E88  C039  F04F         	movff	?___ftmul,___fttol@f1
  2621  000E8C  C03A  F050         	movff	?___ftmul+1,___fttol@f1+1
  2622  000E90  C03B  F051         	movff	?___ftmul+2,___fttol@f1+2
  2623  000E94  EC18  F00F         	call	___fttol	;wreg free
  2624  000E98  C04F  F0A6         	movff	?___fttol,sprintf@val
  2625  000E9C  C050  F0A7         	movff	?___fttol+1,sprintf@val+1
  2626  000EA0  C051  F0A8         	movff	?___fttol+2,sprintf@val+2
  2627  000EA4  C052  F0A9         	movff	?___fttol+3,sprintf@val+3
  2628                           
  2629                           ;doprnt.c: 1228: while(c--) {
  2630  000EA8  D073               	goto	l3251
  2631  000EAA                     l3241:
  2632                           
  2633                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2634  000EAA  C0A6  F025         	movff	sprintf@val,___lldiv@dividend
  2635  000EAE  C0A7  F026         	movff	sprintf@val+1,___lldiv@dividend+1
  2636  000EB2  C0A8  F027         	movff	sprintf@val+2,___lldiv@dividend+2
  2637  000EB6  C0A9  F028         	movff	sprintf@val+3,___lldiv@dividend+3
  2638  000EBA  0100               	movlb	0	; () banked
  2639  000EBC  51B9               	movf	sprintf@c& (0+255),w,b
  2640  000EBE  0D04               	mullw	4
  2641  000EC0  0E01               	movlw	low _dpowers
  2642  000EC2  24F3               	addwf	prodl,w,c
  2643  000EC4  6EF6               	movwf	tblptrl,c
  2644  000EC6  0E06               	movlw	high _dpowers
  2645  000EC8  20F4               	addwfc	prodh,w,c
  2646  000ECA  6EF7               	movwf	tblptrh,c
  2647  000ECC                     	if	0	;There are less than 3 active tblptr bytes
  2648  000ECC                     	endif
  2649  000ECC  0009               	tblrd		*+
  2650  000ECE  CFF5 F029          	movff	tablat,___lldiv@divisor
  2651  000ED2  0009               	tblrd		*+
  2652  000ED4  CFF5 F02A          	movff	tablat,___lldiv@divisor+1
  2653  000ED8  0009               	tblrd		*+
  2654  000EDA  CFF5 F02B          	movff	tablat,___lldiv@divisor+2
  2655  000EDE  000A               	tblrd		*-
  2656  000EE0  CFF5 F02C          	movff	tablat,___lldiv@divisor+3
  2657  000EE4  ECE8  F011         	call	___lldiv	;wreg free
  2658  000EE8  C025  F0AA         	movff	?___lldiv,sprintf@tmpval
  2659  000EEC  C026  F0AB         	movff	?___lldiv+1,sprintf@tmpval+1
  2660  000EF0  C027  F0AC         	movff	?___lldiv+2,sprintf@tmpval+2
  2661  000EF4  C028  F0AD         	movff	?___lldiv+3,sprintf@tmpval+3
  2662                           
  2663                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2664  000EF8  C0AA  F025         	movff	sprintf@tmpval,___llmod@dividend
  2665  000EFC  C0AB  F026         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2666  000F00  C0AC  F027         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2667  000F04  C0AD  F028         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2668  000F08  0E0A               	movlw	10
  2669  000F0A  6E29               	movwf	___llmod@divisor,c
  2670  000F0C  0E00               	movlw	0
  2671  000F0E  6E2A               	movwf	___llmod@divisor+1,c
  2672  000F10  0E00               	movlw	0
  2673  000F12  6E2B               	movwf	___llmod@divisor+2,c
  2674  000F14  0E00               	movlw	0
  2675  000F16  6E2C               	movwf	___llmod@divisor+3,c
  2676  000F18  EC61  F012         	call	___llmod	;wreg free
  2677  000F1C  C025  F0AA         	movff	?___llmod,sprintf@tmpval
  2678  000F20  C026  F0AB         	movff	?___llmod+1,sprintf@tmpval+1
  2679  000F24  C027  F0AC         	movff	?___llmod+2,sprintf@tmpval+2
  2680  000F28  C028  F0AD         	movff	?___llmod+3,sprintf@tmpval+3
  2681                           
  2682                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2683  000F2C  0100               	movlb	0	; () banked
  2684  000F2E  51AA               	movf	sprintf@tmpval& (0+255),w,b
  2685  000F30  0F30               	addlw	48
  2686  000F32  C092  FFD9         	movff	sprintf@sp,fsr2l
  2687  000F36  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  2688  000F3A  6EDF               	movwf	indf2,c
  2689                           
  2690                           ; BSR set to: 0
  2691  000F3C  0100               	movlb	0	; () banked
  2692  000F3E  4B92               	infsnz	sprintf@sp& (0+255),f,b
  2693  000F40  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;doprnt.c: 1232: val %= dpowers[c];
  2697  000F42  C0A6  F025         	movff	sprintf@val,___llmod@dividend
  2698  000F46  C0A7  F026         	movff	sprintf@val+1,___llmod@dividend+1
  2699  000F4A  C0A8  F027         	movff	sprintf@val+2,___llmod@dividend+2
  2700  000F4E  C0A9  F028         	movff	sprintf@val+3,___llmod@dividend+3
  2701  000F52  0100               	movlb	0	; () banked
  2702  000F54  51B9               	movf	sprintf@c& (0+255),w,b
  2703  000F56  0D04               	mullw	4
  2704  000F58  0E01               	movlw	low _dpowers
  2705  000F5A  24F3               	addwf	prodl,w,c
  2706  000F5C  6EF6               	movwf	tblptrl,c
  2707  000F5E  0E06               	movlw	high _dpowers
  2708  000F60  20F4               	addwfc	prodh,w,c
  2709  000F62  6EF7               	movwf	tblptrh,c
  2710  000F64                     	if	0	;There are less than 3 active tblptr bytes
  2711  000F64                     	endif
  2712  000F64  0009               	tblrd		*+
  2713  000F66  CFF5 F029          	movff	tablat,___llmod@divisor
  2714  000F6A  0009               	tblrd		*+
  2715  000F6C  CFF5 F02A          	movff	tablat,___llmod@divisor+1
  2716  000F70  0009               	tblrd		*+
  2717  000F72  CFF5 F02B          	movff	tablat,___llmod@divisor+2
  2718  000F76  000A               	tblrd		*-
  2719  000F78  CFF5 F02C          	movff	tablat,___llmod@divisor+3
  2720  000F7C  EC61  F012         	call	___llmod	;wreg free
  2721  000F80  C025  F0A6         	movff	?___llmod,sprintf@val
  2722  000F84  C026  F0A7         	movff	?___llmod+1,sprintf@val+1
  2723  000F88  C027  F0A8         	movff	?___llmod+2,sprintf@val+2
  2724  000F8C  C028  F0A9         	movff	?___llmod+3,sprintf@val+3
  2725  000F90                     l3251:
  2726  000F90  0100               	movlb	0	; () banked
  2727  000F92  07B9               	decf	sprintf@c& (0+255),f,b
  2728  000F94  0100               	movlb	0	; () banked
  2729  000F96  29B9               	incf	sprintf@c& (0+255),w,b
  2730  000F98  B4D8               	btfsc	status,2,c
  2731  000F9A  D00E               	goto	l3259
  2732  000F9C  D786               	goto	l3241
  2733  000F9E                     l3253:
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2737  000F9E  C092  FFD9         	movff	sprintf@sp,fsr2l
  2738  000FA2  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  2739  000FA6  0E30               	movlw	48
  2740  000FA8  6EDF               	movwf	indf2,c
  2741                           
  2742                           ; BSR set to: 0
  2743  000FAA  0100               	movlb	0	; () banked
  2744  000FAC  4B92               	infsnz	sprintf@sp& (0+255),f,b
  2745  000FAE  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;doprnt.c: 1237: prec--;
  2749  000FB0  0100               	movlb	0	; () banked
  2750  000FB2  07B7               	decf	sprintf@prec& (0+255),f,b
  2751  000FB4  A0D8               	btfss	status,0,c
  2752  000FB6  07B8               	decf	(sprintf@prec+1)& (0+255),f,b
  2753  000FB8                     l3259:
  2754                           
  2755                           ; BSR set to: 0
  2756  000FB8  0100               	movlb	0	; () banked
  2757  000FBA  51B7               	movf	sprintf@prec& (0+255),w,b
  2758  000FBC  0100               	movlb	0	; () banked
  2759  000FBE  11B8               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2760  000FC0  B4D8               	btfsc	status,2,c
  2761  000FC2  D183               	goto	l3353
  2762  000FC4  D7EC               	goto	l3253
  2763  000FC6                     l3261:
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;doprnt.c: 1246: }
  2767                           ;doprnt.c: 1273: {
  2768                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2769  000FC6  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  2770  000FCA  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  2771  000FCE  CFDE F09A          	movff	postinc2,??_sprintf
  2772  000FD2  CFDD F09B          	movff	postdec2,??_sprintf+1
  2773  000FD6  C09A  F0A6         	movff	??_sprintf,sprintf@val
  2774  000FDA  C09B  F0A7         	movff	??_sprintf+1,sprintf@val+1
  2775  000FDE  0100               	movlb	0	; () banked
  2776  000FE0  6BA8               	clrf	(sprintf@val+2)& (0+255),b
  2777  000FE2  6BA9               	clrf	(sprintf@val+3)& (0+255),b
  2778                           
  2779                           ; BSR set to: 0
  2780  000FE4  0E02               	movlw	2
  2781  000FE6  0100               	movlb	0	; () banked
  2782  000FE8  27A4               	addwf	sprintf@ap& (0+255),f,b
  2783  000FEA  0E00               	movlw	0
  2784  000FEC  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;doprnt.c: 1287: }
  2788                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2789  000FEE  0100               	movlb	0	; () banked
  2790  000FF0  51B7               	movf	sprintf@prec& (0+255),w,b
  2791  000FF2  0100               	movlb	0	; () banked
  2792  000FF4  11B8               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2793  000FF6  A4D8               	btfss	status,2,c
  2794  000FF8  D00D               	goto	l3271
  2795                           
  2796                           ; BSR set to: 0
  2797  000FFA  0100               	movlb	0	; () banked
  2798  000FFC  51A6               	movf	sprintf@val& (0+255),w,b
  2799  000FFE  0100               	movlb	0	; () banked
  2800  001000  11A7               	iorwf	(sprintf@val+1)& (0+255),w,b
  2801  001002  0100               	movlb	0	; () banked
  2802  001004  11A8               	iorwf	(sprintf@val+2)& (0+255),w,b
  2803  001006  0100               	movlb	0	; () banked
  2804  001008  11A9               	iorwf	(sprintf@val+3)& (0+255),w,b
  2805  00100A  A4D8               	btfss	status,2,c
  2806  00100C  D003               	goto	l3271
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;doprnt.c: 1291: prec++;
  2810  00100E  0100               	movlb	0	; () banked
  2811  001010  4BB7               	infsnz	sprintf@prec& (0+255),f,b
  2812  001012  2BB8               	incf	(sprintf@prec+1)& (0+255),f,b
  2813  001014                     l3271:
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2817  001014  0E01               	movlw	1
  2818  001016  0100               	movlb	0	; () banked
  2819  001018  6FB9               	movwf	sprintf@c& (0+255),b
  2820  00101A                     l3273:
  2821                           
  2822                           ; BSR set to: 0
  2823  00101A  0E08               	movlw	8
  2824  00101C  0100               	movlb	0	; () banked
  2825  00101E  19B9               	xorwf	sprintf@c& (0+255),w,b
  2826  001020  B4D8               	btfsc	status,2,c
  2827  001022  D01E               	goto	l3285
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2831                           
  2832                           ; BSR set to: 0
  2833                           
  2834                           ; BSR set to: 0
  2835  001024  0100               	movlb	0	; () banked
  2836  001026  51B9               	movf	sprintf@c& (0+255),w,b
  2837  001028  0D04               	mullw	4
  2838  00102A  0E77               	movlw	low _hexpowers
  2839  00102C  24F3               	addwf	prodl,w,c
  2840  00102E  6EF6               	movwf	tblptrl,c
  2841  001030  0E06               	movlw	high _hexpowers
  2842  001032  20F4               	addwfc	prodh,w,c
  2843  001034  6EF7               	movwf	tblptrh,c
  2844  001036                     	if	0	;There are less than 3 active tblptr bytes
  2845  001036                     	endif
  2846  001036  0009               	tblrd		*+
  2847  001038  50F5               	movf	tablat,w,c
  2848  00103A  0100               	movlb	0	; () banked
  2849  00103C  5DA6               	subwf	sprintf@val& (0+255),w,b
  2850  00103E  0009               	tblrd		*+
  2851  001040  50F5               	movf	tablat,w,c
  2852  001042  0100               	movlb	0	; () banked
  2853  001044  59A7               	subwfb	(sprintf@val+1)& (0+255),w,b
  2854  001046  0009               	tblrd		*+
  2855  001048  50F5               	movf	tablat,w,c
  2856  00104A  0100               	movlb	0	; () banked
  2857  00104C  59A8               	subwfb	(sprintf@val+2)& (0+255),w,b
  2858  00104E  0009               	tblrd		*+
  2859  001050  50F5               	movf	tablat,w,c
  2860  001052  0100               	movlb	0	; () banked
  2861  001054  59A9               	subwfb	(sprintf@val+3)& (0+255),w,b
  2862  001056  A0D8               	btfss	status,0,c
  2863  001058  D003               	goto	l3285
  2864                           
  2865                           ; BSR set to: 0
  2866                           
  2867                           ; BSR set to: 0
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;doprnt.c: 1318: break;
  2871  00105A  0100               	movlb	0	; () banked
  2872  00105C  2BB9               	incf	sprintf@c& (0+255),f,b
  2873  00105E  D7DD               	goto	l3273
  2874  001060                     l3285:
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;doprnt.c: 1339: if(c < prec)
  2878  001060  0E80               	movlw	128
  2879  001062  0100               	movlb	0	; () banked
  2880  001064  BFB9               	btfsc	sprintf@c& (0+255),7,b
  2881  001066  0E7F               	movlw	127
  2882  001068  0100               	movlb	0	; () banked
  2883  00106A  6F9A               	movwf	??_sprintf& (0+255),b
  2884  00106C  0100               	movlb	0	; () banked
  2885  00106E  51B7               	movf	sprintf@prec& (0+255),w,b
  2886  001070  0100               	movlb	0	; () banked
  2887  001072  5DB9               	subwf	sprintf@c& (0+255),w,b
  2888  001074  0100               	movlb	0	; () banked
  2889  001076  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  2890  001078  0A80               	xorlw	128
  2891  00107A  0100               	movlb	0	; () banked
  2892  00107C  599A               	subwfb	??_sprintf& (0+255),w,b
  2893  00107E  B0D8               	btfsc	status,0,c
  2894  001080  D003               	goto	l3289
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;doprnt.c: 1340: c = prec;
  2898  001082  C0B7  F0B9         	movff	sprintf@prec,sprintf@c
  2899  001086  D018               	goto	l3293
  2900  001088                     l3289:
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;doprnt.c: 1341: else if(prec < c)
  2904  001088  0100               	movlb	0	; () banked
  2905  00108A  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  2906  00108C  0A80               	xorlw	128
  2907  00108E  0100               	movlb	0	; () banked
  2908  001090  6F9A               	movwf	??_sprintf& (0+255),b
  2909  001092  0100               	movlb	0	; () banked
  2910  001094  51B9               	movf	sprintf@c& (0+255),w,b
  2911  001096  0100               	movlb	0	; () banked
  2912  001098  5DB7               	subwf	sprintf@prec& (0+255),w,b
  2913  00109A  0E80               	movlw	128
  2914  00109C  0100               	movlb	0	; () banked
  2915  00109E  BFB9               	btfsc	sprintf@c& (0+255),7,b
  2916  0010A0  0E7F               	movlw	127
  2917  0010A2  0100               	movlb	0	; () banked
  2918  0010A4  599A               	subwfb	??_sprintf& (0+255),w,b
  2919  0010A6  B0D8               	btfsc	status,0,c
  2920  0010A8  D007               	goto	l3293
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;doprnt.c: 1342: prec = c;
  2924  0010AA  0100               	movlb	0	; () banked
  2925  0010AC  51B9               	movf	sprintf@c& (0+255),w,b
  2926  0010AE  0100               	movlb	0	; () banked
  2927  0010B0  6FB7               	movwf	sprintf@prec& (0+255),b
  2928  0010B2  6BB8               	clrf	(sprintf@prec+1)& (0+255),b
  2929  0010B4  BFB7               	btfsc	sprintf@prec& (0+255),7,b
  2930  0010B6  07B8               	decf	(sprintf@prec+1)& (0+255),f,b
  2931  0010B8                     l3293:
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2935  0010B8  0100               	movlb	0	; () banked
  2936  0010BA  51B2               	movf	sprintf@width& (0+255),w,b
  2937  0010BC  0100               	movlb	0	; () banked
  2938  0010BE  11B3               	iorwf	(sprintf@width+1)& (0+255),w,b
  2939  0010C0  B4D8               	btfsc	status,2,c
  2940  0010C2  D014               	goto	l3299
  2941                           
  2942                           ; BSR set to: 0
  2943  0010C4  0E03               	movlw	3
  2944  0010C6  0100               	movlb	0	; () banked
  2945  0010C8  15B0               	andwf	sprintf@flag& (0+255),w,b
  2946  0010CA  0100               	movlb	0	; () banked
  2947  0010CC  6F9A               	movwf	??_sprintf& (0+255),b
  2948  0010CE  0E00               	movlw	0
  2949  0010D0  0100               	movlb	0	; () banked
  2950  0010D2  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  2951  0010D4  0100               	movlb	0	; () banked
  2952  0010D6  6F9B               	movwf	(??_sprintf+1)& (0+255),b
  2953  0010D8  0100               	movlb	0	; () banked
  2954  0010DA  519A               	movf	??_sprintf& (0+255),w,b
  2955  0010DC  0100               	movlb	0	; () banked
  2956  0010DE  119B               	iorwf	(??_sprintf+1)& (0+255),w,b
  2957  0010E0  B4D8               	btfsc	status,2,c
  2958  0010E2  D004               	goto	l3299
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;doprnt.c: 1346: width--;
  2962  0010E4  0100               	movlb	0	; () banked
  2963  0010E6  07B2               	decf	sprintf@width& (0+255),f,b
  2964  0010E8  A0D8               	btfss	status,0,c
  2965  0010EA  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  2966  0010EC                     l3299:
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2970  0010EC  0100               	movlb	0	; () banked
  2971  0010EE  ADB1               	btfss	(sprintf@flag+1)& (0+255),6,b
  2972  0010F0  D01E               	goto	l3307
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;doprnt.c: 1349: if(width > prec)
  2976  0010F2  0100               	movlb	0	; () banked
  2977  0010F4  51B2               	movf	sprintf@width& (0+255),w,b
  2978  0010F6  0100               	movlb	0	; () banked
  2979  0010F8  5DB7               	subwf	sprintf@prec& (0+255),w,b
  2980  0010FA  0100               	movlb	0	; () banked
  2981  0010FC  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  2982  0010FE  0A80               	xorlw	128
  2983  001100  0100               	movlb	0	; () banked
  2984  001102  6F9A               	movwf	??_sprintf& (0+255),b
  2985  001104  0100               	movlb	0	; () banked
  2986  001106  51B3               	movf	(sprintf@width+1)& (0+255),w,b
  2987  001108  0A80               	xorlw	128
  2988  00110A  0100               	movlb	0	; () banked
  2989  00110C  599A               	subwfb	??_sprintf& (0+255),w,b
  2990  00110E  B0D8               	btfsc	status,0,c
  2991  001110  D009               	goto	l3305
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;doprnt.c: 1350: width -= prec;
  2995  001112  0100               	movlb	0	; () banked
  2996  001114  51B7               	movf	sprintf@prec& (0+255),w,b
  2997  001116  0100               	movlb	0	; () banked
  2998  001118  5FB2               	subwf	sprintf@width& (0+255),f,b
  2999  00111A  0100               	movlb	0	; () banked
  3000  00111C  51B8               	movf	(sprintf@prec+1)& (0+255),w,b
  3001  00111E  0100               	movlb	0	; () banked
  3002  001120  5BB3               	subwfb	(sprintf@width+1)& (0+255),f,b
  3003  001122  D005               	goto	l3307
  3004  001124                     l3305:
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;doprnt.c: 1351: else
  3008                           ;doprnt.c: 1352: width = 0;
  3009  001124  0E00               	movlw	0
  3010  001126  0100               	movlb	0	; () banked
  3011  001128  6FB3               	movwf	(sprintf@width+1)& (0+255),b
  3012  00112A  0E00               	movlw	0
  3013  00112C  6FB2               	movwf	sprintf@width& (0+255),b
  3014  00112E                     l3307:
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;doprnt.c: 1353: }
  3018                           ;doprnt.c: 1381: if(width > c)
  3019  00112E  0E80               	movlw	128
  3020  001130  0100               	movlb	0	; () banked
  3021  001132  BFB9               	btfsc	sprintf@c& (0+255),7,b
  3022  001134  0E7F               	movlw	127
  3023  001136  0100               	movlb	0	; () banked
  3024  001138  6F9A               	movwf	??_sprintf& (0+255),b
  3025  00113A  0100               	movlb	0	; () banked
  3026  00113C  51B2               	movf	sprintf@width& (0+255),w,b
  3027  00113E  0100               	movlb	0	; () banked
  3028  001140  5DB9               	subwf	sprintf@c& (0+255),w,b
  3029  001142  0100               	movlb	0	; () banked
  3030  001144  51B3               	movf	(sprintf@width+1)& (0+255),w,b
  3031  001146  0A80               	xorlw	128
  3032  001148  0100               	movlb	0	; () banked
  3033  00114A  599A               	subwfb	??_sprintf& (0+255),w,b
  3034  00114C  B0D8               	btfsc	status,0,c
  3035  00114E  D00B               	goto	l3311
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;doprnt.c: 1382: width -= c;
  3039  001150  0100               	movlb	0	; () banked
  3040  001152  51B9               	movf	sprintf@c& (0+255),w,b
  3041  001154  0100               	movlb	0	; () banked
  3042  001156  5FB2               	subwf	sprintf@width& (0+255),f,b
  3043  001158  0E00               	movlw	0
  3044  00115A  0100               	movlb	0	; () banked
  3045  00115C  BFB9               	btfsc	sprintf@c& (0+255),7,b
  3046  00115E  0EFF               	movlw	255
  3047  001160  0100               	movlb	0	; () banked
  3048  001162  5BB3               	subwfb	(sprintf@width+1)& (0+255),f,b
  3049  001164  D005               	goto	l3313
  3050  001166                     l3311:
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;doprnt.c: 1383: else
  3054                           ;doprnt.c: 1384: width = 0;
  3055  001166  0E00               	movlw	0
  3056  001168  0100               	movlb	0	; () banked
  3057  00116A  6FB3               	movwf	(sprintf@width+1)& (0+255),b
  3058  00116C  0E00               	movlw	0
  3059  00116E  6FB2               	movwf	sprintf@width& (0+255),b
  3060  001170                     l3313:
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;doprnt.c: 1387: if(flag & 0x04) {
  3064  001170  0100               	movlb	0	; () banked
  3065  001172  A5B0               	btfss	sprintf@flag& (0+255),2,b
  3066  001174  D02D               	goto	l3329
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;doprnt.c: 1392: if(flag & 0x03)
  3070  001176  0E03               	movlw	3
  3071  001178  0100               	movlb	0	; () banked
  3072  00117A  15B0               	andwf	sprintf@flag& (0+255),w,b
  3073  00117C  0100               	movlb	0	; () banked
  3074  00117E  6F9A               	movwf	??_sprintf& (0+255),b
  3075  001180  0E00               	movlw	0
  3076  001182  0100               	movlb	0	; () banked
  3077  001184  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  3078  001186  0100               	movlb	0	; () banked
  3079  001188  6F9B               	movwf	(??_sprintf+1)& (0+255),b
  3080  00118A  0100               	movlb	0	; () banked
  3081  00118C  519A               	movf	??_sprintf& (0+255),w,b
  3082  00118E  0100               	movlb	0	; () banked
  3083  001190  119B               	iorwf	(??_sprintf+1)& (0+255),w,b
  3084  001192  B4D8               	btfsc	status,2,c
  3085  001194  D009               	goto	l3321
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  3089  001196  C092  FFD9         	movff	sprintf@sp,fsr2l
  3090  00119A  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  3091  00119E  0E2D               	movlw	45
  3092  0011A0  6EDF               	movwf	indf2,c
  3093                           
  3094                           ; BSR set to: 0
  3095  0011A2  0100               	movlb	0	; () banked
  3096  0011A4  4B92               	infsnz	sprintf@sp& (0+255),f,b
  3097  0011A6  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  3098  0011A8                     l3321:
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;doprnt.c: 1415: if(width)
  3102  0011A8  0100               	movlb	0	; () banked
  3103  0011AA  51B2               	movf	sprintf@width& (0+255),w,b
  3104  0011AC  0100               	movlb	0	; () banked
  3105  0011AE  11B3               	iorwf	(sprintf@width+1)& (0+255),w,b
  3106  0011B0  B4D8               	btfsc	status,2,c
  3107  0011B2  D080               	goto	l3351
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3111                           
  3112                           ; BSR set to: 0
  3113                           
  3114                           ;doprnt.c: 1416: do
  3115  0011B4  C092  FFD9         	movff	sprintf@sp,fsr2l
  3116  0011B8  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  3117  0011BC  0E30               	movlw	48
  3118  0011BE  6EDF               	movwf	indf2,c
  3119                           
  3120                           ; BSR set to: 0
  3121  0011C0  0100               	movlb	0	; () banked
  3122  0011C2  4B92               	infsnz	sprintf@sp& (0+255),f,b
  3123  0011C4  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;doprnt.c: 1418: while(--width);
  3127  0011C6  0100               	movlb	0	; () banked
  3128  0011C8  07B2               	decf	sprintf@width& (0+255),f,b
  3129  0011CA  A0D8               	btfss	status,0,c
  3130  0011CC  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  3131  0011CE  D7EC               	goto	l3321
  3132  0011D0                     l3329:
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;doprnt.c: 1422: {
  3136                           ;doprnt.c: 1424: if(width
  3137                           ;doprnt.c: 1428: )
  3138  0011D0  0100               	movlb	0	; () banked
  3139  0011D2  51B2               	movf	sprintf@width& (0+255),w,b
  3140  0011D4  0100               	movlb	0	; () banked
  3141  0011D6  11B3               	iorwf	(sprintf@width+1)& (0+255),w,b
  3142  0011D8  B4D8               	btfsc	status,2,c
  3143  0011DA  D013               	goto	l3337
  3144  0011DC                     l3331:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3148  0011DC  C092  FFD9         	movff	sprintf@sp,fsr2l
  3149  0011E0  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  3150  0011E4  0E20               	movlw	32
  3151  0011E6  6EDF               	movwf	indf2,c
  3152                           
  3153                           ; BSR set to: 0
  3154  0011E8  0100               	movlb	0	; () banked
  3155  0011EA  4B92               	infsnz	sprintf@sp& (0+255),f,b
  3156  0011EC  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;doprnt.c: 1431: while(--width);
  3160  0011EE  0100               	movlb	0	; () banked
  3161  0011F0  07B2               	decf	sprintf@width& (0+255),f,b
  3162  0011F2  A0D8               	btfss	status,0,c
  3163  0011F4  07B3               	decf	(sprintf@width+1)& (0+255),f,b
  3164  0011F6  0100               	movlb	0	; () banked
  3165  0011F8  51B2               	movf	sprintf@width& (0+255),w,b
  3166  0011FA  0100               	movlb	0	; () banked
  3167  0011FC  11B3               	iorwf	(sprintf@width+1)& (0+255),w,b
  3168  0011FE  A4D8               	btfss	status,2,c
  3169  001200  D7ED               	goto	l3331
  3170  001202                     l3337:
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;doprnt.c: 1438: if(flag & 0x03)
  3174  001202  0E03               	movlw	3
  3175  001204  0100               	movlb	0	; () banked
  3176  001206  15B0               	andwf	sprintf@flag& (0+255),w,b
  3177  001208  0100               	movlb	0	; () banked
  3178  00120A  6F9A               	movwf	??_sprintf& (0+255),b
  3179  00120C  0E00               	movlw	0
  3180  00120E  0100               	movlb	0	; () banked
  3181  001210  15B1               	andwf	(sprintf@flag+1)& (0+255),w,b
  3182  001212  0100               	movlb	0	; () banked
  3183  001214  6F9B               	movwf	(??_sprintf+1)& (0+255),b
  3184  001216  0100               	movlb	0	; () banked
  3185  001218  519A               	movf	??_sprintf& (0+255),w,b
  3186  00121A  0100               	movlb	0	; () banked
  3187  00121C  119B               	iorwf	(??_sprintf+1)& (0+255),w,b
  3188  00121E  B4D8               	btfsc	status,2,c
  3189  001220  D049               	goto	l3351
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3193  001222  C092  FFD9         	movff	sprintf@sp,fsr2l
  3194  001226  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  3195  00122A  0E2D               	movlw	45
  3196  00122C  6EDF               	movwf	indf2,c
  3197  00122E  D03F               	goto	l3349
  3198  001230                     l3343:
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;doprnt.c: 1478: {
  3202                           ;doprnt.c: 1499: {
  3203                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3204  001230  C0A6  F025         	movff	sprintf@val,___lldiv@dividend
  3205  001234  C0A7  F026         	movff	sprintf@val+1,___lldiv@dividend+1
  3206  001238  C0A8  F027         	movff	sprintf@val+2,___lldiv@dividend+2
  3207  00123C  C0A9  F028         	movff	sprintf@val+3,___lldiv@dividend+3
  3208  001240  C0B7  F09A         	movff	sprintf@prec,??_sprintf
  3209  001244  C0B8  F09B         	movff	sprintf@prec+1,??_sprintf+1
  3210  001248  0100               	movlb	0	; () banked
  3211  00124A  90D8               	bcf	status,0,c
  3212  00124C  379A               	rlcf	??_sprintf& (0+255),f,b
  3213  00124E  379B               	rlcf	(??_sprintf+1)& (0+255),f,b
  3214  001250  0100               	movlb	0	; () banked
  3215  001252  90D8               	bcf	status,0,c
  3216  001254  379A               	rlcf	??_sprintf& (0+255),f,b
  3217  001256  379B               	rlcf	(??_sprintf+1)& (0+255),f,b
  3218  001258  0E77               	movlw	low _hexpowers
  3219  00125A  0100               	movlb	0	; () banked
  3220  00125C  259A               	addwf	??_sprintf& (0+255),w,b
  3221  00125E  6EF6               	movwf	tblptrl,c
  3222  001260  0E06               	movlw	high _hexpowers
  3223  001262  219B               	addwfc	(??_sprintf+1)& (0+255),w,b
  3224  001264  6EF7               	movwf	tblptrh,c
  3225  001266                     	if	0	;There are less than 3 active tblptr bytes
  3226  001266                     	endif
  3227  001266  0009               	tblrd		*+
  3228  001268  CFF5 F029          	movff	tablat,___lldiv@divisor
  3229  00126C  0009               	tblrd		*+
  3230  00126E  CFF5 F02A          	movff	tablat,___lldiv@divisor+1
  3231  001272  0009               	tblrd		*+
  3232  001274  CFF5 F02B          	movff	tablat,___lldiv@divisor+2
  3233  001278  000A               	tblrd		*-
  3234  00127A  CFF5 F02C          	movff	tablat,___lldiv@divisor+3
  3235  00127E  ECE8  F011         	call	___lldiv	;wreg free
  3236  001282  5025               	movf	?___lldiv,w,c
  3237  001284  0B0F               	andlw	15
  3238  001286  0100               	movlb	0	; () banked
  3239  001288  6FA3               	movwf	sprintf@idx& (0+255),b
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3243  00128A  0100               	movlb	0	; () banked
  3244  00128C  51A3               	movf	sprintf@idx& (0+255),w,b
  3245  00128E  0D01               	mullw	1
  3246  001290  0EAE               	movlw	low STR_3
  3247  001292  24F3               	addwf	prodl,w,c
  3248  001294  6EF6               	movwf	tblptrl,c
  3249  001296  0E06               	movlw	high STR_3
  3250  001298  20F4               	addwfc	prodh,w,c
  3251  00129A  6EF7               	movwf	tblptrh,c
  3252  00129C                     	if	0	;There are less than 3 active tblptr bytes
  3253  00129C                     	endif
  3254  00129C  0008               	tblrd		*
  3255  00129E  CFF5 F0B9          	movff	tablat,sprintf@c
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;doprnt.c: 1508: }
  3259                           ;doprnt.c: 1523: }
  3260                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3261  0012A2  C092  FFD9         	movff	sprintf@sp,fsr2l
  3262  0012A6  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  3263  0012AA  C0B9  FFDF         	movff	sprintf@c,indf2
  3264  0012AE                     l3349:
  3265                           
  3266                           ; BSR set to: 0
  3267  0012AE  0100               	movlb	0	; () banked
  3268  0012B0  4B92               	infsnz	sprintf@sp& (0+255),f,b
  3269  0012B2  2B93               	incf	(sprintf@sp+1)& (0+255),f,b
  3270  0012B4                     l3351:
  3271                           
  3272                           ; BSR set to: 0
  3273  0012B4  0100               	movlb	0	; () banked
  3274  0012B6  07B7               	decf	sprintf@prec& (0+255),f,b
  3275  0012B8  A0D8               	btfss	status,0,c
  3276  0012BA  07B8               	decf	(sprintf@prec+1)& (0+255),f,b
  3277  0012BC  0100               	movlb	0	; () banked
  3278  0012BE  29B7               	incf	sprintf@prec& (0+255),w,b
  3279  0012C0  E1B7               	bnz	l3343
  3280  0012C2  0100               	movlb	0	; () banked
  3281  0012C4  29B8               	incf	(sprintf@prec+1)& (0+255),w,b
  3282  0012C6  A4D8               	btfss	status,2,c
  3283  0012C8  D7B3               	goto	l3343
  3284  0012CA                     l3353:
  3285                           
  3286                           ; BSR set to: 0
  3287  0012CA  C094  FFF6         	movff	sprintf@f,tblptrl
  3288  0012CE  C095  FFF7         	movff	sprintf@f+1,tblptrh
  3289  0012D2  0100               	movlb	0	; () banked
  3290  0012D4  4B94               	infsnz	sprintf@f& (0+255),f,b
  3291  0012D6  2B95               	incf	(sprintf@f+1)& (0+255),f,b
  3292  0012D8                     	if	0	;tblptru may be non-zero
  3293  0012D8                     	endif
  3294  0012D8                     	if	0	;tblptru may be non-zero
  3295  0012D8                     	endif
  3296  0012D8  0008               	tblrd		*
  3297  0012DA  CFF5 F0B9          	movff	tablat,sprintf@c
  3298  0012DE  0100               	movlb	0	; () banked
  3299  0012E0  51B9               	movf	sprintf@c& (0+255),w,b
  3300  0012E2  A4D8               	btfss	status,2,c
  3301  0012E4  EF70  F003         	goto	l3033
  3302  0012E8                     l3355:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;doprnt.c: 1538: *sp = 0;
  3306  0012E8  C092  FFD9         	movff	sprintf@sp,fsr2l
  3307  0012EC  C093  FFDA         	movff	sprintf@sp+1,fsr2h
  3308  0012F0  0E00               	movlw	0
  3309  0012F2  6EDF               	movwf	indf2,c
  3310  0012F4  0012               	return	
  3311  0012F6                     __end_of_sprintf:
  3312                           	opt stack 0
  3313                           tblptru	equ	0xFF8
  3314                           tblptrh	equ	0xFF7
  3315                           tblptrl	equ	0xFF6
  3316                           tablat	equ	0xFF5
  3317                           prodh	equ	0xFF4
  3318                           prodl	equ	0xFF3
  3319                           intcon	equ	0xFF2
  3320                           postinc0	equ	0xFEE
  3321                           wreg	equ	0xFE8
  3322                           postdec1	equ	0xFE5
  3323                           fsr1h	equ	0xFE2
  3324                           fsr1l	equ	0xFE1
  3325                           indf2	equ	0xFDF
  3326                           postinc2	equ	0xFDE
  3327                           postdec2	equ	0xFDD
  3328                           fsr2h	equ	0xFDA
  3329                           fsr2l	equ	0xFD9
  3330                           status	equ	0xFD8
  3331                           
  3332 ;; *************** function _scale *****************
  3333 ;; Defined at:
  3334 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  scl             1    wreg     char 
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  scl             1   77[COMRAM] char 
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  3   71[COMRAM] char 
  3341 ;; Registers used:
  3342 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3348 ;;      Params:         3       0       0       0       0       0       0
  3349 ;;      Locals:         4       0       0       0       0       0       0
  3350 ;;      Temps:          0       0       0       0       0       0       0
  3351 ;;      Totals:         7       0       0       0       0       0       0
  3352 ;;Total ram usage:        7 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; Hardware stack levels required when called:    5
  3355 ;; This function calls:
  3356 ;;		___awdiv
  3357 ;;		___awmod
  3358 ;;		___ftmul
  3359 ;;		___wmul
  3360 ;; This function is called by:
  3361 ;;		_sprintf
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	text5
  3366  0012F6                     __ptext5:
  3367                           	opt stack 0
  3368  0012F6                     _scale:
  3369                           	opt stack 24
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;incstack = 0
  3373                           ;scale@scl stored from wreg
  3374  0012F6  6E4E               	movwf	scale@scl,c
  3375                           
  3376                           ;doprnt.c: 428: if(scl < 0) {
  3377  0012F8  AE4E               	btfss	scale@scl,7,c
  3378  0012FA  D0FB               	goto	l2199
  3379                           
  3380                           ;doprnt.c: 429: scl = -scl;
  3381  0012FC  6C4E               	negf	scale@scl,c
  3382                           
  3383                           ;doprnt.c: 430: if(scl>=110)
  3384  0012FE  504E               	movf	scale@scl,w,c
  3385  001300  0A80               	xorlw	128
  3386  001302  0F12               	addlw	-238
  3387  001304  A0D8               	btfss	status,0,c
  3388  001306  D091               	goto	l2189
  3389                           
  3390                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3391  001308  0E00               	movlw	0
  3392  00130A  6E36               	movwf	___wmul@multiplicand+1,c
  3393  00130C  0E03               	movlw	3
  3394  00130E  6E35               	movwf	___wmul@multiplicand,c
  3395  001310  0E00               	movlw	0
  3396  001312  6E2E               	movwf	___awdiv@divisor+1,c
  3397  001314  0E0A               	movlw	10
  3398  001316  6E2D               	movwf	___awdiv@divisor,c
  3399  001318  0E00               	movlw	0
  3400  00131A  6E28               	movwf	___awmod@divisor+1,c
  3401  00131C  0E64               	movlw	100
  3402  00131E  6E27               	movwf	___awmod@divisor,c
  3403  001320  504E               	movf	scale@scl,w,c
  3404  001322  6E25               	movwf	___awmod@dividend,c
  3405  001324  6A26               	clrf	___awmod@dividend+1,c
  3406  001326  BE25               	btfsc	___awmod@dividend,7,c
  3407  001328  0626               	decf	___awmod@dividend+1,f,c
  3408  00132A  EC29  F012         	call	___awmod	;wreg free
  3409  00132E  C025  F02B         	movff	?___awmod,___awdiv@dividend
  3410  001332  C026  F02C         	movff	?___awmod+1,___awdiv@dividend+1
  3411  001336  ECA6  F011         	call	___awdiv	;wreg free
  3412  00133A  0E09               	movlw	9
  3413  00133C  242B               	addwf	?___awdiv,w,c
  3414  00133E  6E33               	movwf	___wmul@multiplier,c
  3415  001340  0E00               	movlw	0
  3416  001342  202C               	addwfc	?___awdiv+1,w,c
  3417  001344  6E34               	movwf	___wmul@multiplier+1,c
  3418  001346  EC4B  F013         	call	___wmul	;wreg free
  3419  00134A  0E50               	movlw	low __npowers_
  3420  00134C  2433               	addwf	?___wmul,w,c
  3421  00134E  6EF6               	movwf	tblptrl,c
  3422  001350  0E06               	movlw	high __npowers_
  3423  001352  2034               	addwfc	?___wmul+1,w,c
  3424  001354  6EF7               	movwf	tblptrh,c
  3425  001356                     	if	0	;There are less than 3 active tblptr bytes
  3426  001356                     	endif
  3427  001356  0009               	tblrd		*+
  3428  001358  CFF5 F03C          	movff	tablat,___ftmul@f2
  3429  00135C  0009               	tblrd		*+
  3430  00135E  CFF5 F03D          	movff	tablat,___ftmul@f2+1
  3431  001362  000A               	tblrd		*-
  3432  001364  CFF5 F03E          	movff	tablat,___ftmul@f2+2
  3433  001368  0E00               	movlw	0
  3434  00136A  6E2E               	movwf	___awdiv@divisor+1,c
  3435  00136C  0E64               	movlw	100
  3436  00136E  6E2D               	movwf	___awdiv@divisor,c
  3437  001370  504E               	movf	scale@scl,w,c
  3438  001372  6E2B               	movwf	___awdiv@dividend,c
  3439  001374  6A2C               	clrf	___awdiv@dividend+1,c
  3440  001376  BE2B               	btfsc	___awdiv@dividend,7,c
  3441  001378  062C               	decf	___awdiv@dividend+1,f,c
  3442  00137A  ECA6  F011         	call	___awdiv	;wreg free
  3443  00137E  0E12               	movlw	18
  3444  001380  242B               	addwf	?___awdiv,w,c
  3445  001382  6E33               	movwf	___wmul@multiplier,c
  3446  001384  0E00               	movlw	0
  3447  001386  202C               	addwfc	?___awdiv+1,w,c
  3448  001388  6E34               	movwf	___wmul@multiplier+1,c
  3449  00138A  0E00               	movlw	0
  3450  00138C  6E36               	movwf	___wmul@multiplicand+1,c
  3451  00138E  0E03               	movlw	3
  3452  001390  6E35               	movwf	___wmul@multiplicand,c
  3453  001392  EC4B  F013         	call	___wmul	;wreg free
  3454  001396  0E50               	movlw	low __npowers_
  3455  001398  2433               	addwf	?___wmul,w,c
  3456  00139A  6EF6               	movwf	tblptrl,c
  3457  00139C  0E06               	movlw	high __npowers_
  3458  00139E  2034               	addwfc	?___wmul+1,w,c
  3459  0013A0  6EF7               	movwf	tblptrh,c
  3460  0013A2                     	if	0	;There are less than 3 active tblptr bytes
  3461  0013A2                     	endif
  3462  0013A2  0009               	tblrd		*+
  3463  0013A4  CFF5 F039          	movff	tablat,___ftmul@f1
  3464  0013A8  0009               	tblrd		*+
  3465  0013AA  CFF5 F03A          	movff	tablat,___ftmul@f1+1
  3466  0013AE  000A               	tblrd		*-
  3467  0013B0  CFF5 F03B          	movff	tablat,___ftmul@f1+2
  3468  0013B4  EC43  F010         	call	___ftmul	;wreg free
  3469  0013B8  C039  F04B         	movff	?___ftmul,_scale$1400
  3470  0013BC  C03A  F04C         	movff	?___ftmul+1,_scale$1400+1
  3471  0013C0  C03B  F04D         	movff	?___ftmul+2,_scale$1400+2
  3472                           
  3473                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3474  0013C4  C04B  F039         	movff	_scale$1400,___ftmul@f1
  3475  0013C8  C04C  F03A         	movff	_scale$1400+1,___ftmul@f1+1
  3476  0013CC  C04D  F03B         	movff	_scale$1400+2,___ftmul@f1+2
  3477  0013D0  0E00               	movlw	0
  3478  0013D2  6E36               	movwf	___wmul@multiplicand+1,c
  3479  0013D4  0E03               	movlw	3
  3480  0013D6  6E35               	movwf	___wmul@multiplicand,c
  3481  0013D8  0E00               	movlw	0
  3482  0013DA  6E28               	movwf	___awmod@divisor+1,c
  3483  0013DC  0E0A               	movlw	10
  3484  0013DE  6E27               	movwf	___awmod@divisor,c
  3485  0013E0  504E               	movf	scale@scl,w,c
  3486  0013E2  6E25               	movwf	___awmod@dividend,c
  3487  0013E4  6A26               	clrf	___awmod@dividend+1,c
  3488  0013E6  BE25               	btfsc	___awmod@dividend,7,c
  3489  0013E8  0626               	decf	___awmod@dividend+1,f,c
  3490  0013EA  EC29  F012         	call	___awmod	;wreg free
  3491  0013EE  C025  F033         	movff	?___awmod,___wmul@multiplier
  3492  0013F2  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  3493  0013F6  EC4B  F013         	call	___wmul	;wreg free
  3494  0013FA  0E50               	movlw	low __npowers_
  3495  0013FC  2433               	addwf	?___wmul,w,c
  3496  0013FE  6EF6               	movwf	tblptrl,c
  3497  001400  0E06               	movlw	high __npowers_
  3498  001402  2034               	addwfc	?___wmul+1,w,c
  3499  001404  6EF7               	movwf	tblptrh,c
  3500  001406                     	if	0	;There are less than 3 active tblptr bytes
  3501  001406                     	endif
  3502  001406  0009               	tblrd		*+
  3503  001408  CFF5 F03C          	movff	tablat,___ftmul@f2
  3504  00140C  0009               	tblrd		*+
  3505  00140E  CFF5 F03D          	movff	tablat,___ftmul@f2+1
  3506  001412  000A               	tblrd		*-
  3507  001414  CFF5 F03E          	movff	tablat,___ftmul@f2+2
  3508  001418  EC43  F010         	call	___ftmul	;wreg free
  3509  00141C  C039  F048         	movff	?___ftmul,?_scale
  3510  001420  C03A  F049         	movff	?___ftmul+1,?_scale+1
  3511  001424  C03B  F04A         	movff	?___ftmul+2,?_scale+2
  3512  001428  0012               	return	
  3513  00142A                     l2189:
  3514                           
  3515                           ;doprnt.c: 432: else if(scl > 10)
  3516  00142A  504E               	movf	scale@scl,w,c
  3517  00142C  0A80               	xorlw	128
  3518  00142E  0F75               	addlw	-139
  3519  001430  A0D8               	btfss	status,0,c
  3520  001432  D04D               	goto	l2195
  3521                           
  3522                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3523  001434  0E00               	movlw	0
  3524  001436  6E2E               	movwf	___awdiv@divisor+1,c
  3525  001438  0E0A               	movlw	10
  3526  00143A  6E2D               	movwf	___awdiv@divisor,c
  3527  00143C  504E               	movf	scale@scl,w,c
  3528  00143E  6E2B               	movwf	___awdiv@dividend,c
  3529  001440  6A2C               	clrf	___awdiv@dividend+1,c
  3530  001442  BE2B               	btfsc	___awdiv@dividend,7,c
  3531  001444  062C               	decf	___awdiv@dividend+1,f,c
  3532  001446  ECA6  F011         	call	___awdiv	;wreg free
  3533  00144A  0E09               	movlw	9
  3534  00144C  242B               	addwf	?___awdiv,w,c
  3535  00144E  6E33               	movwf	___wmul@multiplier,c
  3536  001450  0E00               	movlw	0
  3537  001452  202C               	addwfc	?___awdiv+1,w,c
  3538  001454  6E34               	movwf	___wmul@multiplier+1,c
  3539  001456  0E00               	movlw	0
  3540  001458  6E36               	movwf	___wmul@multiplicand+1,c
  3541  00145A  0E03               	movlw	3
  3542  00145C  6E35               	movwf	___wmul@multiplicand,c
  3543  00145E  EC4B  F013         	call	___wmul	;wreg free
  3544  001462  0E50               	movlw	low __npowers_
  3545  001464  2433               	addwf	?___wmul,w,c
  3546  001466  6EF6               	movwf	tblptrl,c
  3547  001468  0E06               	movlw	high __npowers_
  3548  00146A  2034               	addwfc	?___wmul+1,w,c
  3549  00146C  6EF7               	movwf	tblptrh,c
  3550  00146E                     	if	0	;There are less than 3 active tblptr bytes
  3551  00146E                     	endif
  3552  00146E  0009               	tblrd		*+
  3553  001470  CFF5 F039          	movff	tablat,___ftmul@f1
  3554  001474  0009               	tblrd		*+
  3555  001476  CFF5 F03A          	movff	tablat,___ftmul@f1+1
  3556  00147A  000A               	tblrd		*-
  3557  00147C  CFF5 F03B          	movff	tablat,___ftmul@f1+2
  3558  001480  0E00               	movlw	0
  3559  001482  6E36               	movwf	___wmul@multiplicand+1,c
  3560  001484  0E03               	movlw	3
  3561  001486  6E35               	movwf	___wmul@multiplicand,c
  3562  001488  0E00               	movlw	0
  3563  00148A  6E28               	movwf	___awmod@divisor+1,c
  3564  00148C  0E0A               	movlw	10
  3565  00148E  6E27               	movwf	___awmod@divisor,c
  3566  001490  504E               	movf	scale@scl,w,c
  3567  001492  6E25               	movwf	___awmod@dividend,c
  3568  001494  6A26               	clrf	___awmod@dividend+1,c
  3569  001496  BE25               	btfsc	___awmod@dividend,7,c
  3570  001498  0626               	decf	___awmod@dividend+1,f,c
  3571  00149A  EC29  F012         	call	___awmod	;wreg free
  3572  00149E  C025  F033         	movff	?___awmod,___wmul@multiplier
  3573  0014A2  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  3574  0014A6  EC4B  F013         	call	___wmul	;wreg free
  3575  0014AA  0E50               	movlw	low __npowers_
  3576  0014AC  2433               	addwf	?___wmul,w,c
  3577  0014AE  6EF6               	movwf	tblptrl,c
  3578  0014B0  0E06               	movlw	high __npowers_
  3579  0014B2  2034               	addwfc	?___wmul+1,w,c
  3580  0014B4  6EF7               	movwf	tblptrh,c
  3581  0014B6                     	if	0	;There are less than 3 active tblptr bytes
  3582  0014B6                     	endif
  3583  0014B6  0009               	tblrd		*+
  3584  0014B8  CFF5 F03C          	movff	tablat,___ftmul@f2
  3585  0014BC  0009               	tblrd		*+
  3586  0014BE  CFF5 F03D          	movff	tablat,___ftmul@f2+1
  3587  0014C2  000A               	tblrd		*-
  3588  0014C4  CFF5 F03E          	movff	tablat,___ftmul@f2+2
  3589  0014C8  EC43  F010         	call	___ftmul	;wreg free
  3590  0014CC  D7A7               	goto	L3
  3591  0014CE                     l2195:
  3592                           
  3593                           ;doprnt.c: 434: return _npowers_[scl];
  3594  0014CE  504E               	movf	scale@scl,w,c
  3595  0014D0  0D03               	mullw	3
  3596  0014D2  0E50               	movlw	low __npowers_
  3597  0014D4  24F3               	addwf	prodl,w,c
  3598  0014D6  6EF6               	movwf	tblptrl,c
  3599  0014D8  0E06               	movlw	high __npowers_
  3600  0014DA  20F4               	addwfc	prodh,w,c
  3601  0014DC  6EF7               	movwf	tblptrh,c
  3602  0014DE                     	if	0	;There are less than 3 active tblptr bytes
  3603  0014DE                     	endif
  3604  0014DE  0009               	tblrd		*+
  3605  0014E0  CFF5 F048          	movff	tablat,?_scale
  3606  0014E4  0009               	tblrd		*+
  3607  0014E6  CFF5 F049          	movff	tablat,?_scale+1
  3608  0014EA  000A               	tblrd		*-
  3609  0014EC  CFF5 F04A          	movff	tablat,?_scale+2
  3610  0014F0  0012               	return	
  3611  0014F2                     l2199:
  3612                           
  3613                           ;doprnt.c: 435: }
  3614                           ;doprnt.c: 436: if(scl>=110)
  3615  0014F2  504E               	movf	scale@scl,w,c
  3616  0014F4  0A80               	xorlw	128
  3617  0014F6  0F12               	addlw	-238
  3618  0014F8  A0D8               	btfss	status,0,c
  3619  0014FA  D091               	goto	l2207
  3620                           
  3621                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3622  0014FC  0E00               	movlw	0
  3623  0014FE  6E36               	movwf	___wmul@multiplicand+1,c
  3624  001500  0E03               	movlw	3
  3625  001502  6E35               	movwf	___wmul@multiplicand,c
  3626  001504  0E00               	movlw	0
  3627  001506  6E2E               	movwf	___awdiv@divisor+1,c
  3628  001508  0E0A               	movlw	10
  3629  00150A  6E2D               	movwf	___awdiv@divisor,c
  3630  00150C  0E00               	movlw	0
  3631  00150E  6E28               	movwf	___awmod@divisor+1,c
  3632  001510  0E64               	movlw	100
  3633  001512  6E27               	movwf	___awmod@divisor,c
  3634  001514  504E               	movf	scale@scl,w,c
  3635  001516  6E25               	movwf	___awmod@dividend,c
  3636  001518  6A26               	clrf	___awmod@dividend+1,c
  3637  00151A  BE25               	btfsc	___awmod@dividend,7,c
  3638  00151C  0626               	decf	___awmod@dividend+1,f,c
  3639  00151E  EC29  F012         	call	___awmod	;wreg free
  3640  001522  C025  F02B         	movff	?___awmod,___awdiv@dividend
  3641  001526  C026  F02C         	movff	?___awmod+1,___awdiv@dividend+1
  3642  00152A  ECA6  F011         	call	___awdiv	;wreg free
  3643  00152E  0E09               	movlw	9
  3644  001530  242B               	addwf	?___awdiv,w,c
  3645  001532  6E33               	movwf	___wmul@multiplier,c
  3646  001534  0E00               	movlw	0
  3647  001536  202C               	addwfc	?___awdiv+1,w,c
  3648  001538  6E34               	movwf	___wmul@multiplier+1,c
  3649  00153A  EC4B  F013         	call	___wmul	;wreg free
  3650  00153E  0E29               	movlw	low __powers_
  3651  001540  2433               	addwf	?___wmul,w,c
  3652  001542  6EF6               	movwf	tblptrl,c
  3653  001544  0E06               	movlw	high __powers_
  3654  001546  2034               	addwfc	?___wmul+1,w,c
  3655  001548  6EF7               	movwf	tblptrh,c
  3656  00154A                     	if	0	;There are less than 3 active tblptr bytes
  3657  00154A                     	endif
  3658  00154A  0009               	tblrd		*+
  3659  00154C  CFF5 F03C          	movff	tablat,___ftmul@f2
  3660  001550  0009               	tblrd		*+
  3661  001552  CFF5 F03D          	movff	tablat,___ftmul@f2+1
  3662  001556  000A               	tblrd		*-
  3663  001558  CFF5 F03E          	movff	tablat,___ftmul@f2+2
  3664  00155C  0E00               	movlw	0
  3665  00155E  6E2E               	movwf	___awdiv@divisor+1,c
  3666  001560  0E64               	movlw	100
  3667  001562  6E2D               	movwf	___awdiv@divisor,c
  3668  001564  504E               	movf	scale@scl,w,c
  3669  001566  6E2B               	movwf	___awdiv@dividend,c
  3670  001568  6A2C               	clrf	___awdiv@dividend+1,c
  3671  00156A  BE2B               	btfsc	___awdiv@dividend,7,c
  3672  00156C  062C               	decf	___awdiv@dividend+1,f,c
  3673  00156E  ECA6  F011         	call	___awdiv	;wreg free
  3674  001572  0E12               	movlw	18
  3675  001574  242B               	addwf	?___awdiv,w,c
  3676  001576  6E33               	movwf	___wmul@multiplier,c
  3677  001578  0E00               	movlw	0
  3678  00157A  202C               	addwfc	?___awdiv+1,w,c
  3679  00157C  6E34               	movwf	___wmul@multiplier+1,c
  3680  00157E  0E00               	movlw	0
  3681  001580  6E36               	movwf	___wmul@multiplicand+1,c
  3682  001582  0E03               	movlw	3
  3683  001584  6E35               	movwf	___wmul@multiplicand,c
  3684  001586  EC4B  F013         	call	___wmul	;wreg free
  3685  00158A  0E29               	movlw	low __powers_
  3686  00158C  2433               	addwf	?___wmul,w,c
  3687  00158E  6EF6               	movwf	tblptrl,c
  3688  001590  0E06               	movlw	high __powers_
  3689  001592  2034               	addwfc	?___wmul+1,w,c
  3690  001594  6EF7               	movwf	tblptrh,c
  3691  001596                     	if	0	;There are less than 3 active tblptr bytes
  3692  001596                     	endif
  3693  001596  0009               	tblrd		*+
  3694  001598  CFF5 F039          	movff	tablat,___ftmul@f1
  3695  00159C  0009               	tblrd		*+
  3696  00159E  CFF5 F03A          	movff	tablat,___ftmul@f1+1
  3697  0015A2  000A               	tblrd		*-
  3698  0015A4  CFF5 F03B          	movff	tablat,___ftmul@f1+2
  3699  0015A8  EC43  F010         	call	___ftmul	;wreg free
  3700  0015AC  C039  F04B         	movff	?___ftmul,_scale$1400
  3701  0015B0  C03A  F04C         	movff	?___ftmul+1,_scale$1400+1
  3702  0015B4  C03B  F04D         	movff	?___ftmul+2,_scale$1400+2
  3703                           
  3704                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3705  0015B8  C04B  F039         	movff	_scale$1400,___ftmul@f1
  3706  0015BC  C04C  F03A         	movff	_scale$1400+1,___ftmul@f1+1
  3707  0015C0  C04D  F03B         	movff	_scale$1400+2,___ftmul@f1+2
  3708  0015C4  0E00               	movlw	0
  3709  0015C6  6E36               	movwf	___wmul@multiplicand+1,c
  3710  0015C8  0E03               	movlw	3
  3711  0015CA  6E35               	movwf	___wmul@multiplicand,c
  3712  0015CC  0E00               	movlw	0
  3713  0015CE  6E28               	movwf	___awmod@divisor+1,c
  3714  0015D0  0E0A               	movlw	10
  3715  0015D2  6E27               	movwf	___awmod@divisor,c
  3716  0015D4  504E               	movf	scale@scl,w,c
  3717  0015D6  6E25               	movwf	___awmod@dividend,c
  3718  0015D8  6A26               	clrf	___awmod@dividend+1,c
  3719  0015DA  BE25               	btfsc	___awmod@dividend,7,c
  3720  0015DC  0626               	decf	___awmod@dividend+1,f,c
  3721  0015DE  EC29  F012         	call	___awmod	;wreg free
  3722  0015E2  C025  F033         	movff	?___awmod,___wmul@multiplier
  3723  0015E6  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  3724  0015EA  EC4B  F013         	call	___wmul	;wreg free
  3725  0015EE  0E29               	movlw	low __powers_
  3726  0015F0  2433               	addwf	?___wmul,w,c
  3727  0015F2  6EF6               	movwf	tblptrl,c
  3728  0015F4  0E06               	movlw	high __powers_
  3729  0015F6  2034               	addwfc	?___wmul+1,w,c
  3730  0015F8  6EF7               	movwf	tblptrh,c
  3731  0015FA                     	if	0	;There are less than 3 active tblptr bytes
  3732  0015FA                     	endif
  3733  0015FA  0009               	tblrd		*+
  3734  0015FC  CFF5 F03C          	movff	tablat,___ftmul@f2
  3735  001600  0009               	tblrd		*+
  3736  001602  CFF5 F03D          	movff	tablat,___ftmul@f2+1
  3737  001606  000A               	tblrd		*-
  3738  001608  CFF5 F03E          	movff	tablat,___ftmul@f2+2
  3739  00160C  EC43  F010         	call	___ftmul	;wreg free
  3740  001610  C039  F048         	movff	?___ftmul,?_scale
  3741  001614  C03A  F049         	movff	?___ftmul+1,?_scale+1
  3742  001618  C03B  F04A         	movff	?___ftmul+2,?_scale+2
  3743  00161C  0012               	return	
  3744  00161E                     l2207:
  3745                           
  3746                           ;doprnt.c: 438: else if(scl > 10)
  3747  00161E  504E               	movf	scale@scl,w,c
  3748  001620  0A80               	xorlw	128
  3749  001622  0F75               	addlw	-139
  3750  001624  A0D8               	btfss	status,0,c
  3751  001626  D04D               	goto	l2213
  3752                           
  3753                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3754  001628  0E00               	movlw	0
  3755  00162A  6E2E               	movwf	___awdiv@divisor+1,c
  3756  00162C  0E0A               	movlw	10
  3757  00162E  6E2D               	movwf	___awdiv@divisor,c
  3758  001630  504E               	movf	scale@scl,w,c
  3759  001632  6E2B               	movwf	___awdiv@dividend,c
  3760  001634  6A2C               	clrf	___awdiv@dividend+1,c
  3761  001636  BE2B               	btfsc	___awdiv@dividend,7,c
  3762  001638  062C               	decf	___awdiv@dividend+1,f,c
  3763  00163A  ECA6  F011         	call	___awdiv	;wreg free
  3764  00163E  0E09               	movlw	9
  3765  001640  242B               	addwf	?___awdiv,w,c
  3766  001642  6E33               	movwf	___wmul@multiplier,c
  3767  001644  0E00               	movlw	0
  3768  001646  202C               	addwfc	?___awdiv+1,w,c
  3769  001648  6E34               	movwf	___wmul@multiplier+1,c
  3770  00164A  0E00               	movlw	0
  3771  00164C  6E36               	movwf	___wmul@multiplicand+1,c
  3772  00164E  0E03               	movlw	3
  3773  001650  6E35               	movwf	___wmul@multiplicand,c
  3774  001652  EC4B  F013         	call	___wmul	;wreg free
  3775  001656  0E29               	movlw	low __powers_
  3776  001658  2433               	addwf	?___wmul,w,c
  3777  00165A  6EF6               	movwf	tblptrl,c
  3778  00165C  0E06               	movlw	high __powers_
  3779  00165E  2034               	addwfc	?___wmul+1,w,c
  3780  001660  6EF7               	movwf	tblptrh,c
  3781  001662                     	if	0	;There are less than 3 active tblptr bytes
  3782  001662                     	endif
  3783  001662  0009               	tblrd		*+
  3784  001664  CFF5 F039          	movff	tablat,___ftmul@f1
  3785  001668  0009               	tblrd		*+
  3786  00166A  CFF5 F03A          	movff	tablat,___ftmul@f1+1
  3787  00166E  000A               	tblrd		*-
  3788  001670  CFF5 F03B          	movff	tablat,___ftmul@f1+2
  3789  001674  0E00               	movlw	0
  3790  001676  6E36               	movwf	___wmul@multiplicand+1,c
  3791  001678  0E03               	movlw	3
  3792  00167A  6E35               	movwf	___wmul@multiplicand,c
  3793  00167C  0E00               	movlw	0
  3794  00167E  6E28               	movwf	___awmod@divisor+1,c
  3795  001680  0E0A               	movlw	10
  3796  001682  6E27               	movwf	___awmod@divisor,c
  3797  001684  504E               	movf	scale@scl,w,c
  3798  001686  6E25               	movwf	___awmod@dividend,c
  3799  001688  6A26               	clrf	___awmod@dividend+1,c
  3800  00168A  BE25               	btfsc	___awmod@dividend,7,c
  3801  00168C  0626               	decf	___awmod@dividend+1,f,c
  3802  00168E  EC29  F012         	call	___awmod	;wreg free
  3803  001692  C025  F033         	movff	?___awmod,___wmul@multiplier
  3804  001696  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  3805  00169A  EC4B  F013         	call	___wmul	;wreg free
  3806  00169E  0E29               	movlw	low __powers_
  3807  0016A0  2433               	addwf	?___wmul,w,c
  3808  0016A2  6EF6               	movwf	tblptrl,c
  3809  0016A4  0E06               	movlw	high __powers_
  3810  0016A6  2034               	addwfc	?___wmul+1,w,c
  3811  0016A8  6EF7               	movwf	tblptrh,c
  3812  0016AA                     	if	0	;There are less than 3 active tblptr bytes
  3813  0016AA                     	endif
  3814  0016AA  0009               	tblrd		*+
  3815  0016AC  CFF5 F03C          	movff	tablat,___ftmul@f2
  3816  0016B0  0009               	tblrd		*+
  3817  0016B2  CFF5 F03D          	movff	tablat,___ftmul@f2+1
  3818  0016B6  000A               	tblrd		*-
  3819  0016B8  CFF5 F03E          	movff	tablat,___ftmul@f2+2
  3820  0016BC  EC43  F010         	call	___ftmul	;wreg free
  3821  0016C0  D7A7               	goto	L4
  3822  0016C2                     l2213:
  3823                           
  3824                           ;doprnt.c: 440: return _powers_[scl];
  3825  0016C2  504E               	movf	scale@scl,w,c
  3826  0016C4  0D03               	mullw	3
  3827  0016C6  0E29               	movlw	low __powers_
  3828  0016C8  24F3               	addwf	prodl,w,c
  3829  0016CA  6EF6               	movwf	tblptrl,c
  3830  0016CC  0E06               	movlw	high __powers_
  3831  0016CE  20F4               	addwfc	prodh,w,c
  3832  0016D0  6EF7               	movwf	tblptrh,c
  3833  0016D2                     	if	0	;There are less than 3 active tblptr bytes
  3834  0016D2                     	endif
  3835  0016D2  0009               	tblrd		*+
  3836  0016D4  CFF5 F048          	movff	tablat,?_scale
  3837  0016D8  0009               	tblrd		*+
  3838  0016DA  CFF5 F049          	movff	tablat,?_scale+1
  3839  0016DE  000A               	tblrd		*-
  3840  0016E0  CFF5 F04A          	movff	tablat,?_scale+2
  3841  0016E4  0012               	return	
  3842  0016E6                     __end_of_scale:
  3843                           	opt stack 0
  3844                           tblptru	equ	0xFF8
  3845                           tblptrh	equ	0xFF7
  3846                           tblptrl	equ	0xFF6
  3847                           tablat	equ	0xFF5
  3848                           prodh	equ	0xFF4
  3849                           prodl	equ	0xFF3
  3850                           intcon	equ	0xFF2
  3851                           postinc0	equ	0xFEE
  3852                           wreg	equ	0xFE8
  3853                           postdec1	equ	0xFE5
  3854                           fsr1h	equ	0xFE2
  3855                           fsr1l	equ	0xFE1
  3856                           indf2	equ	0xFDF
  3857                           postinc2	equ	0xFDE
  3858                           postdec2	equ	0xFDD
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function _isdigit *****************
  3864 ;; Defined at:
  3865 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  c               1    wreg     unsigned char 
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;  c               1   38[COMRAM] unsigned char 
  3870 ;; Return value:  Size  Location     Type
  3871 ;;		None               void
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3879 ;;      Params:         0       0       0       0       0       0       0
  3880 ;;      Locals:         2       0       0       0       0       0       0
  3881 ;;      Temps:          1       0       0       0       0       0       0
  3882 ;;      Totals:         3       0       0       0       0       0       0
  3883 ;;Total ram usage:        3 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    3
  3886 ;; This function calls:
  3887 ;;		Nothing
  3888 ;; This function is called by:
  3889 ;;		_sprintf
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	text6
  3894  002704                     __ptext6:
  3895                           	opt stack 0
  3896  002704                     _isdigit:
  3897                           	opt stack 26
  3898                           
  3899                           ;incstack = 0
  3900                           ;isdigit@c stored from wreg
  3901  002704  6E27               	movwf	isdigit@c,c
  3902  002706  0E00               	movlw	0
  3903  002708  6E26               	movwf	_isdigit$1070,c
  3904  00270A  0E3A               	movlw	58
  3905  00270C  6027               	cpfslt	isdigit@c,c
  3906  00270E  D005               	goto	l2225
  3907  002710  0E2F               	movlw	47
  3908  002712  6427               	cpfsgt	isdigit@c,c
  3909  002714  D002               	goto	l2225
  3910  002716  0E01               	movlw	1
  3911  002718  6E26               	movwf	_isdigit$1070,c
  3912  00271A                     l2225:
  3913  00271A  C026  F025         	movff	_isdigit$1070,??_isdigit
  3914  00271E  3025               	rrcf	??_isdigit,w,c
  3915  002720  0012               	return	
  3916  002722                     __end_of_isdigit:
  3917                           	opt stack 0
  3918                           tblptru	equ	0xFF8
  3919                           tblptrh	equ	0xFF7
  3920                           tblptrl	equ	0xFF6
  3921                           tablat	equ	0xFF5
  3922                           prodh	equ	0xFF4
  3923                           prodl	equ	0xFF3
  3924                           intcon	equ	0xFF2
  3925                           postinc0	equ	0xFEE
  3926                           wreg	equ	0xFE8
  3927                           postdec1	equ	0xFE5
  3928                           fsr1h	equ	0xFE2
  3929                           fsr1l	equ	0xFE1
  3930                           indf2	equ	0xFDF
  3931                           postinc2	equ	0xFDE
  3932                           postdec2	equ	0xFDD
  3933                           fsr2h	equ	0xFDA
  3934                           fsr2l	equ	0xFD9
  3935                           status	equ	0xFD8
  3936                           
  3937 ;; *************** function _fround *****************
  3938 ;; Defined at:
  3939 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  prec            1    wreg     unsigned char 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;  prec            1   80[COMRAM] unsigned char 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  3   71[COMRAM] unsigned char 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3953 ;;      Params:         3       0       0       0       0       0       0
  3954 ;;      Locals:         7       0       0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0
  3956 ;;      Totals:        10       0       0       0       0       0       0
  3957 ;;Total ram usage:       10 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    5
  3960 ;; This function calls:
  3961 ;;		___awdiv
  3962 ;;		___awmod
  3963 ;;		___ftmul
  3964 ;;		___wmul
  3965 ;; This function is called by:
  3966 ;;		_sprintf
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text7
  3971  00194E                     __ptext7:
  3972                           	opt stack 0
  3973  00194E                     _fround:
  3974                           	opt stack 24
  3975                           
  3976                           ;incstack = 0
  3977                           ;fround@prec stored from wreg
  3978  00194E  6E51               	movwf	fround@prec,c
  3979                           
  3980                           ;doprnt.c: 413: if(prec>=110)
  3981  001950  0E6D               	movlw	109
  3982  001952  6451               	cpfsgt	fround@prec,c
  3983  001954  D09F               	goto	l2167
  3984                           
  3985                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3986  001956  0E00               	movlw	0
  3987  001958  6E36               	movwf	___wmul@multiplicand+1,c
  3988  00195A  0E03               	movlw	3
  3989  00195C  6E35               	movwf	___wmul@multiplicand,c
  3990  00195E  0E00               	movlw	0
  3991  001960  6E2E               	movwf	___awdiv@divisor+1,c
  3992  001962  0E0A               	movlw	10
  3993  001964  6E2D               	movwf	___awdiv@divisor,c
  3994  001966  0E00               	movlw	0
  3995  001968  6E28               	movwf	___awmod@divisor+1,c
  3996  00196A  0E64               	movlw	100
  3997  00196C  6E27               	movwf	___awmod@divisor,c
  3998  00196E  C051  F025         	movff	fround@prec,___awmod@dividend
  3999  001972  6A26               	clrf	___awmod@dividend+1,c
  4000  001974  EC29  F012         	call	___awmod	;wreg free
  4001  001978  C025  F02B         	movff	?___awmod,___awdiv@dividend
  4002  00197C  C026  F02C         	movff	?___awmod+1,___awdiv@dividend+1
  4003  001980  ECA6  F011         	call	___awdiv	;wreg free
  4004  001984  0E09               	movlw	9
  4005  001986  242B               	addwf	?___awdiv,w,c
  4006  001988  6E33               	movwf	___wmul@multiplier,c
  4007  00198A  0E00               	movlw	0
  4008  00198C  202C               	addwfc	?___awdiv+1,w,c
  4009  00198E  6E34               	movwf	___wmul@multiplier+1,c
  4010  001990  EC4B  F013         	call	___wmul	;wreg free
  4011  001994  0E50               	movlw	low __npowers_
  4012  001996  2433               	addwf	?___wmul,w,c
  4013  001998  6EF6               	movwf	tblptrl,c
  4014  00199A  0E06               	movlw	high __npowers_
  4015  00199C  2034               	addwfc	?___wmul+1,w,c
  4016  00199E  6EF7               	movwf	tblptrh,c
  4017  0019A0                     	if	0	;There are less than 3 active tblptr bytes
  4018  0019A0                     	endif
  4019  0019A0  0009               	tblrd		*+
  4020  0019A2  CFF5 F03C          	movff	tablat,___ftmul@f2
  4021  0019A6  0009               	tblrd		*+
  4022  0019A8  CFF5 F03D          	movff	tablat,___ftmul@f2+1
  4023  0019AC  000A               	tblrd		*-
  4024  0019AE  CFF5 F03E          	movff	tablat,___ftmul@f2+2
  4025  0019B2  0E00               	movlw	0
  4026  0019B4  6E2E               	movwf	___awdiv@divisor+1,c
  4027  0019B6  0E64               	movlw	100
  4028  0019B8  6E2D               	movwf	___awdiv@divisor,c
  4029  0019BA  C051  F02B         	movff	fround@prec,___awdiv@dividend
  4030  0019BE  6A2C               	clrf	___awdiv@dividend+1,c
  4031  0019C0  ECA6  F011         	call	___awdiv	;wreg free
  4032  0019C4  0E12               	movlw	18
  4033  0019C6  242B               	addwf	?___awdiv,w,c
  4034  0019C8  6E33               	movwf	___wmul@multiplier,c
  4035  0019CA  0E00               	movlw	0
  4036  0019CC  202C               	addwfc	?___awdiv+1,w,c
  4037  0019CE  6E34               	movwf	___wmul@multiplier+1,c
  4038  0019D0  0E00               	movlw	0
  4039  0019D2  6E36               	movwf	___wmul@multiplicand+1,c
  4040  0019D4  0E03               	movlw	3
  4041  0019D6  6E35               	movwf	___wmul@multiplicand,c
  4042  0019D8  EC4B  F013         	call	___wmul	;wreg free
  4043  0019DC  0E50               	movlw	low __npowers_
  4044  0019DE  2433               	addwf	?___wmul,w,c
  4045  0019E0  6EF6               	movwf	tblptrl,c
  4046  0019E2  0E06               	movlw	high __npowers_
  4047  0019E4  2034               	addwfc	?___wmul+1,w,c
  4048  0019E6  6EF7               	movwf	tblptrh,c
  4049  0019E8                     	if	0	;There are less than 3 active tblptr bytes
  4050  0019E8                     	endif
  4051  0019E8  0009               	tblrd		*+
  4052  0019EA  CFF5 F039          	movff	tablat,___ftmul@f1
  4053  0019EE  0009               	tblrd		*+
  4054  0019F0  CFF5 F03A          	movff	tablat,___ftmul@f1+1
  4055  0019F4  000A               	tblrd		*-
  4056  0019F6  CFF5 F03B          	movff	tablat,___ftmul@f1+2
  4057  0019FA  EC43  F010         	call	___ftmul	;wreg free
  4058  0019FE  C039  F04E         	movff	?___ftmul,_fround$1398
  4059  001A02  C03A  F04F         	movff	?___ftmul+1,_fround$1398+1
  4060  001A06  C03B  F050         	movff	?___ftmul+2,_fround$1398+2
  4061                           
  4062                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4063  001A0A  0E00               	movlw	0
  4064  001A0C  6E36               	movwf	___wmul@multiplicand+1,c
  4065  001A0E  0E03               	movlw	3
  4066  001A10  6E35               	movwf	___wmul@multiplicand,c
  4067  001A12  0E00               	movlw	0
  4068  001A14  6E28               	movwf	___awmod@divisor+1,c
  4069  001A16  0E0A               	movlw	10
  4070  001A18  6E27               	movwf	___awmod@divisor,c
  4071  001A1A  C051  F025         	movff	fround@prec,___awmod@dividend
  4072  001A1E  6A26               	clrf	___awmod@dividend+1,c
  4073  001A20  EC29  F012         	call	___awmod	;wreg free
  4074  001A24  C025  F033         	movff	?___awmod,___wmul@multiplier
  4075  001A28  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  4076  001A2C  EC4B  F013         	call	___wmul	;wreg free
  4077  001A30  0E50               	movlw	low __npowers_
  4078  001A32  2433               	addwf	?___wmul,w,c
  4079  001A34  6EF6               	movwf	tblptrl,c
  4080  001A36  0E06               	movlw	high __npowers_
  4081  001A38  2034               	addwfc	?___wmul+1,w,c
  4082  001A3A  6EF7               	movwf	tblptrh,c
  4083  001A3C                     	if	0	;There are less than 3 active tblptr bytes
  4084  001A3C                     	endif
  4085  001A3C  0009               	tblrd		*+
  4086  001A3E  CFF5 F03C          	movff	tablat,___ftmul@f2
  4087  001A42  0009               	tblrd		*+
  4088  001A44  CFF5 F03D          	movff	tablat,___ftmul@f2+1
  4089  001A48  000A               	tblrd		*-
  4090  001A4A  CFF5 F03E          	movff	tablat,___ftmul@f2+2
  4091  001A4E  C04E  F039         	movff	_fround$1398,___ftmul@f1
  4092  001A52  C04F  F03A         	movff	_fround$1398+1,___ftmul@f1+1
  4093  001A56  C050  F03B         	movff	_fround$1398+2,___ftmul@f1+2
  4094  001A5A  EC43  F010         	call	___ftmul	;wreg free
  4095  001A5E  C039  F04B         	movff	?___ftmul,_fround$1399
  4096  001A62  C03A  F04C         	movff	?___ftmul+1,_fround$1399+1
  4097  001A66  C03B  F04D         	movff	?___ftmul+2,_fround$1399+2
  4098                           
  4099                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4100  001A6A  C04B  F039         	movff	_fround$1399,___ftmul@f1
  4101  001A6E  C04C  F03A         	movff	_fround$1399+1,___ftmul@f1+1
  4102  001A72  C04D  F03B         	movff	_fround$1399+2,___ftmul@f1+2
  4103  001A76  0E00               	movlw	0
  4104  001A78  6E3C               	movwf	___ftmul@f2,c
  4105  001A7A  0E00               	movlw	0
  4106  001A7C  6E3D               	movwf	___ftmul@f2+1,c
  4107  001A7E  0E3F               	movlw	63
  4108  001A80  6E3E               	movwf	___ftmul@f2+2,c
  4109  001A82  EC43  F010         	call	___ftmul	;wreg free
  4110  001A86  C039  F048         	movff	?___ftmul,?_fround
  4111  001A8A  C03A  F049         	movff	?___ftmul+1,?_fround+1
  4112  001A8E  C03B  F04A         	movff	?___ftmul+2,?_fround+2
  4113  001A92  0012               	return	
  4114  001A94                     l2167:
  4115                           
  4116                           ;doprnt.c: 415: else if(prec > 10)
  4117  001A94  0E0A               	movlw	10
  4118  001A96  6451               	cpfsgt	fround@prec,c
  4119  001A98  D05D               	goto	l2175
  4120                           
  4121                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4122  001A9A  0E00               	movlw	0
  4123  001A9C  6E36               	movwf	___wmul@multiplicand+1,c
  4124  001A9E  0E03               	movlw	3
  4125  001AA0  6E35               	movwf	___wmul@multiplicand,c
  4126  001AA2  0E00               	movlw	0
  4127  001AA4  6E28               	movwf	___awmod@divisor+1,c
  4128  001AA6  0E0A               	movlw	10
  4129  001AA8  6E27               	movwf	___awmod@divisor,c
  4130  001AAA  C051  F025         	movff	fround@prec,___awmod@dividend
  4131  001AAE  6A26               	clrf	___awmod@dividend+1,c
  4132  001AB0  EC29  F012         	call	___awmod	;wreg free
  4133  001AB4  C025  F033         	movff	?___awmod,___wmul@multiplier
  4134  001AB8  C026  F034         	movff	?___awmod+1,___wmul@multiplier+1
  4135  001ABC  EC4B  F013         	call	___wmul	;wreg free
  4136  001AC0  0E50               	movlw	low __npowers_
  4137  001AC2  2433               	addwf	?___wmul,w,c
  4138  001AC4  6EF6               	movwf	tblptrl,c
  4139  001AC6  0E06               	movlw	high __npowers_
  4140  001AC8  2034               	addwfc	?___wmul+1,w,c
  4141  001ACA  6EF7               	movwf	tblptrh,c
  4142  001ACC                     	if	0	;There are less than 3 active tblptr bytes
  4143  001ACC                     	endif
  4144  001ACC  0009               	tblrd		*+
  4145  001ACE  CFF5 F03C          	movff	tablat,___ftmul@f2
  4146  001AD2  0009               	tblrd		*+
  4147  001AD4  CFF5 F03D          	movff	tablat,___ftmul@f2+1
  4148  001AD8  000A               	tblrd		*-
  4149  001ADA  CFF5 F03E          	movff	tablat,___ftmul@f2+2
  4150  001ADE  0E00               	movlw	0
  4151  001AE0  6E2E               	movwf	___awdiv@divisor+1,c
  4152  001AE2  0E0A               	movlw	10
  4153  001AE4  6E2D               	movwf	___awdiv@divisor,c
  4154  001AE6  C051  F02B         	movff	fround@prec,___awdiv@dividend
  4155  001AEA  6A2C               	clrf	___awdiv@dividend+1,c
  4156  001AEC  ECA6  F011         	call	___awdiv	;wreg free
  4157  001AF0  0E09               	movlw	9
  4158  001AF2  242B               	addwf	?___awdiv,w,c
  4159  001AF4  6E33               	movwf	___wmul@multiplier,c
  4160  001AF6  0E00               	movlw	0
  4161  001AF8  202C               	addwfc	?___awdiv+1,w,c
  4162  001AFA  6E34               	movwf	___wmul@multiplier+1,c
  4163  001AFC  0E00               	movlw	0
  4164  001AFE  6E36               	movwf	___wmul@multiplicand+1,c
  4165  001B00  0E03               	movlw	3
  4166  001B02  6E35               	movwf	___wmul@multiplicand,c
  4167  001B04  EC4B  F013         	call	___wmul	;wreg free
  4168  001B08  0E50               	movlw	low __npowers_
  4169  001B0A  2433               	addwf	?___wmul,w,c
  4170  001B0C  6EF6               	movwf	tblptrl,c
  4171  001B0E  0E06               	movlw	high __npowers_
  4172  001B10  2034               	addwfc	?___wmul+1,w,c
  4173  001B12  6EF7               	movwf	tblptrh,c
  4174  001B14                     	if	0	;There are less than 3 active tblptr bytes
  4175  001B14                     	endif
  4176  001B14  0009               	tblrd		*+
  4177  001B16  CFF5 F039          	movff	tablat,___ftmul@f1
  4178  001B1A  0009               	tblrd		*+
  4179  001B1C  CFF5 F03A          	movff	tablat,___ftmul@f1+1
  4180  001B20  000A               	tblrd		*-
  4181  001B22  CFF5 F03B          	movff	tablat,___ftmul@f1+2
  4182  001B26  EC43  F010         	call	___ftmul	;wreg free
  4183  001B2A  C039  F04E         	movff	?___ftmul,_fround$1398
  4184  001B2E  C03A  F04F         	movff	?___ftmul+1,_fround$1398+1
  4185  001B32  C03B  F050         	movff	?___ftmul+2,_fround$1398+2
  4186                           
  4187                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4188  001B36  C04E  F039         	movff	_fround$1398,___ftmul@f1
  4189  001B3A  C04F  F03A         	movff	_fround$1398+1,___ftmul@f1+1
  4190  001B3E  C050  F03B         	movff	_fround$1398+2,___ftmul@f1+2
  4191  001B42  0E00               	movlw	0
  4192  001B44  6E3C               	movwf	___ftmul@f2,c
  4193  001B46  0E00               	movlw	0
  4194  001B48  6E3D               	movwf	___ftmul@f2+1,c
  4195  001B4A  0E3F               	movlw	63
  4196  001B4C  6E3E               	movwf	___ftmul@f2+2,c
  4197  001B4E  EC43  F010         	call	___ftmul	;wreg free
  4198  001B52  D799               	goto	L5
  4199  001B54                     l2175:
  4200                           
  4201                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4202  001B54  5051               	movf	fround@prec,w,c
  4203  001B56  0D03               	mullw	3
  4204  001B58  0E50               	movlw	low __npowers_
  4205  001B5A  24F3               	addwf	prodl,w,c
  4206  001B5C  6EF6               	movwf	tblptrl,c
  4207  001B5E  0E06               	movlw	high __npowers_
  4208  001B60  20F4               	addwfc	prodh,w,c
  4209  001B62  6EF7               	movwf	tblptrh,c
  4210  001B64                     	if	0	;There are less than 3 active tblptr bytes
  4211  001B64                     	endif
  4212  001B64  0009               	tblrd		*+
  4213  001B66  CFF5 F039          	movff	tablat,___ftmul@f1
  4214  001B6A  0009               	tblrd		*+
  4215  001B6C  CFF5 F03A          	movff	tablat,___ftmul@f1+1
  4216  001B70  000A               	tblrd		*-
  4217  001B72  CFF5 F03B          	movff	tablat,___ftmul@f1+2
  4218  001B76  0E00               	movlw	0
  4219  001B78  6E3C               	movwf	___ftmul@f2,c
  4220  001B7A  0E00               	movlw	0
  4221  001B7C  6E3D               	movwf	___ftmul@f2+1,c
  4222  001B7E  0E3F               	movlw	63
  4223  001B80  6E3E               	movwf	___ftmul@f2+2,c
  4224  001B82  EC43  F010         	call	___ftmul	;wreg free
  4225  001B86  C039  F048         	movff	?___ftmul,?_fround
  4226  001B8A  C03A  F049         	movff	?___ftmul+1,?_fround+1
  4227  001B8E  C03B  F04A         	movff	?___ftmul+2,?_fround+2
  4228  001B92  0012               	return	
  4229  001B94                     __end_of_fround:
  4230                           	opt stack 0
  4231                           tblptru	equ	0xFF8
  4232                           tblptrh	equ	0xFF7
  4233                           tblptrl	equ	0xFF6
  4234                           tablat	equ	0xFF5
  4235                           prodh	equ	0xFF4
  4236                           prodl	equ	0xFF3
  4237                           intcon	equ	0xFF2
  4238                           postinc0	equ	0xFEE
  4239                           wreg	equ	0xFE8
  4240                           postdec1	equ	0xFE5
  4241                           fsr1h	equ	0xFE2
  4242                           fsr1l	equ	0xFE1
  4243                           indf2	equ	0xFDF
  4244                           postinc2	equ	0xFDE
  4245                           postdec2	equ	0xFDD
  4246                           fsr2h	equ	0xFDA
  4247                           fsr2l	equ	0xFD9
  4248                           status	equ	0xFD8
  4249                           
  4250 ;; *************** function ___wmul *****************
  4251 ;; Defined at:
  4252 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  4253 ;; Parameters:    Size  Location     Type
  4254 ;;  multiplier      2   50[COMRAM] unsigned int 
  4255 ;;  multiplicand    2   52[COMRAM] unsigned int 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;  product         2   54[COMRAM] unsigned int 
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  2   50[COMRAM] unsigned int 
  4260 ;; Registers used:
  4261 ;;		wreg, status,2, status,0, prodl, prodh
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4267 ;;      Params:         4       0       0       0       0       0       0
  4268 ;;      Locals:         2       0       0       0       0       0       0
  4269 ;;      Temps:          0       0       0       0       0       0       0
  4270 ;;      Totals:         6       0       0       0       0       0       0
  4271 ;;Total ram usage:        6 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; Hardware stack levels required when called:    3
  4274 ;; This function calls:
  4275 ;;		Nothing
  4276 ;; This function is called by:
  4277 ;;		_fround
  4278 ;;		_scale
  4279 ;;		_sprintf
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           	psect	text8
  4284  002696                     __ptext8:
  4285                           	opt stack 0
  4286  002696                     ___wmul:
  4287                           	opt stack 25
  4288                           
  4289                           ;incstack = 0
  4290  002696  5033               	movf	___wmul@multiplier,w,c
  4291  002698  0235               	mulwf	___wmul@multiplicand,c
  4292  00269A  CFF3 F037          	movff	prodl,___wmul@product
  4293  00269E  CFF4 F038          	movff	prodh,___wmul@product+1
  4294  0026A2  5033               	movf	___wmul@multiplier,w,c
  4295  0026A4  0236               	mulwf	___wmul@multiplicand+1,c
  4296  0026A6  50F3               	movf	prodl,w,c
  4297  0026A8  2638               	addwf	___wmul@product+1,f,c
  4298  0026AA  5034               	movf	___wmul@multiplier+1,w,c
  4299  0026AC  0235               	mulwf	___wmul@multiplicand,c
  4300  0026AE  50F3               	movf	prodl,w,c
  4301  0026B0  2638               	addwf	___wmul@product+1,f,c
  4302  0026B2  C037  F033         	movff	___wmul@product,?___wmul
  4303  0026B6  C038  F034         	movff	___wmul@product+1,?___wmul+1
  4304  0026BA  0012               	return	
  4305  0026BC                     __end_of___wmul:
  4306                           	opt stack 0
  4307                           tblptru	equ	0xFF8
  4308                           tblptrh	equ	0xFF7
  4309                           tblptrl	equ	0xFF6
  4310                           tablat	equ	0xFF5
  4311                           prodh	equ	0xFF4
  4312                           prodl	equ	0xFF3
  4313                           intcon	equ	0xFF2
  4314                           postinc0	equ	0xFEE
  4315                           wreg	equ	0xFE8
  4316                           postdec1	equ	0xFE5
  4317                           fsr1h	equ	0xFE2
  4318                           fsr1l	equ	0xFE1
  4319                           indf2	equ	0xFDF
  4320                           postinc2	equ	0xFDE
  4321                           postdec2	equ	0xFDD
  4322                           fsr2h	equ	0xFDA
  4323                           fsr2l	equ	0xFD9
  4324                           status	equ	0xFD8
  4325                           
  4326 ;; *************** function ___ftmul *****************
  4327 ;; Defined at:
  4328 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;  f1              3   56[COMRAM] float 
  4331 ;;  f2              3   59[COMRAM] float 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  f3_as_produc    3   66[COMRAM] unsigned um
  4334 ;;  sign            1   70[COMRAM] unsigned char 
  4335 ;;  cntr            1   69[COMRAM] unsigned char 
  4336 ;;  exp             1   65[COMRAM] unsigned char 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  3   56[COMRAM] float 
  4339 ;; Registers used:
  4340 ;;		wreg, status,2, status,0, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4346 ;;      Params:         6       0       0       0       0       0       0
  4347 ;;      Locals:         6       0       0       0       0       0       0
  4348 ;;      Temps:          3       0       0       0       0       0       0
  4349 ;;      Totals:        15       0       0       0       0       0       0
  4350 ;;Total ram usage:       15 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; Hardware stack levels required when called:    4
  4353 ;; This function calls:
  4354 ;;		___ftpack
  4355 ;; This function is called by:
  4356 ;;		_main
  4357 ;;		_fround
  4358 ;;		_scale
  4359 ;;		_sprintf
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text9
  4364  002086                     __ptext9:
  4365                           	opt stack 0
  4366  002086                     ___ftmul:
  4367                           	opt stack 24
  4368                           
  4369                           ;incstack = 0
  4370  002086  C03B  F03F         	movff	___ftmul@f1+2,??___ftmul
  4371  00208A  6A40               	clrf	(??___ftmul+1)& (0+255),c
  4372  00208C  6A41               	clrf	(??___ftmul+2)& (0+255),c
  4373  00208E  343A               	rlcf	___ftmul@f1+1,w,c
  4374  002090  363F               	rlcf	??___ftmul& (0+255),f,c
  4375  002092  E301               	bnc	u1901
  4376  002094  8040               	bsf	(??___ftmul+1)& (0+255),0,c
  4377  002096                     u1901:
  4378  002096  503F               	movf	??___ftmul,w,c
  4379  002098  6E42               	movwf	___ftmul@exp,c
  4380  00209A  5042               	movf	___ftmul@exp,w,c
  4381  00209C  A4D8               	btfss	status,2,c
  4382  00209E  D007               	goto	l2033
  4383  0020A0  0E00               	movlw	0
  4384  0020A2  6E39               	movwf	?___ftmul,c
  4385  0020A4  0E00               	movlw	0
  4386  0020A6  6E3A               	movwf	?___ftmul+1,c
  4387  0020A8  0E00               	movlw	0
  4388  0020AA  6E3B               	movwf	?___ftmul+2,c
  4389  0020AC  0012               	return	
  4390  0020AE                     l2033:
  4391  0020AE  C03E  F03F         	movff	___ftmul@f2+2,??___ftmul
  4392  0020B2  6A40               	clrf	(??___ftmul+1)& (0+255),c
  4393  0020B4  6A41               	clrf	(??___ftmul+2)& (0+255),c
  4394  0020B6  343D               	rlcf	___ftmul@f2+1,w,c
  4395  0020B8  363F               	rlcf	??___ftmul& (0+255),f,c
  4396  0020BA  E301               	bnc	u1921
  4397  0020BC  8040               	bsf	(??___ftmul+1)& (0+255),0,c
  4398  0020BE                     u1921:
  4399  0020BE  503F               	movf	??___ftmul,w,c
  4400  0020C0  6E47               	movwf	___ftmul@sign,c
  4401  0020C2  5047               	movf	___ftmul@sign,w,c
  4402  0020C4  A4D8               	btfss	status,2,c
  4403  0020C6  D007               	goto	l2039
  4404  0020C8  0E00               	movlw	0
  4405  0020CA  6E39               	movwf	?___ftmul,c
  4406  0020CC  0E00               	movlw	0
  4407  0020CE  6E3A               	movwf	?___ftmul+1,c
  4408  0020D0  0E00               	movlw	0
  4409  0020D2  6E3B               	movwf	?___ftmul+2,c
  4410  0020D4  0012               	return	
  4411  0020D6                     l2039:
  4412  0020D6  5047               	movf	___ftmul@sign,w,c
  4413  0020D8  0F7B               	addlw	123
  4414  0020DA  2642               	addwf	___ftmul@exp,f,c
  4415  0020DC  C03B  F047         	movff	___ftmul@f1+2,___ftmul@sign
  4416  0020E0  503E               	movf	___ftmul@f2+2,w,c
  4417  0020E2  1A47               	xorwf	___ftmul@sign,f,c
  4418  0020E4  0E80               	movlw	128
  4419  0020E6  1647               	andwf	___ftmul@sign,f,c
  4420  0020E8  8E3A               	bsf	___ftmul@f1+1,7,c
  4421  0020EA  8E3D               	bsf	___ftmul@f2+1,7,c
  4422  0020EC  0EFF               	movlw	255
  4423  0020EE  163C               	andwf	___ftmul@f2,f,c
  4424  0020F0  0EFF               	movlw	255
  4425  0020F2  163D               	andwf	___ftmul@f2+1,f,c
  4426  0020F4  0E00               	movlw	0
  4427  0020F6  163E               	andwf	___ftmul@f2+2,f,c
  4428  0020F8  0E00               	movlw	0
  4429  0020FA  6E43               	movwf	___ftmul@f3_as_product,c
  4430  0020FC  0E00               	movlw	0
  4431  0020FE  6E44               	movwf	___ftmul@f3_as_product+1,c
  4432  002100  0E00               	movlw	0
  4433  002102  6E45               	movwf	___ftmul@f3_as_product+2,c
  4434  002104  0E07               	movlw	7
  4435  002106  6E46               	movwf	___ftmul@cntr,c
  4436  002108                     l2053:
  4437  002108  A039               	btfss	___ftmul@f1,0,c
  4438  00210A  D006               	goto	l2057
  4439  00210C  503C               	movf	___ftmul@f2,w,c
  4440  00210E  2643               	addwf	___ftmul@f3_as_product,f,c
  4441  002110  503D               	movf	___ftmul@f2+1,w,c
  4442  002112  2244               	addwfc	___ftmul@f3_as_product+1,f,c
  4443  002114  503E               	movf	___ftmul@f2+2,w,c
  4444  002116  2245               	addwfc	___ftmul@f3_as_product+2,f,c
  4445  002118                     l2057:
  4446  002118  90D8               	bcf	status,0,c
  4447  00211A  323B               	rrcf	___ftmul@f1+2,f,c
  4448  00211C  323A               	rrcf	___ftmul@f1+1,f,c
  4449  00211E  3239               	rrcf	___ftmul@f1,f,c
  4450  002120  90D8               	bcf	status,0,c
  4451  002122  363C               	rlcf	___ftmul@f2,f,c
  4452  002124  363D               	rlcf	___ftmul@f2+1,f,c
  4453  002126  363E               	rlcf	___ftmul@f2+2,f,c
  4454  002128  2E46               	decfsz	___ftmul@cntr,f,c
  4455  00212A  D7EE               	goto	l2053
  4456  00212C  0E09               	movlw	9
  4457  00212E  6E46               	movwf	___ftmul@cntr,c
  4458  002130                     l2063:
  4459  002130  A039               	btfss	___ftmul@f1,0,c
  4460  002132  D006               	goto	l2067
  4461  002134  503C               	movf	___ftmul@f2,w,c
  4462  002136  2643               	addwf	___ftmul@f3_as_product,f,c
  4463  002138  503D               	movf	___ftmul@f2+1,w,c
  4464  00213A  2244               	addwfc	___ftmul@f3_as_product+1,f,c
  4465  00213C  503E               	movf	___ftmul@f2+2,w,c
  4466  00213E  2245               	addwfc	___ftmul@f3_as_product+2,f,c
  4467  002140                     l2067:
  4468  002140  90D8               	bcf	status,0,c
  4469  002142  323B               	rrcf	___ftmul@f1+2,f,c
  4470  002144  323A               	rrcf	___ftmul@f1+1,f,c
  4471  002146  3239               	rrcf	___ftmul@f1,f,c
  4472  002148  90D8               	bcf	status,0,c
  4473  00214A  3245               	rrcf	___ftmul@f3_as_product+2,f,c
  4474  00214C  3244               	rrcf	___ftmul@f3_as_product+1,f,c
  4475  00214E  3243               	rrcf	___ftmul@f3_as_product,f,c
  4476  002150  2E46               	decfsz	___ftmul@cntr,f,c
  4477  002152  D7EE               	goto	l2063
  4478  002154  C043  F025         	movff	___ftmul@f3_as_product,___ftpack@arg
  4479  002158  C044  F026         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4480  00215C  C045  F027         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4481  002160  C042  F028         	movff	___ftmul@exp,___ftpack@exp
  4482  002164  C047  F029         	movff	___ftmul@sign,___ftpack@sign
  4483  002168  ECBD  F010         	call	___ftpack	;wreg free
  4484  00216C  C025  F039         	movff	?___ftpack,?___ftmul
  4485  002170  C026  F03A         	movff	?___ftpack+1,?___ftmul+1
  4486  002174  C027  F03B         	movff	?___ftpack+2,?___ftmul+2
  4487  002178  0012               	return	
  4488  00217A                     __end_of___ftmul:
  4489                           	opt stack 0
  4490                           tblptru	equ	0xFF8
  4491                           tblptrh	equ	0xFF7
  4492                           tblptrl	equ	0xFF6
  4493                           tablat	equ	0xFF5
  4494                           prodh	equ	0xFF4
  4495                           prodl	equ	0xFF3
  4496                           intcon	equ	0xFF2
  4497                           postinc0	equ	0xFEE
  4498                           wreg	equ	0xFE8
  4499                           postdec1	equ	0xFE5
  4500                           fsr1h	equ	0xFE2
  4501                           fsr1l	equ	0xFE1
  4502                           indf2	equ	0xFDF
  4503                           postinc2	equ	0xFDE
  4504                           postdec2	equ	0xFDD
  4505                           fsr2h	equ	0xFDA
  4506                           fsr2l	equ	0xFD9
  4507                           status	equ	0xFD8
  4508                           
  4509 ;; *************** function ___awmod *****************
  4510 ;; Defined at:
  4511 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;  dividend        2   36[COMRAM] int 
  4514 ;;  divisor         2   38[COMRAM] int 
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;  sign            1   41[COMRAM] unsigned char 
  4517 ;;  counter         1   40[COMRAM] unsigned char 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  2   36[COMRAM] int 
  4520 ;; Registers used:
  4521 ;;		wreg, status,2, status,0
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4527 ;;      Params:         4       0       0       0       0       0       0
  4528 ;;      Locals:         2       0       0       0       0       0       0
  4529 ;;      Temps:          0       0       0       0       0       0       0
  4530 ;;      Totals:         6       0       0       0       0       0       0
  4531 ;;Total ram usage:        6 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    3
  4534 ;; This function calls:
  4535 ;;		Nothing
  4536 ;; This function is called by:
  4537 ;;		_fround
  4538 ;;		_scale
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           	psect	text10
  4543  002452                     __ptext10:
  4544                           	opt stack 0
  4545  002452                     ___awmod:
  4546                           	opt stack 25
  4547                           
  4548                           ;incstack = 0
  4549  002452  0E00               	movlw	0
  4550  002454  6E2A               	movwf	___awmod@sign,c
  4551  002456  AE26               	btfss	___awmod@dividend+1,7,c
  4552  002458  D006               	goto	l2127
  4553  00245A  6C25               	negf	___awmod@dividend,c
  4554  00245C  1E26               	comf	___awmod@dividend+1,f,c
  4555  00245E  B0D8               	btfsc	status,0,c
  4556  002460  2A26               	incf	___awmod@dividend+1,f,c
  4557  002462  0E01               	movlw	1
  4558  002464  6E2A               	movwf	___awmod@sign,c
  4559  002466                     l2127:
  4560  002466  AE28               	btfss	___awmod@divisor+1,7,c
  4561  002468  D004               	goto	l2131
  4562  00246A  6C27               	negf	___awmod@divisor,c
  4563  00246C  1E28               	comf	___awmod@divisor+1,f,c
  4564  00246E  B0D8               	btfsc	status,0,c
  4565  002470  2A28               	incf	___awmod@divisor+1,f,c
  4566  002472                     l2131:
  4567  002472  5027               	movf	___awmod@divisor,w,c
  4568  002474  1028               	iorwf	___awmod@divisor+1,w,c
  4569  002476  B4D8               	btfsc	status,2,c
  4570  002478  D018               	goto	l2147
  4571  00247A  0E01               	movlw	1
  4572  00247C  6E29               	movwf	___awmod@counter,c
  4573  00247E  D004               	goto	l2137
  4574  002480                     l2135:
  4575  002480  90D8               	bcf	status,0,c
  4576  002482  3627               	rlcf	___awmod@divisor,f,c
  4577  002484  3628               	rlcf	___awmod@divisor+1,f,c
  4578  002486  2A29               	incf	___awmod@counter,f,c
  4579  002488                     l2137:
  4580  002488  AE28               	btfss	___awmod@divisor+1,7,c
  4581  00248A  D7FA               	goto	l2135
  4582  00248C                     l2139:
  4583  00248C  5027               	movf	___awmod@divisor,w,c
  4584  00248E  5C25               	subwf	___awmod@dividend,w,c
  4585  002490  5028               	movf	___awmod@divisor+1,w,c
  4586  002492  5826               	subwfb	___awmod@dividend+1,w,c
  4587  002494  A0D8               	btfss	status,0,c
  4588  002496  D004               	goto	l2143
  4589  002498  5027               	movf	___awmod@divisor,w,c
  4590  00249A  5E25               	subwf	___awmod@dividend,f,c
  4591  00249C  5028               	movf	___awmod@divisor+1,w,c
  4592  00249E  5A26               	subwfb	___awmod@dividend+1,f,c
  4593  0024A0                     l2143:
  4594  0024A0  90D8               	bcf	status,0,c
  4595  0024A2  3228               	rrcf	___awmod@divisor+1,f,c
  4596  0024A4  3227               	rrcf	___awmod@divisor,f,c
  4597  0024A6  2E29               	decfsz	___awmod@counter,f,c
  4598  0024A8  D7F1               	goto	l2139
  4599  0024AA                     l2147:
  4600  0024AA  502A               	movf	___awmod@sign,w,c
  4601  0024AC  B4D8               	btfsc	status,2,c
  4602  0024AE  D004               	goto	l2151
  4603  0024B0  6C25               	negf	___awmod@dividend,c
  4604  0024B2  1E26               	comf	___awmod@dividend+1,f,c
  4605  0024B4  B0D8               	btfsc	status,0,c
  4606  0024B6  2A26               	incf	___awmod@dividend+1,f,c
  4607  0024B8                     l2151:
  4608  0024B8  C025  F025         	movff	___awmod@dividend,?___awmod
  4609  0024BC  C026  F026         	movff	___awmod@dividend+1,?___awmod+1
  4610  0024C0  0012               	return	
  4611  0024C2                     __end_of___awmod:
  4612                           	opt stack 0
  4613                           tblptru	equ	0xFF8
  4614                           tblptrh	equ	0xFF7
  4615                           tblptrl	equ	0xFF6
  4616                           tablat	equ	0xFF5
  4617                           prodh	equ	0xFF4
  4618                           prodl	equ	0xFF3
  4619                           intcon	equ	0xFF2
  4620                           postinc0	equ	0xFEE
  4621                           wreg	equ	0xFE8
  4622                           postdec1	equ	0xFE5
  4623                           fsr1h	equ	0xFE2
  4624                           fsr1l	equ	0xFE1
  4625                           indf2	equ	0xFDF
  4626                           postinc2	equ	0xFDE
  4627                           postdec2	equ	0xFDD
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8
  4631                           
  4632 ;; *************** function ___awdiv *****************
  4633 ;; Defined at:
  4634 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  dividend        2   42[COMRAM] int 
  4637 ;;  divisor         2   44[COMRAM] int 
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;  quotient        2   48[COMRAM] int 
  4640 ;;  sign            1   47[COMRAM] unsigned char 
  4641 ;;  counter         1   46[COMRAM] unsigned char 
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  2   42[COMRAM] int 
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, status,0
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4651 ;;      Params:         4       0       0       0       0       0       0
  4652 ;;      Locals:         4       0       0       0       0       0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0
  4654 ;;      Totals:         8       0       0       0       0       0       0
  4655 ;;Total ram usage:        8 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    3
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_fround
  4662 ;;		_scale
  4663 ;;		_sprintf
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text11
  4668  00234C                     __ptext11:
  4669                           	opt stack 0
  4670  00234C                     ___awdiv:
  4671                           	opt stack 25
  4672                           
  4673                           ;incstack = 0
  4674  00234C  0E00               	movlw	0
  4675  00234E  6E30               	movwf	___awdiv@sign,c
  4676  002350  AE2E               	btfss	___awdiv@divisor+1,7,c
  4677  002352  D006               	goto	l2083
  4678  002354  6C2D               	negf	___awdiv@divisor,c
  4679  002356  1E2E               	comf	___awdiv@divisor+1,f,c
  4680  002358  B0D8               	btfsc	status,0,c
  4681  00235A  2A2E               	incf	___awdiv@divisor+1,f,c
  4682  00235C  0E01               	movlw	1
  4683  00235E  6E30               	movwf	___awdiv@sign,c
  4684  002360                     l2083:
  4685  002360  AE2C               	btfss	___awdiv@dividend+1,7,c
  4686  002362  D006               	goto	l2089
  4687  002364  6C2B               	negf	___awdiv@dividend,c
  4688  002366  1E2C               	comf	___awdiv@dividend+1,f,c
  4689  002368  B0D8               	btfsc	status,0,c
  4690  00236A  2A2C               	incf	___awdiv@dividend+1,f,c
  4691  00236C  0E01               	movlw	1
  4692  00236E  1A30               	xorwf	___awdiv@sign,f,c
  4693  002370                     l2089:
  4694  002370  0E00               	movlw	0
  4695  002372  6E32               	movwf	___awdiv@quotient+1,c
  4696  002374  0E00               	movlw	0
  4697  002376  6E31               	movwf	___awdiv@quotient,c
  4698  002378  502D               	movf	___awdiv@divisor,w,c
  4699  00237A  102E               	iorwf	___awdiv@divisor+1,w,c
  4700  00237C  B4D8               	btfsc	status,2,c
  4701  00237E  D01C               	goto	l2111
  4702  002380  0E01               	movlw	1
  4703  002382  6E2F               	movwf	___awdiv@counter,c
  4704  002384  D004               	goto	l2097
  4705  002386                     l2095:
  4706  002386  90D8               	bcf	status,0,c
  4707  002388  362D               	rlcf	___awdiv@divisor,f,c
  4708  00238A  362E               	rlcf	___awdiv@divisor+1,f,c
  4709  00238C  2A2F               	incf	___awdiv@counter,f,c
  4710  00238E                     l2097:
  4711  00238E  AE2E               	btfss	___awdiv@divisor+1,7,c
  4712  002390  D7FA               	goto	l2095
  4713  002392                     l2099:
  4714  002392  90D8               	bcf	status,0,c
  4715  002394  3631               	rlcf	___awdiv@quotient,f,c
  4716  002396  3632               	rlcf	___awdiv@quotient+1,f,c
  4717  002398  502D               	movf	___awdiv@divisor,w,c
  4718  00239A  5C2B               	subwf	___awdiv@dividend,w,c
  4719  00239C  502E               	movf	___awdiv@divisor+1,w,c
  4720  00239E  582C               	subwfb	___awdiv@dividend+1,w,c
  4721  0023A0  A0D8               	btfss	status,0,c
  4722  0023A2  D005               	goto	l2107
  4723  0023A4  502D               	movf	___awdiv@divisor,w,c
  4724  0023A6  5E2B               	subwf	___awdiv@dividend,f,c
  4725  0023A8  502E               	movf	___awdiv@divisor+1,w,c
  4726  0023AA  5A2C               	subwfb	___awdiv@dividend+1,f,c
  4727  0023AC  8031               	bsf	___awdiv@quotient,0,c
  4728  0023AE                     l2107:
  4729  0023AE  90D8               	bcf	status,0,c
  4730  0023B0  322E               	rrcf	___awdiv@divisor+1,f,c
  4731  0023B2  322D               	rrcf	___awdiv@divisor,f,c
  4732  0023B4  2E2F               	decfsz	___awdiv@counter,f,c
  4733  0023B6  D7ED               	goto	l2099
  4734  0023B8                     l2111:
  4735  0023B8  5030               	movf	___awdiv@sign,w,c
  4736  0023BA  B4D8               	btfsc	status,2,c
  4737  0023BC  D004               	goto	l2115
  4738  0023BE  6C31               	negf	___awdiv@quotient,c
  4739  0023C0  1E32               	comf	___awdiv@quotient+1,f,c
  4740  0023C2  B0D8               	btfsc	status,0,c
  4741  0023C4  2A32               	incf	___awdiv@quotient+1,f,c
  4742  0023C6                     l2115:
  4743  0023C6  C031  F02B         	movff	___awdiv@quotient,?___awdiv
  4744  0023CA  C032  F02C         	movff	___awdiv@quotient+1,?___awdiv+1
  4745  0023CE  0012               	return	
  4746  0023D0                     __end_of___awdiv:
  4747                           	opt stack 0
  4748                           tblptru	equ	0xFF8
  4749                           tblptrh	equ	0xFF7
  4750                           tblptrl	equ	0xFF6
  4751                           tablat	equ	0xFF5
  4752                           prodh	equ	0xFF4
  4753                           prodl	equ	0xFF3
  4754                           intcon	equ	0xFF2
  4755                           postinc0	equ	0xFEE
  4756                           wreg	equ	0xFE8
  4757                           postdec1	equ	0xFE5
  4758                           fsr1h	equ	0xFE2
  4759                           fsr1l	equ	0xFE1
  4760                           indf2	equ	0xFDF
  4761                           postinc2	equ	0xFDE
  4762                           postdec2	equ	0xFDD
  4763                           fsr2h	equ	0xFDA
  4764                           fsr2l	equ	0xFD9
  4765                           status	equ	0xFD8
  4766                           
  4767 ;; *************** function __tdiv_to_l_ *****************
  4768 ;; Defined at:
  4769 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;  f1              3   36[COMRAM] float 
  4772 ;;  f2              3   39[COMRAM] float 
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;  quot            4   45[COMRAM] unsigned long 
  4775 ;;  exp1            1   50[COMRAM] unsigned char 
  4776 ;;  cntr            1   49[COMRAM] unsigned char 
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  4   36[COMRAM] unsigned long 
  4779 ;; Registers used:
  4780 ;;		wreg, status,2, status,0
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4786 ;;      Params:         6       0       0       0       0       0       0
  4787 ;;      Locals:         6       0       0       0       0       0       0
  4788 ;;      Temps:          3       0       0       0       0       0       0
  4789 ;;      Totals:        15       0       0       0       0       0       0
  4790 ;;Total ram usage:       15 bytes
  4791 ;; Hardware stack levels used:    1
  4792 ;; Hardware stack levels required when called:    3
  4793 ;; This function calls:
  4794 ;;		Nothing
  4795 ;; This function is called by:
  4796 ;;		_sprintf
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           	psect	text12
  4801  001CFE                     __ptext12:
  4802                           	opt stack 0
  4803  001CFE                     __tdiv_to_l_:
  4804                           	opt stack 26
  4805                           
  4806                           ;incstack = 0
  4807  001CFE  C027  F02B         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4808  001D02  6A2C               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4809  001D04  6A2D               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4810  001D06  3426               	rlcf	__tdiv_to_l_@f1+1,w,c
  4811  001D08  362B               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4812  001D0A  E301               	bnc	u2181
  4813  001D0C  802C               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4814  001D0E                     u2181:
  4815  001D0E  502B               	movf	??__tdiv_to_l_,w,c
  4816  001D10  6E33               	movwf	__tdiv_to_l_@exp1,c
  4817  001D12  5033               	movf	__tdiv_to_l_@exp1,w,c
  4818  001D14  A4D8               	btfss	status,2,c
  4819  001D16  D009               	goto	l2235
  4820  001D18  0E00               	movlw	0
  4821  001D1A  6E25               	movwf	?__tdiv_to_l_,c
  4822  001D1C  0E00               	movlw	0
  4823  001D1E  6E26               	movwf	?__tdiv_to_l_+1,c
  4824  001D20  0E00               	movlw	0
  4825  001D22  6E27               	movwf	?__tdiv_to_l_+2,c
  4826  001D24  0E00               	movlw	0
  4827  001D26  6E28               	movwf	?__tdiv_to_l_+3,c
  4828  001D28  0012               	return	
  4829  001D2A                     l2235:
  4830  001D2A  C02A  F02B         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4831  001D2E  6A2C               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4832  001D30  6A2D               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4833  001D32  3429               	rlcf	__tdiv_to_l_@f2+1,w,c
  4834  001D34  362B               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4835  001D36  E301               	bnc	u2201
  4836  001D38  802C               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4837  001D3A                     u2201:
  4838  001D3A  502B               	movf	??__tdiv_to_l_,w,c
  4839  001D3C  6E32               	movwf	__tdiv_to_l_@cntr,c
  4840  001D3E  5032               	movf	__tdiv_to_l_@cntr,w,c
  4841  001D40  A4D8               	btfss	status,2,c
  4842  001D42  D009               	goto	l2241
  4843  001D44  0E00               	movlw	0
  4844  001D46  6E25               	movwf	?__tdiv_to_l_,c
  4845  001D48  0E00               	movlw	0
  4846  001D4A  6E26               	movwf	?__tdiv_to_l_+1,c
  4847  001D4C  0E00               	movlw	0
  4848  001D4E  6E27               	movwf	?__tdiv_to_l_+2,c
  4849  001D50  0E00               	movlw	0
  4850  001D52  6E28               	movwf	?__tdiv_to_l_+3,c
  4851  001D54  0012               	return	
  4852  001D56                     l2241:
  4853  001D56  8E26               	bsf	__tdiv_to_l_@f1+1,7,c
  4854  001D58  0EFF               	movlw	255
  4855  001D5A  1625               	andwf	__tdiv_to_l_@f1,f,c
  4856  001D5C  0EFF               	movlw	255
  4857  001D5E  1626               	andwf	__tdiv_to_l_@f1+1,f,c
  4858  001D60  0E00               	movlw	0
  4859  001D62  1627               	andwf	__tdiv_to_l_@f1+2,f,c
  4860  001D64  8E29               	bsf	__tdiv_to_l_@f2+1,7,c
  4861  001D66  0EFF               	movlw	255
  4862  001D68  1628               	andwf	__tdiv_to_l_@f2,f,c
  4863  001D6A  0EFF               	movlw	255
  4864  001D6C  1629               	andwf	__tdiv_to_l_@f2+1,f,c
  4865  001D6E  0E00               	movlw	0
  4866  001D70  162A               	andwf	__tdiv_to_l_@f2+2,f,c
  4867  001D72  0E00               	movlw	0
  4868  001D74  6E2E               	movwf	__tdiv_to_l_@quot,c
  4869  001D76  0E00               	movlw	0
  4870  001D78  6E2F               	movwf	__tdiv_to_l_@quot+1,c
  4871  001D7A  0E00               	movlw	0
  4872  001D7C  6E30               	movwf	__tdiv_to_l_@quot+2,c
  4873  001D7E  0E00               	movlw	0
  4874  001D80  6E31               	movwf	__tdiv_to_l_@quot+3,c
  4875  001D82  0E7F               	movlw	127
  4876  001D84  5E33               	subwf	__tdiv_to_l_@exp1,f,c
  4877  001D86  5032               	movf	__tdiv_to_l_@cntr,w,c
  4878  001D88  0F98               	addlw	152
  4879  001D8A  5E33               	subwf	__tdiv_to_l_@exp1,f,c
  4880  001D8C  0E18               	movlw	24
  4881  001D8E  6E32               	movwf	__tdiv_to_l_@cntr,c
  4882  001D90                     l555:
  4883  001D90  90D8               	bcf	status,0,c
  4884  001D92  362E               	rlcf	__tdiv_to_l_@quot,f,c
  4885  001D94  362F               	rlcf	__tdiv_to_l_@quot+1,f,c
  4886  001D96  3630               	rlcf	__tdiv_to_l_@quot+2,f,c
  4887  001D98  3631               	rlcf	__tdiv_to_l_@quot+3,f,c
  4888  001D9A  5028               	movf	__tdiv_to_l_@f2,w,c
  4889  001D9C  5C25               	subwf	__tdiv_to_l_@f1,w,c
  4890  001D9E  5029               	movf	__tdiv_to_l_@f2+1,w,c
  4891  001DA0  5826               	subwfb	__tdiv_to_l_@f1+1,w,c
  4892  001DA2  502A               	movf	__tdiv_to_l_@f2+2,w,c
  4893  001DA4  5827               	subwfb	__tdiv_to_l_@f1+2,w,c
  4894  001DA6  A0D8               	btfss	status,0,c
  4895  001DA8  D007               	goto	l556
  4896  001DAA  5028               	movf	__tdiv_to_l_@f2,w,c
  4897  001DAC  5E25               	subwf	__tdiv_to_l_@f1,f,c
  4898  001DAE  5029               	movf	__tdiv_to_l_@f2+1,w,c
  4899  001DB0  5A26               	subwfb	__tdiv_to_l_@f1+1,f,c
  4900  001DB2  502A               	movf	__tdiv_to_l_@f2+2,w,c
  4901  001DB4  5A27               	subwfb	__tdiv_to_l_@f1+2,f,c
  4902  001DB6  802E               	bsf	__tdiv_to_l_@quot,0,c
  4903  001DB8                     l556:
  4904  001DB8  90D8               	bcf	status,0,c
  4905  001DBA  3625               	rlcf	__tdiv_to_l_@f1,f,c
  4906  001DBC  3626               	rlcf	__tdiv_to_l_@f1+1,f,c
  4907  001DBE  3627               	rlcf	__tdiv_to_l_@f1+2,f,c
  4908  001DC0  2E32               	decfsz	__tdiv_to_l_@cntr,f,c
  4909  001DC2  D7E6               	goto	l555
  4910  001DC4  AE33               	btfss	__tdiv_to_l_@exp1,7,c
  4911  001DC6  D016               	goto	l2275
  4912  001DC8  5033               	movf	__tdiv_to_l_@exp1,w,c
  4913  001DCA  0A80               	xorlw	128
  4914  001DCC  0F97               	addlw	151
  4915  001DCE  B0D8               	btfsc	status,0,c
  4916  001DD0  D009               	goto	l2271
  4917  001DD2  0E00               	movlw	0
  4918  001DD4  6E25               	movwf	?__tdiv_to_l_,c
  4919  001DD6  0E00               	movlw	0
  4920  001DD8  6E26               	movwf	?__tdiv_to_l_+1,c
  4921  001DDA  0E00               	movlw	0
  4922  001DDC  6E27               	movwf	?__tdiv_to_l_+2,c
  4923  001DDE  0E00               	movlw	0
  4924  001DE0  6E28               	movwf	?__tdiv_to_l_+3,c
  4925  001DE2  0012               	return	
  4926  001DE4                     l2271:
  4927  001DE4  90D8               	bcf	status,0,c
  4928  001DE6  3231               	rrcf	__tdiv_to_l_@quot+3,f,c
  4929  001DE8  3230               	rrcf	__tdiv_to_l_@quot+2,f,c
  4930  001DEA  322F               	rrcf	__tdiv_to_l_@quot+1,f,c
  4931  001DEC  322E               	rrcf	__tdiv_to_l_@quot,f,c
  4932  001DEE  3E33               	incfsz	__tdiv_to_l_@exp1,f,c
  4933  001DF0  D7F9               	goto	l2271
  4934  001DF2  D015               	goto	l562
  4935  001DF4                     l2275:
  4936  001DF4  0E17               	movlw	23
  4937  001DF6  6433               	cpfsgt	__tdiv_to_l_@exp1,c
  4938  001DF8  D00F               	goto	l2283
  4939  001DFA  0E00               	movlw	0
  4940  001DFC  6E25               	movwf	?__tdiv_to_l_,c
  4941  001DFE  0E00               	movlw	0
  4942  001E00  6E26               	movwf	?__tdiv_to_l_+1,c
  4943  001E02  0E00               	movlw	0
  4944  001E04  6E27               	movwf	?__tdiv_to_l_+2,c
  4945  001E06  0E00               	movlw	0
  4946  001E08  6E28               	movwf	?__tdiv_to_l_+3,c
  4947  001E0A  0012               	return	
  4948  001E0C                     l2281:
  4949  001E0C  90D8               	bcf	status,0,c
  4950  001E0E  362E               	rlcf	__tdiv_to_l_@quot,f,c
  4951  001E10  362F               	rlcf	__tdiv_to_l_@quot+1,f,c
  4952  001E12  3630               	rlcf	__tdiv_to_l_@quot+2,f,c
  4953  001E14  3631               	rlcf	__tdiv_to_l_@quot+3,f,c
  4954  001E16  0633               	decf	__tdiv_to_l_@exp1,f,c
  4955  001E18                     l2283:
  4956  001E18  5033               	movf	__tdiv_to_l_@exp1,w,c
  4957  001E1A  A4D8               	btfss	status,2,c
  4958  001E1C  D7F7               	goto	l2281
  4959  001E1E                     l562:
  4960  001E1E  C02E  F025         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4961  001E22  C02F  F026         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4962  001E26  C030  F027         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4963  001E2A  C031  F028         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4964  001E2E  0012               	return		;funcret
  4965  001E30                     __end_of__tdiv_to_l_:
  4966                           	opt stack 0
  4967                           tblptru	equ	0xFF8
  4968                           tblptrh	equ	0xFF7
  4969                           tblptrl	equ	0xFF6
  4970                           tablat	equ	0xFF5
  4971                           prodh	equ	0xFF4
  4972                           prodl	equ	0xFF3
  4973                           intcon	equ	0xFF2
  4974                           postinc0	equ	0xFEE
  4975                           wreg	equ	0xFE8
  4976                           postdec1	equ	0xFE5
  4977                           fsr1h	equ	0xFE2
  4978                           fsr1l	equ	0xFE1
  4979                           indf2	equ	0xFDF
  4980                           postinc2	equ	0xFDE
  4981                           postdec2	equ	0xFDD
  4982                           fsr2h	equ	0xFDA
  4983                           fsr2l	equ	0xFD9
  4984                           status	equ	0xFD8
  4985                           
  4986 ;; *************** function __div_to_l_ *****************
  4987 ;; Defined at:
  4988 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  f1              3   36[COMRAM] unsigned long 
  4991 ;;  f2              3   39[COMRAM] unsigned long 
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;  quot            4   42[COMRAM] unsigned long 
  4994 ;;  exp1            1   47[COMRAM] unsigned char 
  4995 ;;  cntr            1   46[COMRAM] unsigned char 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  4   36[COMRAM] unsigned long 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2, status,0
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5005 ;;      Params:         6       0       0       0       0       0       0
  5006 ;;      Locals:         6       0       0       0       0       0       0
  5007 ;;      Temps:          0       0       0       0       0       0       0
  5008 ;;      Totals:        12       0       0       0       0       0       0
  5009 ;;Total ram usage:       12 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    3
  5012 ;; This function calls:
  5013 ;;		Nothing
  5014 ;; This function is called by:
  5015 ;;		_sprintf
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text13
  5020  001F5E                     __ptext13:
  5021                           	opt stack 0
  5022  001F5E                     __div_to_l_:
  5023                           	opt stack 26
  5024                           
  5025                           ;incstack = 0
  5026  001F5E  3427               	rlcf	__div_to_l_@f1+2,w,c
  5027  001F60  3428               	rlcf	__div_to_l_@f1+3,w,c
  5028  001F62  6E30               	movwf	__div_to_l_@exp1,c
  5029  001F64  5030               	movf	__div_to_l_@exp1,w,c
  5030  001F66  A4D8               	btfss	status,2,c
  5031  001F68  D009               	goto	l2291
  5032  001F6A  0E00               	movlw	0
  5033  001F6C  6E25               	movwf	?__div_to_l_,c
  5034  001F6E  0E00               	movlw	0
  5035  001F70  6E26               	movwf	?__div_to_l_+1,c
  5036  001F72  0E00               	movlw	0
  5037  001F74  6E27               	movwf	?__div_to_l_+2,c
  5038  001F76  0E00               	movlw	0
  5039  001F78  6E28               	movwf	?__div_to_l_+3,c
  5040  001F7A  0012               	return	
  5041  001F7C                     l2291:
  5042  001F7C  342A               	rlcf	__div_to_l_@f2+2,w,c
  5043  001F7E  342B               	rlcf	__div_to_l_@f2+3,w,c
  5044  001F80  6E2F               	movwf	__div_to_l_@cntr,c
  5045  001F82  502F               	movf	__div_to_l_@cntr,w,c
  5046  001F84  A4D8               	btfss	status,2,c
  5047  001F86  D009               	goto	l2297
  5048  001F88  0E00               	movlw	0
  5049  001F8A  6E25               	movwf	?__div_to_l_,c
  5050  001F8C  0E00               	movlw	0
  5051  001F8E  6E26               	movwf	?__div_to_l_+1,c
  5052  001F90  0E00               	movlw	0
  5053  001F92  6E27               	movwf	?__div_to_l_+2,c
  5054  001F94  0E00               	movlw	0
  5055  001F96  6E28               	movwf	?__div_to_l_+3,c
  5056  001F98  0012               	return	
  5057  001F9A                     l2297:
  5058  001F9A  8E27               	bsf	__div_to_l_@f1+2,7,c
  5059  001F9C  0EFF               	movlw	255
  5060  001F9E  1625               	andwf	__div_to_l_@f1,f,c
  5061  001FA0  0EFF               	movlw	255
  5062  001FA2  1626               	andwf	__div_to_l_@f1+1,f,c
  5063  001FA4  0EFF               	movlw	255
  5064  001FA6  1627               	andwf	__div_to_l_@f1+2,f,c
  5065  001FA8  0E00               	movlw	0
  5066  001FAA  1628               	andwf	__div_to_l_@f1+3,f,c
  5067  001FAC  8E2A               	bsf	__div_to_l_@f2+2,7,c
  5068  001FAE  0EFF               	movlw	255
  5069  001FB0  1628               	andwf	__div_to_l_@f2,f,c
  5070  001FB2  0EFF               	movlw	255
  5071  001FB4  1629               	andwf	__div_to_l_@f2+1,f,c
  5072  001FB6  0EFF               	movlw	255
  5073  001FB8  162A               	andwf	__div_to_l_@f2+2,f,c
  5074  001FBA  0E00               	movlw	0
  5075  001FBC  162B               	andwf	__div_to_l_@f2+3,f,c
  5076  001FBE  0E00               	movlw	0
  5077  001FC0  6E2B               	movwf	__div_to_l_@quot,c
  5078  001FC2  0E00               	movlw	0
  5079  001FC4  6E2C               	movwf	__div_to_l_@quot+1,c
  5080  001FC6  0E00               	movlw	0
  5081  001FC8  6E2D               	movwf	__div_to_l_@quot+2,c
  5082  001FCA  0E00               	movlw	0
  5083  001FCC  6E2E               	movwf	__div_to_l_@quot+3,c
  5084  001FCE  0E7F               	movlw	127
  5085  001FD0  5E30               	subwf	__div_to_l_@exp1,f,c
  5086  001FD2  502F               	movf	__div_to_l_@cntr,w,c
  5087  001FD4  0FA0               	addlw	160
  5088  001FD6  5E30               	subwf	__div_to_l_@exp1,f,c
  5089  001FD8  0E20               	movlw	32
  5090  001FDA  6E2F               	movwf	__div_to_l_@cntr,c
  5091  001FDC                     l2311:
  5092  001FDC  90D8               	bcf	status,0,c
  5093  001FDE  362B               	rlcf	__div_to_l_@quot,f,c
  5094  001FE0  362C               	rlcf	__div_to_l_@quot+1,f,c
  5095  001FE2  362D               	rlcf	__div_to_l_@quot+2,f,c
  5096  001FE4  362E               	rlcf	__div_to_l_@quot+3,f,c
  5097  001FE6  5028               	movf	__div_to_l_@f2,w,c
  5098  001FE8  5C25               	subwf	__div_to_l_@f1,w,c
  5099  001FEA  5029               	movf	__div_to_l_@f2+1,w,c
  5100  001FEC  5826               	subwfb	__div_to_l_@f1+1,w,c
  5101  001FEE  502A               	movf	__div_to_l_@f2+2,w,c
  5102  001FF0  5827               	subwfb	__div_to_l_@f1+2,w,c
  5103  001FF2  502B               	movf	__div_to_l_@f2+3,w,c
  5104  001FF4  5828               	subwfb	__div_to_l_@f1+3,w,c
  5105  001FF6  A0D8               	btfss	status,0,c
  5106  001FF8  D009               	goto	l2319
  5107  001FFA  5028               	movf	__div_to_l_@f2,w,c
  5108  001FFC  5E25               	subwf	__div_to_l_@f1,f,c
  5109  001FFE  5029               	movf	__div_to_l_@f2+1,w,c
  5110  002000  5A26               	subwfb	__div_to_l_@f1+1,f,c
  5111  002002  502A               	movf	__div_to_l_@f2+2,w,c
  5112  002004  5A27               	subwfb	__div_to_l_@f1+2,f,c
  5113  002006  502B               	movf	__div_to_l_@f2+3,w,c
  5114  002008  5A28               	subwfb	__div_to_l_@f1+3,f,c
  5115  00200A  802B               	bsf	__div_to_l_@quot,0,c
  5116  00200C                     l2319:
  5117  00200C  90D8               	bcf	status,0,c
  5118  00200E  3625               	rlcf	__div_to_l_@f1,f,c
  5119  002010  3626               	rlcf	__div_to_l_@f1+1,f,c
  5120  002012  3627               	rlcf	__div_to_l_@f1+2,f,c
  5121  002014  3628               	rlcf	__div_to_l_@f1+3,f,c
  5122  002016  2E2F               	decfsz	__div_to_l_@cntr,f,c
  5123  002018  D7E1               	goto	l2311
  5124  00201A  AE30               	btfss	__div_to_l_@exp1,7,c
  5125  00201C  D016               	goto	l2335
  5126  00201E  5030               	movf	__div_to_l_@exp1,w,c
  5127  002020  0A80               	xorlw	128
  5128  002022  0F9F               	addlw	159
  5129  002024  B0D8               	btfsc	status,0,c
  5130  002026  D009               	goto	l2331
  5131  002028  0E00               	movlw	0
  5132  00202A  6E25               	movwf	?__div_to_l_,c
  5133  00202C  0E00               	movlw	0
  5134  00202E  6E26               	movwf	?__div_to_l_+1,c
  5135  002030  0E00               	movlw	0
  5136  002032  6E27               	movwf	?__div_to_l_+2,c
  5137  002034  0E00               	movlw	0
  5138  002036  6E28               	movwf	?__div_to_l_+3,c
  5139  002038  0012               	return	
  5140  00203A                     l2331:
  5141  00203A  90D8               	bcf	status,0,c
  5142  00203C  322E               	rrcf	__div_to_l_@quot+3,f,c
  5143  00203E  322D               	rrcf	__div_to_l_@quot+2,f,c
  5144  002040  322C               	rrcf	__div_to_l_@quot+1,f,c
  5145  002042  322B               	rrcf	__div_to_l_@quot,f,c
  5146  002044  3E30               	incfsz	__div_to_l_@exp1,f,c
  5147  002046  D7F9               	goto	l2331
  5148  002048  D015               	goto	l458
  5149  00204A                     l2335:
  5150  00204A  0E1F               	movlw	31
  5151  00204C  6430               	cpfsgt	__div_to_l_@exp1,c
  5152  00204E  D00F               	goto	l2343
  5153  002050  0E00               	movlw	0
  5154  002052  6E25               	movwf	?__div_to_l_,c
  5155  002054  0E00               	movlw	0
  5156  002056  6E26               	movwf	?__div_to_l_+1,c
  5157  002058  0E00               	movlw	0
  5158  00205A  6E27               	movwf	?__div_to_l_+2,c
  5159  00205C  0E00               	movlw	0
  5160  00205E  6E28               	movwf	?__div_to_l_+3,c
  5161  002060  0012               	return	
  5162  002062                     l2341:
  5163  002062  90D8               	bcf	status,0,c
  5164  002064  362B               	rlcf	__div_to_l_@quot,f,c
  5165  002066  362C               	rlcf	__div_to_l_@quot+1,f,c
  5166  002068  362D               	rlcf	__div_to_l_@quot+2,f,c
  5167  00206A  362E               	rlcf	__div_to_l_@quot+3,f,c
  5168  00206C  0630               	decf	__div_to_l_@exp1,f,c
  5169  00206E                     l2343:
  5170  00206E  5030               	movf	__div_to_l_@exp1,w,c
  5171  002070  A4D8               	btfss	status,2,c
  5172  002072  D7F7               	goto	l2341
  5173  002074                     l458:
  5174  002074  C02B  F025         	movff	__div_to_l_@quot,?__div_to_l_
  5175  002078  C02C  F026         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5176  00207C  C02D  F027         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5177  002080  C02E  F028         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5178  002084  0012               	return		;funcret
  5179  002086                     __end_of__div_to_l_:
  5180                           	opt stack 0
  5181                           tblptru	equ	0xFF8
  5182                           tblptrh	equ	0xFF7
  5183                           tblptrl	equ	0xFF6
  5184                           tablat	equ	0xFF5
  5185                           prodh	equ	0xFF4
  5186                           prodl	equ	0xFF3
  5187                           intcon	equ	0xFF2
  5188                           postinc0	equ	0xFEE
  5189                           wreg	equ	0xFE8
  5190                           postdec1	equ	0xFE5
  5191                           fsr1h	equ	0xFE2
  5192                           fsr1l	equ	0xFE1
  5193                           indf2	equ	0xFDF
  5194                           postinc2	equ	0xFDE
  5195                           postdec2	equ	0xFDD
  5196                           fsr2h	equ	0xFDA
  5197                           fsr2l	equ	0xFD9
  5198                           status	equ	0xFD8
  5199                           
  5200 ;; *************** function ___lltoft *****************
  5201 ;; Defined at:
  5202 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;  c               4   44[COMRAM] unsigned long 
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;  exp             1   52[COMRAM] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  3   44[COMRAM] float 
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, status,0, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5216 ;;      Params:         4       0       0       0       0       0       0
  5217 ;;      Locals:         1       0       0       0       0       0       0
  5218 ;;      Temps:          4       0       0       0       0       0       0
  5219 ;;      Totals:         9       0       0       0       0       0       0
  5220 ;;Total ram usage:        9 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    4
  5223 ;; This function calls:
  5224 ;;		___ftpack
  5225 ;; This function is called by:
  5226 ;;		_sprintf
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text14
  5231  002528                     __ptext14:
  5232                           	opt stack 0
  5233  002528                     ___lltoft:
  5234                           	opt stack 25
  5235                           
  5236                           ;incstack = 0
  5237  002528  0E8E               	movlw	142
  5238  00252A  6E35               	movwf	___lltoft@exp,c
  5239  00252C  D006               	goto	l2463
  5240  00252E                     l2461:
  5241  00252E  90D8               	bcf	status,0,c
  5242  002530  3230               	rrcf	___lltoft@c+3,f,c
  5243  002532  322F               	rrcf	___lltoft@c+2,f,c
  5244  002534  322E               	rrcf	___lltoft@c+1,f,c
  5245  002536  322D               	rrcf	___lltoft@c,f,c
  5246  002538  2A35               	incf	___lltoft@exp,f,c
  5247  00253A                     l2463:
  5248  00253A  0E00               	movlw	0
  5249  00253C  142D               	andwf	___lltoft@c,w,c
  5250  00253E  6E31               	movwf	??___lltoft& (0+255),c
  5251  002540  0E00               	movlw	0
  5252  002542  142E               	andwf	___lltoft@c+1,w,c
  5253  002544  6E32               	movwf	(??___lltoft+1)& (0+255),c
  5254  002546  0E00               	movlw	0
  5255  002548  142F               	andwf	___lltoft@c+2,w,c
  5256  00254A  6E33               	movwf	(??___lltoft+2)& (0+255),c
  5257  00254C  0EFF               	movlw	255
  5258  00254E  1430               	andwf	___lltoft@c+3,w,c
  5259  002550  6E34               	movwf	(??___lltoft+3)& (0+255),c
  5260  002552  5031               	movf	??___lltoft,w,c
  5261  002554  1032               	iorwf	??___lltoft+1,w,c
  5262  002556  1033               	iorwf	??___lltoft+2,w,c
  5263  002558  1034               	iorwf	??___lltoft+3,w,c
  5264  00255A  A4D8               	btfss	status,2,c
  5265  00255C  D7E8               	goto	l2461
  5266  00255E  C02D  F025         	movff	___lltoft@c,___ftpack@arg
  5267  002562  C02E  F026         	movff	___lltoft@c+1,___ftpack@arg+1
  5268  002566  C02F  F027         	movff	___lltoft@c+2,___ftpack@arg+2
  5269  00256A  C035  F028         	movff	___lltoft@exp,___ftpack@exp
  5270  00256E  0E00               	movlw	0
  5271  002570  6E29               	movwf	___ftpack@sign,c
  5272  002572  ECBD  F010         	call	___ftpack	;wreg free
  5273  002576  C025  F02D         	movff	?___ftpack,?___lltoft
  5274  00257A  C026  F02E         	movff	?___ftpack+1,?___lltoft+1
  5275  00257E  C027  F02F         	movff	?___ftpack+2,?___lltoft+2
  5276  002582  0012               	return	
  5277  002584                     __end_of___lltoft:
  5278                           	opt stack 0
  5279                           tblptru	equ	0xFF8
  5280                           tblptrh	equ	0xFF7
  5281                           tblptrl	equ	0xFF6
  5282                           tablat	equ	0xFF5
  5283                           prodh	equ	0xFF4
  5284                           prodl	equ	0xFF3
  5285                           intcon	equ	0xFF2
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           postdec1	equ	0xFE5
  5289                           fsr1h	equ	0xFE2
  5290                           fsr1l	equ	0xFE1
  5291                           indf2	equ	0xFDF
  5292                           postinc2	equ	0xFDE
  5293                           postdec2	equ	0xFDD
  5294                           fsr2h	equ	0xFDA
  5295                           fsr2l	equ	0xFD9
  5296                           status	equ	0xFD8
  5297                           
  5298 ;; *************** function ___llmod *****************
  5299 ;; Defined at:
  5300 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;  dividend        4   36[COMRAM] unsigned long 
  5303 ;;  divisor         4   40[COMRAM] unsigned long 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  counter         1   44[COMRAM] unsigned char 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  4   36[COMRAM] unsigned long 
  5308 ;; Registers used:
  5309 ;;		wreg, status,2, status,0
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5315 ;;      Params:         8       0       0       0       0       0       0
  5316 ;;      Locals:         1       0       0       0       0       0       0
  5317 ;;      Temps:          0       0       0       0       0       0       0
  5318 ;;      Totals:         9       0       0       0       0       0       0
  5319 ;;Total ram usage:        9 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    3
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_sprintf
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text15
  5330  0024C2                     __ptext15:
  5331                           	opt stack 0
  5332  0024C2                     ___llmod:
  5333                           	opt stack 26
  5334                           
  5335                           ;incstack = 0
  5336  0024C2  5029               	movf	___llmod@divisor,w,c
  5337  0024C4  102A               	iorwf	___llmod@divisor+1,w,c
  5338  0024C6  102B               	iorwf	___llmod@divisor+2,w,c
  5339  0024C8  102C               	iorwf	___llmod@divisor+3,w,c
  5340  0024CA  B4D8               	btfsc	status,2,c
  5341  0024CC  D024               	goto	l647
  5342  0024CE  0E01               	movlw	1
  5343  0024D0  6E2D               	movwf	___llmod@counter,c
  5344  0024D2  D006               	goto	l2449
  5345  0024D4                     l2447:
  5346  0024D4  90D8               	bcf	status,0,c
  5347  0024D6  3629               	rlcf	___llmod@divisor,f,c
  5348  0024D8  362A               	rlcf	___llmod@divisor+1,f,c
  5349  0024DA  362B               	rlcf	___llmod@divisor+2,f,c
  5350  0024DC  362C               	rlcf	___llmod@divisor+3,f,c
  5351  0024DE  2A2D               	incf	___llmod@counter,f,c
  5352  0024E0                     l2449:
  5353  0024E0  AE2C               	btfss	___llmod@divisor+3,7,c
  5354  0024E2  D7F8               	goto	l2447
  5355  0024E4                     l2451:
  5356  0024E4  5029               	movf	___llmod@divisor,w,c
  5357  0024E6  5C25               	subwf	___llmod@dividend,w,c
  5358  0024E8  502A               	movf	___llmod@divisor+1,w,c
  5359  0024EA  5826               	subwfb	___llmod@dividend+1,w,c
  5360  0024EC  502B               	movf	___llmod@divisor+2,w,c
  5361  0024EE  5827               	subwfb	___llmod@dividend+2,w,c
  5362  0024F0  502C               	movf	___llmod@divisor+3,w,c
  5363  0024F2  5828               	subwfb	___llmod@dividend+3,w,c
  5364  0024F4  A0D8               	btfss	status,0,c
  5365  0024F6  D008               	goto	l2455
  5366  0024F8  5029               	movf	___llmod@divisor,w,c
  5367  0024FA  5E25               	subwf	___llmod@dividend,f,c
  5368  0024FC  502A               	movf	___llmod@divisor+1,w,c
  5369  0024FE  5A26               	subwfb	___llmod@dividend+1,f,c
  5370  002500  502B               	movf	___llmod@divisor+2,w,c
  5371  002502  5A27               	subwfb	___llmod@dividend+2,f,c
  5372  002504  502C               	movf	___llmod@divisor+3,w,c
  5373  002506  5A28               	subwfb	___llmod@dividend+3,f,c
  5374  002508                     l2455:
  5375  002508  90D8               	bcf	status,0,c
  5376  00250A  322C               	rrcf	___llmod@divisor+3,f,c
  5377  00250C  322B               	rrcf	___llmod@divisor+2,f,c
  5378  00250E  322A               	rrcf	___llmod@divisor+1,f,c
  5379  002510  3229               	rrcf	___llmod@divisor,f,c
  5380  002512  2E2D               	decfsz	___llmod@counter,f,c
  5381  002514  D7E7               	goto	l2451
  5382  002516                     l647:
  5383  002516  C025  F025         	movff	___llmod@dividend,?___llmod
  5384  00251A  C026  F026         	movff	___llmod@dividend+1,?___llmod+1
  5385  00251E  C027  F027         	movff	___llmod@dividend+2,?___llmod+2
  5386  002522  C028  F028         	movff	___llmod@dividend+3,?___llmod+3
  5387  002526  0012               	return		;funcret
  5388  002528                     __end_of___llmod:
  5389                           	opt stack 0
  5390                           tblptru	equ	0xFF8
  5391                           tblptrh	equ	0xFF7
  5392                           tblptrl	equ	0xFF6
  5393                           tablat	equ	0xFF5
  5394                           prodh	equ	0xFF4
  5395                           prodl	equ	0xFF3
  5396                           intcon	equ	0xFF2
  5397                           postinc0	equ	0xFEE
  5398                           wreg	equ	0xFE8
  5399                           postdec1	equ	0xFE5
  5400                           fsr1h	equ	0xFE2
  5401                           fsr1l	equ	0xFE1
  5402                           indf2	equ	0xFDF
  5403                           postinc2	equ	0xFDE
  5404                           postdec2	equ	0xFDD
  5405                           fsr2h	equ	0xFDA
  5406                           fsr2l	equ	0xFD9
  5407                           status	equ	0xFD8
  5408                           
  5409 ;; *************** function ___lldiv *****************
  5410 ;; Defined at:
  5411 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;  dividend        4   36[COMRAM] unsigned long 
  5414 ;;  divisor         4   40[COMRAM] unsigned long 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  quotient        4   44[COMRAM] unsigned long 
  5417 ;;  counter         1   48[COMRAM] unsigned char 
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  4   36[COMRAM] unsigned long 
  5420 ;; Registers used:
  5421 ;;		wreg, status,2, status,0
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5427 ;;      Params:         8       0       0       0       0       0       0
  5428 ;;      Locals:         5       0       0       0       0       0       0
  5429 ;;      Temps:          0       0       0       0       0       0       0
  5430 ;;      Totals:        13       0       0       0       0       0       0
  5431 ;;Total ram usage:       13 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    3
  5434 ;; This function calls:
  5435 ;;		Nothing
  5436 ;; This function is called by:
  5437 ;;		_sprintf
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           	psect	text16
  5442  0023D0                     __ptext16:
  5443                           	opt stack 0
  5444  0023D0                     ___lldiv:
  5445                           	opt stack 26
  5446                           
  5447                           ;incstack = 0
  5448  0023D0  0E00               	movlw	0
  5449  0023D2  6E2D               	movwf	___lldiv@quotient,c
  5450  0023D4  0E00               	movlw	0
  5451  0023D6  6E2E               	movwf	___lldiv@quotient+1,c
  5452  0023D8  0E00               	movlw	0
  5453  0023DA  6E2F               	movwf	___lldiv@quotient+2,c
  5454  0023DC  0E00               	movlw	0
  5455  0023DE  6E30               	movwf	___lldiv@quotient+3,c
  5456  0023E0  5029               	movf	___lldiv@divisor,w,c
  5457  0023E2  102A               	iorwf	___lldiv@divisor+1,w,c
  5458  0023E4  102B               	iorwf	___lldiv@divisor+2,w,c
  5459  0023E6  102C               	iorwf	___lldiv@divisor+3,w,c
  5460  0023E8  B4D8               	btfsc	status,2,c
  5461  0023EA  D02A               	goto	l637
  5462  0023EC  0E01               	movlw	1
  5463  0023EE  6E31               	movwf	___lldiv@counter,c
  5464  0023F0  D006               	goto	l2429
  5465  0023F2                     l2427:
  5466  0023F2  90D8               	bcf	status,0,c
  5467  0023F4  3629               	rlcf	___lldiv@divisor,f,c
  5468  0023F6  362A               	rlcf	___lldiv@divisor+1,f,c
  5469  0023F8  362B               	rlcf	___lldiv@divisor+2,f,c
  5470  0023FA  362C               	rlcf	___lldiv@divisor+3,f,c
  5471  0023FC  2A31               	incf	___lldiv@counter,f,c
  5472  0023FE                     l2429:
  5473  0023FE  AE2C               	btfss	___lldiv@divisor+3,7,c
  5474  002400  D7F8               	goto	l2427
  5475  002402                     l2431:
  5476  002402  90D8               	bcf	status,0,c
  5477  002404  362D               	rlcf	___lldiv@quotient,f,c
  5478  002406  362E               	rlcf	___lldiv@quotient+1,f,c
  5479  002408  362F               	rlcf	___lldiv@quotient+2,f,c
  5480  00240A  3630               	rlcf	___lldiv@quotient+3,f,c
  5481  00240C  5029               	movf	___lldiv@divisor,w,c
  5482  00240E  5C25               	subwf	___lldiv@dividend,w,c
  5483  002410  502A               	movf	___lldiv@divisor+1,w,c
  5484  002412  5826               	subwfb	___lldiv@dividend+1,w,c
  5485  002414  502B               	movf	___lldiv@divisor+2,w,c
  5486  002416  5827               	subwfb	___lldiv@dividend+2,w,c
  5487  002418  502C               	movf	___lldiv@divisor+3,w,c
  5488  00241A  5828               	subwfb	___lldiv@dividend+3,w,c
  5489  00241C  A0D8               	btfss	status,0,c
  5490  00241E  D009               	goto	l2439
  5491  002420  5029               	movf	___lldiv@divisor,w,c
  5492  002422  5E25               	subwf	___lldiv@dividend,f,c
  5493  002424  502A               	movf	___lldiv@divisor+1,w,c
  5494  002426  5A26               	subwfb	___lldiv@dividend+1,f,c
  5495  002428  502B               	movf	___lldiv@divisor+2,w,c
  5496  00242A  5A27               	subwfb	___lldiv@dividend+2,f,c
  5497  00242C  502C               	movf	___lldiv@divisor+3,w,c
  5498  00242E  5A28               	subwfb	___lldiv@dividend+3,f,c
  5499  002430  802D               	bsf	___lldiv@quotient,0,c
  5500  002432                     l2439:
  5501  002432  90D8               	bcf	status,0,c
  5502  002434  322C               	rrcf	___lldiv@divisor+3,f,c
  5503  002436  322B               	rrcf	___lldiv@divisor+2,f,c
  5504  002438  322A               	rrcf	___lldiv@divisor+1,f,c
  5505  00243A  3229               	rrcf	___lldiv@divisor,f,c
  5506  00243C  2E31               	decfsz	___lldiv@counter,f,c
  5507  00243E  D7E1               	goto	l2431
  5508  002440                     l637:
  5509  002440  C02D  F025         	movff	___lldiv@quotient,?___lldiv
  5510  002444  C02E  F026         	movff	___lldiv@quotient+1,?___lldiv+1
  5511  002448  C02F  F027         	movff	___lldiv@quotient+2,?___lldiv+2
  5512  00244C  C030  F028         	movff	___lldiv@quotient+3,?___lldiv+3
  5513  002450  0012               	return		;funcret
  5514  002452                     __end_of___lldiv:
  5515                           	opt stack 0
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           postinc0	equ	0xFEE
  5524                           wreg	equ	0xFE8
  5525                           postdec1	equ	0xFE5
  5526                           fsr1h	equ	0xFE2
  5527                           fsr1l	equ	0xFE1
  5528                           indf2	equ	0xFDF
  5529                           postinc2	equ	0xFDE
  5530                           postdec2	equ	0xFDD
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function ___fttol *****************
  5536 ;; Defined at:
  5537 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  f1              3   78[COMRAM] float 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  lval            4    6[BANK0 ] unsigned long 
  5542 ;;  exp1            1   10[BANK0 ] unsigned char 
  5543 ;;  sign1           1    5[BANK0 ] unsigned char 
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  4   78[COMRAM] long 
  5546 ;; Registers used:
  5547 ;;		wreg, status,2, status,0
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5553 ;;      Params:         4       0       0       0       0       0       0
  5554 ;;      Locals:         0       6       0       0       0       0       0
  5555 ;;      Temps:          0       5       0       0       0       0       0
  5556 ;;      Totals:         4      11       0       0       0       0       0
  5557 ;;Total ram usage:       15 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    3
  5560 ;; This function calls:
  5561 ;;		Nothing
  5562 ;; This function is called by:
  5563 ;;		_sprintf
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           	psect	text17
  5568  001E30                     __ptext17:
  5569                           	opt stack 0
  5570  001E30                     ___fttol:
  5571                           	opt stack 26
  5572                           
  5573                           ;incstack = 0
  5574  001E30  C051  F080         	movff	___fttol@f1+2,??___fttol
  5575  001E34  0100               	movlb	0	; () banked
  5576  001E36  6B81               	clrf	(??___fttol+1)& (0+255),b
  5577  001E38  6B82               	clrf	(??___fttol+2)& (0+255),b
  5578  001E3A  3450               	rlcf	___fttol@f1+1,w,c
  5579  001E3C  0100               	movlb	0	; () banked
  5580  001E3E  3780               	rlcf	??___fttol& (0+255),f,b
  5581  001E40  E301               	bnc	u3431
  5582  001E42  8181               	bsf	(??___fttol+1)& (0+255),0,b
  5583  001E44                     u3431:
  5584  001E44  0100               	movlb	0	; () banked
  5585  001E46  5180               	movf	??___fttol& (0+255),w,b
  5586  001E48  0100               	movlb	0	; () banked
  5587  001E4A  6F8A               	movwf	___fttol@exp1& (0+255),b
  5588  001E4C  0100               	movlb	0	; () banked
  5589  001E4E  518A               	movf	___fttol@exp1& (0+255),w,b
  5590  001E50  A4D8               	btfss	status,2,c
  5591  001E52  D009               	goto	l2991
  5592                           
  5593                           ; BSR set to: 0
  5594  001E54  0E00               	movlw	0
  5595  001E56  6E4F               	movwf	?___fttol,c
  5596  001E58  0E00               	movlw	0
  5597  001E5A  6E50               	movwf	?___fttol+1,c
  5598  001E5C  0E00               	movlw	0
  5599  001E5E  6E51               	movwf	?___fttol+2,c
  5600  001E60  0E00               	movlw	0
  5601  001E62  6E52               	movwf	?___fttol+3,c
  5602                           
  5603                           ; BSR set to: 0
  5604  001E64  0012               	return	
  5605  001E66                     l2991:
  5606                           
  5607                           ; BSR set to: 0
  5608  001E66  0E17               	movlw	23
  5609  001E68  0100               	movlb	0	; () banked
  5610  001E6A  6F80               	movwf	??___fttol& (0+255),b
  5611  001E6C  C04F  F081         	movff	___fttol@f1,??___fttol+1
  5612  001E70  C050  F082         	movff	___fttol@f1+1,??___fttol+2
  5613  001E74  C051  F083         	movff	___fttol@f1+2,??___fttol+3
  5614  001E78  0100               	movlb	0	; () banked
  5615  001E7A  2980               	incf	??___fttol& (0+255),w,b
  5616  001E7C  0100               	movlb	0	; () banked
  5617  001E7E  6F84               	movwf	(??___fttol+4)& (0+255),b
  5618  001E80  D005               	goto	u3450
  5619  001E82                     u3455:
  5620  001E82  0100               	movlb	0	; () banked
  5621  001E84  90D8               	bcf	status,0,c
  5622  001E86  3383               	rrcf	(??___fttol+3)& (0+255),f,b
  5623  001E88  3382               	rrcf	(??___fttol+2)& (0+255),f,b
  5624  001E8A  3381               	rrcf	(??___fttol+1)& (0+255),f,b
  5625  001E8C                     u3450:
  5626  001E8C  0100               	movlb	0	; () banked
  5627  001E8E  2F84               	decfsz	(??___fttol+4)& (0+255),f,b
  5628  001E90  D7F8               	goto	u3455
  5629  001E92  0100               	movlb	0	; () banked
  5630  001E94  5181               	movf	(??___fttol+1)& (0+255),w,b
  5631  001E96  0100               	movlb	0	; () banked
  5632  001E98  6F85               	movwf	___fttol@sign1& (0+255),b
  5633                           
  5634                           ; BSR set to: 0
  5635  001E9A  8E50               	bsf	___fttol@f1+1,7,c
  5636                           
  5637                           ; BSR set to: 0
  5638  001E9C  0EFF               	movlw	255
  5639  001E9E  164F               	andwf	___fttol@f1,f,c
  5640  001EA0  0EFF               	movlw	255
  5641  001EA2  1650               	andwf	___fttol@f1+1,f,c
  5642  001EA4  0E00               	movlw	0
  5643  001EA6  1651               	andwf	___fttol@f1+2,f,c
  5644                           
  5645                           ; BSR set to: 0
  5646  001EA8  504F               	movf	___fttol@f1,w,c
  5647  001EAA  0100               	movlb	0	; () banked
  5648  001EAC  6F86               	movwf	___fttol@lval& (0+255),b
  5649  001EAE  5050               	movf	___fttol@f1+1,w,c
  5650  001EB0  0100               	movlb	0	; () banked
  5651  001EB2  6F87               	movwf	(___fttol@lval+1)& (0+255),b
  5652  001EB4  5051               	movf	___fttol@f1+2,w,c
  5653  001EB6  0100               	movlb	0	; () banked
  5654  001EB8  6F88               	movwf	(___fttol@lval+2)& (0+255),b
  5655  001EBA  0100               	movlb	0	; () banked
  5656  001EBC  6B89               	clrf	(___fttol@lval+3)& (0+255),b
  5657                           
  5658                           ; BSR set to: 0
  5659  001EBE  0E8E               	movlw	142
  5660  001EC0  0100               	movlb	0	; () banked
  5661  001EC2  5F8A               	subwf	___fttol@exp1& (0+255),f,b
  5662                           
  5663                           ; BSR set to: 0
  5664  001EC4  0100               	movlb	0	; () banked
  5665  001EC6  AF8A               	btfss	___fttol@exp1& (0+255),7,b
  5666  001EC8  D019               	goto	l3013
  5667                           
  5668                           ; BSR set to: 0
  5669  001ECA  0100               	movlb	0	; () banked
  5670  001ECC  518A               	movf	___fttol@exp1& (0+255),w,b
  5671  001ECE  0A80               	xorlw	128
  5672  001ED0  0F8F               	addlw	143
  5673  001ED2  B0D8               	btfsc	status,0,c
  5674  001ED4  D009               	goto	l3009
  5675                           
  5676                           ; BSR set to: 0
  5677  001ED6  0E00               	movlw	0
  5678  001ED8  6E4F               	movwf	?___fttol,c
  5679  001EDA  0E00               	movlw	0
  5680  001EDC  6E50               	movwf	?___fttol+1,c
  5681  001EDE  0E00               	movlw	0
  5682  001EE0  6E51               	movwf	?___fttol+2,c
  5683  001EE2  0E00               	movlw	0
  5684  001EE4  6E52               	movwf	?___fttol+3,c
  5685                           
  5686                           ; BSR set to: 0
  5687  001EE6  0012               	return	
  5688  001EE8                     l3009:
  5689                           
  5690                           ; BSR set to: 0
  5691  001EE8  0100               	movlb	0	; () banked
  5692  001EEA  90D8               	bcf	status,0,c
  5693  001EEC  3389               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5694  001EEE  3388               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5695  001EF0  3387               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5696  001EF2  3386               	rrcf	___fttol@lval& (0+255),f,b
  5697                           
  5698                           ; BSR set to: 0
  5699  001EF4  0100               	movlb	0	; () banked
  5700  001EF6  3F8A               	incfsz	___fttol@exp1& (0+255),f,b
  5701  001EF8  D7F7               	goto	l3009
  5702                           
  5703                           ; BSR set to: 0
  5704  001EFA  D01A               	goto	l3023
  5705  001EFC                     l3013:
  5706                           
  5707                           ; BSR set to: 0
  5708  001EFC  0E17               	movlw	23
  5709  001EFE  0100               	movlb	0	; () banked
  5710  001F00  658A               	cpfsgt	___fttol@exp1& (0+255),b
  5711  001F02  D011               	goto	l3021
  5712                           
  5713                           ; BSR set to: 0
  5714  001F04  0E00               	movlw	0
  5715  001F06  6E4F               	movwf	?___fttol,c
  5716  001F08  0E00               	movlw	0
  5717  001F0A  6E50               	movwf	?___fttol+1,c
  5718  001F0C  0E00               	movlw	0
  5719  001F0E  6E51               	movwf	?___fttol+2,c
  5720  001F10  0E00               	movlw	0
  5721  001F12  6E52               	movwf	?___fttol+3,c
  5722                           
  5723                           ; BSR set to: 0
  5724  001F14  0012               	return	
  5725  001F16                     l3019:
  5726                           
  5727                           ; BSR set to: 0
  5728  001F16  0100               	movlb	0	; () banked
  5729  001F18  90D8               	bcf	status,0,c
  5730  001F1A  3786               	rlcf	___fttol@lval& (0+255),f,b
  5731  001F1C  3787               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5732  001F1E  3788               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5733  001F20  3789               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5734  001F22  0100               	movlb	0	; () banked
  5735  001F24  078A               	decf	___fttol@exp1& (0+255),f,b
  5736  001F26                     l3021:
  5737                           
  5738                           ; BSR set to: 0
  5739  001F26  0100               	movlb	0	; () banked
  5740  001F28  518A               	movf	___fttol@exp1& (0+255),w,b
  5741  001F2A  0100               	movlb	0	; () banked
  5742  001F2C  A4D8               	btfss	status,2,c
  5743  001F2E  D7F3               	goto	l3019
  5744  001F30                     l3023:
  5745                           
  5746                           ; BSR set to: 0
  5747  001F30  0100               	movlb	0	; () banked
  5748  001F32  5185               	movf	___fttol@sign1& (0+255),w,b
  5749  001F34  0100               	movlb	0	; () banked
  5750  001F36  B4D8               	btfsc	status,2,c
  5751  001F38  D009               	goto	l3027
  5752                           
  5753                           ; BSR set to: 0
  5754  001F3A  0100               	movlb	0	; () banked
  5755  001F3C  1F89               	comf	(___fttol@lval+3)& (0+255),f,b
  5756  001F3E  1F88               	comf	(___fttol@lval+2)& (0+255),f,b
  5757  001F40  1F87               	comf	(___fttol@lval+1)& (0+255),f,b
  5758  001F42  6D86               	negf	___fttol@lval& (0+255),b
  5759  001F44  0E00               	movlw	0
  5760  001F46  2387               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5761  001F48  2388               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5762  001F4A  2389               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5763  001F4C                     l3027:
  5764                           
  5765                           ; BSR set to: 0
  5766  001F4C  C086  F04F         	movff	___fttol@lval,?___fttol
  5767  001F50  C087  F050         	movff	___fttol@lval+1,?___fttol+1
  5768  001F54  C088  F051         	movff	___fttol@lval+2,?___fttol+2
  5769  001F58  C089  F052         	movff	___fttol@lval+3,?___fttol+3
  5770  001F5C  0012               	return	
  5771  001F5E                     __end_of___fttol:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           postdec1	equ	0xFE5
  5783                           fsr1h	equ	0xFE2
  5784                           fsr1l	equ	0xFE1
  5785                           indf2	equ	0xFDF
  5786                           postinc2	equ	0xFDE
  5787                           postdec2	equ	0xFDD
  5788                           fsr2h	equ	0xFDA
  5789                           fsr2l	equ	0xFD9
  5790                           status	equ	0xFD8
  5791                           
  5792 ;; *************** function ___ftsub *****************
  5793 ;; Defined at:
  5794 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;  f1              3   12[BANK0 ] float 
  5797 ;;  f2              3   15[BANK0 ] float 
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;		None
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  3   12[BANK0 ] float 
  5802 ;; Registers used:
  5803 ;;		wreg, status,2, status,0, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5809 ;;      Params:         0       6       0       0       0       0       0
  5810 ;;      Locals:         0       0       0       0       0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0
  5812 ;;      Totals:         0       6       0       0       0       0       0
  5813 ;;Total ram usage:        6 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    5
  5816 ;; This function calls:
  5817 ;;		___ftadd
  5818 ;; This function is called by:
  5819 ;;		_sprintf
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text18
  5824  002584                     __ptext18:
  5825                           	opt stack 0
  5826  002584                     ___ftsub:
  5827                           	opt stack 24
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;incstack = 0
  5831  002584  0100               	movlb	0	; () banked
  5832  002586  518F               	movf	___ftsub@f2& (0+255),w,b
  5833  002588  0100               	movlb	0	; () banked
  5834  00258A  1190               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  5835  00258C  0100               	movlb	0	; () banked
  5836  00258E  1191               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  5837  002590  B4D8               	btfsc	status,2,c
  5838  002592  D009               	goto	l2981
  5839                           
  5840                           ; BSR set to: 0
  5841  002594  0E00               	movlw	0
  5842  002596  0100               	movlb	0	; () banked
  5843  002598  1B8F               	xorwf	___ftsub@f2& (0+255),f,b
  5844  00259A  0E00               	movlw	0
  5845  00259C  0100               	movlb	0	; () banked
  5846  00259E  1B90               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5847  0025A0  0E80               	movlw	128
  5848  0025A2  0100               	movlb	0	; () banked
  5849  0025A4  1B91               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5850  0025A6                     l2981:
  5851                           
  5852                           ; BSR set to: 0
  5853  0025A6  C08C  F080         	movff	___ftsub@f1,___ftadd@f1
  5854  0025AA  C08D  F081         	movff	___ftsub@f1+1,___ftadd@f1+1
  5855  0025AE  C08E  F082         	movff	___ftsub@f1+2,___ftadd@f1+2
  5856  0025B2  C08F  F083         	movff	___ftsub@f2,___ftadd@f2
  5857  0025B6  C090  F084         	movff	___ftsub@f2+1,___ftadd@f2+1
  5858  0025BA  C091  F085         	movff	___ftsub@f2+2,___ftadd@f2+2
  5859  0025BE  EC73  F00B         	call	___ftadd	;wreg free
  5860  0025C2  C080  F08C         	movff	?___ftadd,?___ftsub
  5861  0025C6  C081  F08D         	movff	?___ftadd+1,?___ftsub+1
  5862  0025CA  C082  F08E         	movff	?___ftadd+2,?___ftsub+2
  5863  0025CE  0012               	return	
  5864  0025D0                     __end_of___ftsub:
  5865                           	opt stack 0
  5866                           tblptru	equ	0xFF8
  5867                           tblptrh	equ	0xFF7
  5868                           tblptrl	equ	0xFF6
  5869                           tablat	equ	0xFF5
  5870                           prodh	equ	0xFF4
  5871                           prodl	equ	0xFF3
  5872                           intcon	equ	0xFF2
  5873                           postinc0	equ	0xFEE
  5874                           wreg	equ	0xFE8
  5875                           postdec1	equ	0xFE5
  5876                           fsr1h	equ	0xFE2
  5877                           fsr1l	equ	0xFE1
  5878                           indf2	equ	0xFDF
  5879                           postinc2	equ	0xFDE
  5880                           postdec2	equ	0xFDD
  5881                           fsr2h	equ	0xFDA
  5882                           fsr2l	equ	0xFD9
  5883                           status	equ	0xFD8
  5884                           
  5885 ;; *************** function ___ftadd *****************
  5886 ;; Defined at:
  5887 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  f1              3    0[BANK0 ] float 
  5890 ;;  f2              3    3[BANK0 ] float 
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  exp1            1   11[BANK0 ] unsigned char 
  5893 ;;  exp2            1   10[BANK0 ] unsigned char 
  5894 ;;  sign            1    9[BANK0 ] unsigned char 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  3    0[BANK0 ] float 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5904 ;;      Params:         0       6       0       0       0       0       0
  5905 ;;      Locals:         0       3       0       0       0       0       0
  5906 ;;      Temps:          0       3       0       0       0       0       0
  5907 ;;      Totals:         0      12       0       0       0       0       0
  5908 ;;Total ram usage:       12 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    4
  5911 ;; This function calls:
  5912 ;;		___ftpack
  5913 ;; This function is called by:
  5914 ;;		_sprintf
  5915 ;;		___ftsub
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           	psect	text19
  5920  0016E6                     __ptext19:
  5921                           	opt stack 0
  5922  0016E6                     ___ftadd:
  5923                           	opt stack 24
  5924                           
  5925                           ;incstack = 0
  5926  0016E6  C082  F086         	movff	___ftadd@f1+2,??___ftadd
  5927  0016EA  0100               	movlb	0	; () banked
  5928  0016EC  6B87               	clrf	(??___ftadd+1)& (0+255),b
  5929  0016EE  6B88               	clrf	(??___ftadd+2)& (0+255),b
  5930  0016F0  0100               	movlb	0	; () banked
  5931  0016F2  3581               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5932  0016F4  0100               	movlb	0	; () banked
  5933  0016F6  3786               	rlcf	??___ftadd& (0+255),f,b
  5934  0016F8  E301               	bnc	u3211
  5935  0016FA  8187               	bsf	(??___ftadd+1)& (0+255),0,b
  5936  0016FC                     u3211:
  5937  0016FC  0100               	movlb	0	; () banked
  5938  0016FE  5186               	movf	??___ftadd& (0+255),w,b
  5939  001700  0100               	movlb	0	; () banked
  5940  001702  6F8B               	movwf	___ftadd@exp1& (0+255),b
  5941  001704  C085  F086         	movff	___ftadd@f2+2,??___ftadd
  5942  001708  0100               	movlb	0	; () banked
  5943  00170A  6B87               	clrf	(??___ftadd+1)& (0+255),b
  5944  00170C  6B88               	clrf	(??___ftadd+2)& (0+255),b
  5945  00170E  0100               	movlb	0	; () banked
  5946  001710  3584               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5947  001712  0100               	movlb	0	; () banked
  5948  001714  3786               	rlcf	??___ftadd& (0+255),f,b
  5949  001716  E301               	bnc	u3221
  5950  001718  8187               	bsf	(??___ftadd+1)& (0+255),0,b
  5951  00171A                     u3221:
  5952  00171A  0100               	movlb	0	; () banked
  5953  00171C  5186               	movf	??___ftadd& (0+255),w,b
  5954  00171E  0100               	movlb	0	; () banked
  5955  001720  6F8A               	movwf	___ftadd@exp2& (0+255),b
  5956                           
  5957                           ; BSR set to: 0
  5958  001722  0100               	movlb	0	; () banked
  5959  001724  518B               	movf	___ftadd@exp1& (0+255),w,b
  5960  001726  0100               	movlb	0	; () banked
  5961  001728  B4D8               	btfsc	status,2,c
  5962  00172A  D011               	goto	l513
  5963                           
  5964                           ; BSR set to: 0
  5965  00172C  0100               	movlb	0	; () banked
  5966  00172E  518A               	movf	___ftadd@exp2& (0+255),w,b
  5967  001730  0100               	movlb	0	; () banked
  5968  001732  5D8B               	subwf	___ftadd@exp1& (0+255),w,b
  5969  001734  B0D8               	btfsc	status,0,c
  5970  001736  D012               	goto	l2915
  5971                           
  5972                           ; BSR set to: 0
  5973  001738  0100               	movlb	0	; () banked
  5974  00173A  518B               	movf	___ftadd@exp1& (0+255),w,b
  5975  00173C  0800               	sublw	0
  5976  00173E  0100               	movlb	0	; () banked
  5977  001740  258A               	addwf	___ftadd@exp2& (0+255),w,b
  5978  001742  0100               	movlb	0	; () banked
  5979  001744  6F86               	movwf	??___ftadd& (0+255),b
  5980  001746  0E18               	movlw	24
  5981  001748  0100               	movlb	0	; () banked
  5982  00174A  6586               	cpfsgt	??___ftadd& (0+255),b
  5983  00174C  D007               	goto	l2915
  5984  00174E                     l513:
  5985                           
  5986                           ; BSR set to: 0
  5987  00174E  C083  F080         	movff	___ftadd@f2,?___ftadd
  5988  001752  C084  F081         	movff	___ftadd@f2+1,?___ftadd+1
  5989  001756  C085  F082         	movff	___ftadd@f2+2,?___ftadd+2
  5990  00175A  0012               	return	
  5991  00175C                     l2915:
  5992                           
  5993                           ; BSR set to: 0
  5994  00175C  0100               	movlb	0	; () banked
  5995  00175E  518A               	movf	___ftadd@exp2& (0+255),w,b
  5996  001760  0100               	movlb	0	; () banked
  5997  001762  B4D8               	btfsc	status,2,c
  5998  001764  D011               	goto	l517
  5999                           
  6000                           ; BSR set to: 0
  6001  001766  0100               	movlb	0	; () banked
  6002  001768  518B               	movf	___ftadd@exp1& (0+255),w,b
  6003  00176A  0100               	movlb	0	; () banked
  6004  00176C  5D8A               	subwf	___ftadd@exp2& (0+255),w,b
  6005  00176E  B0D8               	btfsc	status,0,c
  6006  001770  D012               	goto	l2921
  6007                           
  6008                           ; BSR set to: 0
  6009  001772  0100               	movlb	0	; () banked
  6010  001774  518A               	movf	___ftadd@exp2& (0+255),w,b
  6011  001776  0800               	sublw	0
  6012  001778  0100               	movlb	0	; () banked
  6013  00177A  258B               	addwf	___ftadd@exp1& (0+255),w,b
  6014  00177C  0100               	movlb	0	; () banked
  6015  00177E  6F86               	movwf	??___ftadd& (0+255),b
  6016  001780  0E18               	movlw	24
  6017  001782  0100               	movlb	0	; () banked
  6018  001784  6586               	cpfsgt	??___ftadd& (0+255),b
  6019  001786  D007               	goto	l2921
  6020  001788                     l517:
  6021                           
  6022                           ; BSR set to: 0
  6023  001788  C080  F080         	movff	___ftadd@f1,?___ftadd
  6024  00178C  C081  F081         	movff	___ftadd@f1+1,?___ftadd+1
  6025  001790  C082  F082         	movff	___ftadd@f1+2,?___ftadd+2
  6026  001794  0012               	return	
  6027  001796                     l2921:
  6028                           
  6029                           ; BSR set to: 0
  6030  001796  0E06               	movlw	6
  6031  001798  0100               	movlb	0	; () banked
  6032  00179A  6F89               	movwf	___ftadd@sign& (0+255),b
  6033                           
  6034                           ; BSR set to: 0
  6035  00179C  0100               	movlb	0	; () banked
  6036  00179E  AF82               	btfss	(___ftadd@f1+2)& (0+255),7,b
  6037  0017A0  D002               	goto	l2927
  6038                           
  6039                           ; BSR set to: 0
  6040  0017A2  0100               	movlb	0	; () banked
  6041  0017A4  8F89               	bsf	___ftadd@sign& (0+255),7,b
  6042  0017A6                     l2927:
  6043                           
  6044                           ; BSR set to: 0
  6045  0017A6  0100               	movlb	0	; () banked
  6046  0017A8  AF85               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6047  0017AA  D002               	goto	l519
  6048                           
  6049                           ; BSR set to: 0
  6050  0017AC  0100               	movlb	0	; () banked
  6051  0017AE  8D89               	bsf	___ftadd@sign& (0+255),6,b
  6052  0017B0                     l519:
  6053                           
  6054                           ; BSR set to: 0
  6055  0017B0  0100               	movlb	0	; () banked
  6056  0017B2  8F81               	bsf	(___ftadd@f1+1)& (0+255),7,b
  6057                           
  6058                           ; BSR set to: 0
  6059  0017B4  0EFF               	movlw	255
  6060  0017B6  0100               	movlb	0	; () banked
  6061  0017B8  1780               	andwf	___ftadd@f1& (0+255),f,b
  6062  0017BA  0EFF               	movlw	255
  6063  0017BC  0100               	movlb	0	; () banked
  6064  0017BE  1781               	andwf	(___ftadd@f1+1)& (0+255),f,b
  6065  0017C0  0E00               	movlw	0
  6066  0017C2  0100               	movlb	0	; () banked
  6067  0017C4  1782               	andwf	(___ftadd@f1+2)& (0+255),f,b
  6068  0017C6  0100               	movlb	0	; () banked
  6069  0017C8  8F84               	bsf	(___ftadd@f2+1)& (0+255),7,b
  6070                           
  6071                           ; BSR set to: 0
  6072  0017CA  0EFF               	movlw	255
  6073  0017CC  0100               	movlb	0	; () banked
  6074  0017CE  1783               	andwf	___ftadd@f2& (0+255),f,b
  6075  0017D0  0EFF               	movlw	255
  6076  0017D2  0100               	movlb	0	; () banked
  6077  0017D4  1784               	andwf	(___ftadd@f2+1)& (0+255),f,b
  6078  0017D6  0E00               	movlw	0
  6079  0017D8  0100               	movlb	0	; () banked
  6080  0017DA  1785               	andwf	(___ftadd@f2+2)& (0+255),f,b
  6081                           
  6082                           ; BSR set to: 0
  6083  0017DC  0100               	movlb	0	; () banked
  6084  0017DE  518A               	movf	___ftadd@exp2& (0+255),w,b
  6085  0017E0  0100               	movlb	0	; () banked
  6086  0017E2  5D8B               	subwf	___ftadd@exp1& (0+255),w,b
  6087  0017E4  B0D8               	btfsc	status,0,c
  6088  0017E6  D025               	goto	l2947
  6089  0017E8                     l2937:
  6090                           
  6091                           ; BSR set to: 0
  6092  0017E8  0100               	movlb	0	; () banked
  6093  0017EA  90D8               	bcf	status,0,c
  6094  0017EC  3783               	rlcf	___ftadd@f2& (0+255),f,b
  6095  0017EE  3784               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  6096  0017F0  3785               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  6097  0017F2  0100               	movlb	0	; () banked
  6098  0017F4  078A               	decf	___ftadd@exp2& (0+255),f,b
  6099                           
  6100                           ; BSR set to: 0
  6101  0017F6  0100               	movlb	0	; () banked
  6102  0017F8  518B               	movf	___ftadd@exp1& (0+255),w,b
  6103  0017FA  0100               	movlb	0	; () banked
  6104  0017FC  198A               	xorwf	___ftadd@exp2& (0+255),w,b
  6105  0017FE  B4D8               	btfsc	status,2,c
  6106  001800  D011               	goto	l2945
  6107                           
  6108                           ; BSR set to: 0
  6109  001802  0100               	movlb	0	; () banked
  6110  001804  0789               	decf	___ftadd@sign& (0+255),f,b
  6111  001806  C089  F086         	movff	___ftadd@sign,??___ftadd
  6112  00180A  0E07               	movlw	7
  6113  00180C  0100               	movlb	0	; () banked
  6114  00180E  1786               	andwf	??___ftadd& (0+255),f,b
  6115  001810  B4D8               	btfsc	status,2,c
  6116  001812  D008               	goto	l2945
  6117  001814  D7E9               	goto	l2937
  6118  001816                     l2943:
  6119                           
  6120                           ; BSR set to: 0
  6121  001816  0100               	movlb	0	; () banked
  6122  001818  90D8               	bcf	status,0,c
  6123  00181A  3382               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  6124  00181C  3381               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  6125  00181E  3380               	rrcf	___ftadd@f1& (0+255),f,b
  6126  001820  0100               	movlb	0	; () banked
  6127  001822  2B8B               	incf	___ftadd@exp1& (0+255),f,b
  6128  001824                     l2945:
  6129                           
  6130                           ; BSR set to: 0
  6131  001824  0100               	movlb	0	; () banked
  6132  001826  518A               	movf	___ftadd@exp2& (0+255),w,b
  6133  001828  0100               	movlb	0	; () banked
  6134  00182A  198B               	xorwf	___ftadd@exp1& (0+255),w,b
  6135  00182C  B4D8               	btfsc	status,2,c
  6136  00182E  D02B               	goto	l528
  6137  001830  D7F2               	goto	l2943
  6138  001832                     l2947:
  6139                           
  6140                           ; BSR set to: 0
  6141  001832  0100               	movlb	0	; () banked
  6142  001834  518B               	movf	___ftadd@exp1& (0+255),w,b
  6143  001836  0100               	movlb	0	; () banked
  6144  001838  5D8A               	subwf	___ftadd@exp2& (0+255),w,b
  6145  00183A  B0D8               	btfsc	status,0,c
  6146  00183C  D024               	goto	l528
  6147  00183E                     l2949:
  6148                           
  6149                           ; BSR set to: 0
  6150  00183E  0100               	movlb	0	; () banked
  6151  001840  90D8               	bcf	status,0,c
  6152  001842  3780               	rlcf	___ftadd@f1& (0+255),f,b
  6153  001844  3781               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  6154  001846  3782               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  6155  001848  0100               	movlb	0	; () banked
  6156  00184A  078B               	decf	___ftadd@exp1& (0+255),f,b
  6157                           
  6158                           ; BSR set to: 0
  6159  00184C  0100               	movlb	0	; () banked
  6160  00184E  518B               	movf	___ftadd@exp1& (0+255),w,b
  6161  001850  0100               	movlb	0	; () banked
  6162  001852  198A               	xorwf	___ftadd@exp2& (0+255),w,b
  6163  001854  B4D8               	btfsc	status,2,c
  6164  001856  D011               	goto	l2957
  6165                           
  6166                           ; BSR set to: 0
  6167  001858  0100               	movlb	0	; () banked
  6168  00185A  0789               	decf	___ftadd@sign& (0+255),f,b
  6169  00185C  C089  F086         	movff	___ftadd@sign,??___ftadd
  6170  001860  0E07               	movlw	7
  6171  001862  0100               	movlb	0	; () banked
  6172  001864  1786               	andwf	??___ftadd& (0+255),f,b
  6173  001866  B4D8               	btfsc	status,2,c
  6174  001868  D008               	goto	l2957
  6175  00186A  D7E9               	goto	l2949
  6176  00186C                     l2955:
  6177                           
  6178                           ; BSR set to: 0
  6179  00186C  0100               	movlb	0	; () banked
  6180  00186E  90D8               	bcf	status,0,c
  6181  001870  3385               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  6182  001872  3384               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  6183  001874  3383               	rrcf	___ftadd@f2& (0+255),f,b
  6184  001876  0100               	movlb	0	; () banked
  6185  001878  2B8A               	incf	___ftadd@exp2& (0+255),f,b
  6186  00187A                     l2957:
  6187                           
  6188                           ; BSR set to: 0
  6189  00187A  0100               	movlb	0	; () banked
  6190  00187C  518A               	movf	___ftadd@exp2& (0+255),w,b
  6191  00187E  0100               	movlb	0	; () banked
  6192  001880  198B               	xorwf	___ftadd@exp1& (0+255),w,b
  6193  001882  A4D8               	btfss	status,2,c
  6194  001884  D7F3               	goto	l2955
  6195  001886                     l528:
  6196                           
  6197                           ; BSR set to: 0
  6198  001886  0100               	movlb	0	; () banked
  6199  001888  AF89               	btfss	___ftadd@sign& (0+255),7,b
  6200  00188A  D012               	goto	l537
  6201                           
  6202                           ; BSR set to: 0
  6203  00188C  0EFF               	movlw	255
  6204  00188E  0100               	movlb	0	; () banked
  6205  001890  1B80               	xorwf	___ftadd@f1& (0+255),f,b
  6206  001892  0EFF               	movlw	255
  6207  001894  0100               	movlb	0	; () banked
  6208  001896  1B81               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  6209  001898  0EFF               	movlw	255
  6210  00189A  0100               	movlb	0	; () banked
  6211  00189C  1B82               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  6212  00189E  0E01               	movlw	1
  6213  0018A0  0100               	movlb	0	; () banked
  6214  0018A2  2780               	addwf	___ftadd@f1& (0+255),f,b
  6215  0018A4  0E00               	movlw	0
  6216  0018A6  0100               	movlb	0	; () banked
  6217  0018A8  2381               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  6218  0018AA  0E00               	movlw	0
  6219  0018AC  0100               	movlb	0	; () banked
  6220  0018AE  2382               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  6221  0018B0                     l537:
  6222                           
  6223                           ; BSR set to: 0
  6224  0018B0  0100               	movlb	0	; () banked
  6225  0018B2  AD89               	btfss	___ftadd@sign& (0+255),6,b
  6226  0018B4  D012               	goto	l2963
  6227                           
  6228                           ; BSR set to: 0
  6229  0018B6  0EFF               	movlw	255
  6230  0018B8  0100               	movlb	0	; () banked
  6231  0018BA  1B83               	xorwf	___ftadd@f2& (0+255),f,b
  6232  0018BC  0EFF               	movlw	255
  6233  0018BE  0100               	movlb	0	; () banked
  6234  0018C0  1B84               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6235  0018C2  0EFF               	movlw	255
  6236  0018C4  0100               	movlb	0	; () banked
  6237  0018C6  1B85               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6238  0018C8  0E01               	movlw	1
  6239  0018CA  0100               	movlb	0	; () banked
  6240  0018CC  2783               	addwf	___ftadd@f2& (0+255),f,b
  6241  0018CE  0E00               	movlw	0
  6242  0018D0  0100               	movlb	0	; () banked
  6243  0018D2  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6244  0018D4  0E00               	movlw	0
  6245  0018D6  0100               	movlb	0	; () banked
  6246  0018D8  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6247  0018DA                     l2963:
  6248                           
  6249                           ; BSR set to: 0
  6250  0018DA  0E00               	movlw	0
  6251  0018DC  0100               	movlb	0	; () banked
  6252  0018DE  6F89               	movwf	___ftadd@sign& (0+255),b
  6253                           
  6254                           ; BSR set to: 0
  6255  0018E0  0100               	movlb	0	; () banked
  6256  0018E2  5180               	movf	___ftadd@f1& (0+255),w,b
  6257  0018E4  0100               	movlb	0	; () banked
  6258  0018E6  2783               	addwf	___ftadd@f2& (0+255),f,b
  6259  0018E8  0100               	movlb	0	; () banked
  6260  0018EA  5181               	movf	(___ftadd@f1+1)& (0+255),w,b
  6261  0018EC  0100               	movlb	0	; () banked
  6262  0018EE  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6263  0018F0  0100               	movlb	0	; () banked
  6264  0018F2  5182               	movf	(___ftadd@f1+2)& (0+255),w,b
  6265  0018F4  0100               	movlb	0	; () banked
  6266  0018F6  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6267                           
  6268                           ; BSR set to: 0
  6269  0018F8  0100               	movlb	0	; () banked
  6270  0018FA  AF85               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6271  0018FC  D015               	goto	l2973
  6272                           
  6273                           ; BSR set to: 0
  6274  0018FE  0EFF               	movlw	255
  6275  001900  0100               	movlb	0	; () banked
  6276  001902  1B83               	xorwf	___ftadd@f2& (0+255),f,b
  6277  001904  0EFF               	movlw	255
  6278  001906  0100               	movlb	0	; () banked
  6279  001908  1B84               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6280  00190A  0EFF               	movlw	255
  6281  00190C  0100               	movlb	0	; () banked
  6282  00190E  1B85               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6283  001910  0E01               	movlw	1
  6284  001912  0100               	movlb	0	; () banked
  6285  001914  2783               	addwf	___ftadd@f2& (0+255),f,b
  6286  001916  0E00               	movlw	0
  6287  001918  0100               	movlb	0	; () banked
  6288  00191A  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6289  00191C  0E00               	movlw	0
  6290  00191E  0100               	movlb	0	; () banked
  6291  001920  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6292                           
  6293                           ; BSR set to: 0
  6294  001922  0E01               	movlw	1
  6295  001924  0100               	movlb	0	; () banked
  6296  001926  6F89               	movwf	___ftadd@sign& (0+255),b
  6297  001928                     l2973:
  6298                           
  6299                           ; BSR set to: 0
  6300  001928  C083  F025         	movff	___ftadd@f2,___ftpack@arg
  6301  00192C  C084  F026         	movff	___ftadd@f2+1,___ftpack@arg+1
  6302  001930  C085  F027         	movff	___ftadd@f2+2,___ftpack@arg+2
  6303  001934  C08B  F028         	movff	___ftadd@exp1,___ftpack@exp
  6304  001938  C089  F029         	movff	___ftadd@sign,___ftpack@sign
  6305  00193C  ECBD  F010         	call	___ftpack	;wreg free
  6306  001940  C025  F080         	movff	?___ftpack,?___ftadd
  6307  001944  C026  F081         	movff	?___ftpack+1,?___ftadd+1
  6308  001948  C027  F082         	movff	?___ftpack+2,?___ftadd+2
  6309  00194C  0012               	return	
  6310  00194E                     __end_of___ftadd:
  6311                           	opt stack 0
  6312                           tblptru	equ	0xFF8
  6313                           tblptrh	equ	0xFF7
  6314                           tblptrl	equ	0xFF6
  6315                           tablat	equ	0xFF5
  6316                           prodh	equ	0xFF4
  6317                           prodl	equ	0xFF3
  6318                           intcon	equ	0xFF2
  6319                           postinc0	equ	0xFEE
  6320                           wreg	equ	0xFE8
  6321                           postdec1	equ	0xFE5
  6322                           fsr1h	equ	0xFE2
  6323                           fsr1l	equ	0xFE1
  6324                           indf2	equ	0xFDF
  6325                           postinc2	equ	0xFDE
  6326                           postdec2	equ	0xFDD
  6327                           fsr2h	equ	0xFDA
  6328                           fsr2l	equ	0xFD9
  6329                           status	equ	0xFD8
  6330                           
  6331 ;; *************** function ___ftneg *****************
  6332 ;; Defined at:
  6333 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  f1              3   36[COMRAM] float 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;		None
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  3   36[COMRAM] float 
  6340 ;; Registers used:
  6341 ;;		wreg, status,2, status,0
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6347 ;;      Params:         3       0       0       0       0       0       0
  6348 ;;      Locals:         0       0       0       0       0       0       0
  6349 ;;      Temps:          0       0       0       0       0       0       0
  6350 ;;      Totals:         3       0       0       0       0       0       0
  6351 ;;Total ram usage:        3 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    3
  6354 ;; This function calls:
  6355 ;;		Nothing
  6356 ;; This function is called by:
  6357 ;;		_sprintf
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           	psect	text20
  6362  0026BC                     __ptext20:
  6363                           	opt stack 0
  6364  0026BC                     ___ftneg:
  6365                           	opt stack 26
  6366                           
  6367                           ;incstack = 0
  6368  0026BC  5025               	movf	___ftneg@f1,w,c
  6369  0026BE  1026               	iorwf	___ftneg@f1+1,w,c
  6370  0026C0  1027               	iorwf	___ftneg@f1+2,w,c
  6371  0026C2  B4D8               	btfsc	status,2,c
  6372  0026C4  D006               	goto	l587
  6373  0026C6  0E00               	movlw	0
  6374  0026C8  1A25               	xorwf	___ftneg@f1,f,c
  6375  0026CA  0E00               	movlw	0
  6376  0026CC  1A26               	xorwf	___ftneg@f1+1,f,c
  6377  0026CE  0E80               	movlw	128
  6378  0026D0  1A27               	xorwf	___ftneg@f1+2,f,c
  6379  0026D2                     l587:
  6380  0026D2  C025  F025         	movff	___ftneg@f1,?___ftneg
  6381  0026D6  C026  F026         	movff	___ftneg@f1+1,?___ftneg+1
  6382  0026DA  C027  F027         	movff	___ftneg@f1+2,?___ftneg+2
  6383  0026DE  0012               	return		;funcret
  6384  0026E0                     __end_of___ftneg:
  6385                           	opt stack 0
  6386                           tblptru	equ	0xFF8
  6387                           tblptrh	equ	0xFF7
  6388                           tblptrl	equ	0xFF6
  6389                           tablat	equ	0xFF5
  6390                           prodh	equ	0xFF4
  6391                           prodl	equ	0xFF3
  6392                           intcon	equ	0xFF2
  6393                           postinc0	equ	0xFEE
  6394                           wreg	equ	0xFE8
  6395                           postdec1	equ	0xFE5
  6396                           fsr1h	equ	0xFE2
  6397                           fsr1l	equ	0xFE1
  6398                           indf2	equ	0xFDF
  6399                           postinc2	equ	0xFDE
  6400                           postdec2	equ	0xFDD
  6401                           fsr2h	equ	0xFDA
  6402                           fsr2l	equ	0xFD9
  6403                           status	equ	0xFD8
  6404                           
  6405 ;; *************** function ___ftge *****************
  6406 ;; Defined at:
  6407 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;  ff1             3   36[COMRAM] float 
  6410 ;;  ff2             3   39[COMRAM] float 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;		None
  6413 ;; Return value:  Size  Location     Type
  6414 ;;		None               void
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, status,0
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6422 ;;      Params:         6       0       0       0       0       0       0
  6423 ;;      Locals:         0       0       0       0       0       0       0
  6424 ;;      Temps:          3       0       0       0       0       0       0
  6425 ;;      Totals:         9       0       0       0       0       0       0
  6426 ;;Total ram usage:        9 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    3
  6429 ;; This function calls:
  6430 ;;		Nothing
  6431 ;; This function is called by:
  6432 ;;		_sprintf
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           	psect	text21
  6437  0022BC                     __ptext21:
  6438                           	opt stack 0
  6439  0022BC                     ___ftge:
  6440                           	opt stack 26
  6441                           
  6442                           ;incstack = 0
  6443  0022BC  AE27               	btfss	___ftge@ff1+2,7,c
  6444  0022BE  D016               	goto	l2357
  6445  0022C0  C025  F02B         	movff	___ftge@ff1,??___ftge
  6446  0022C4  C026  F02C         	movff	___ftge@ff1+1,??___ftge+1
  6447  0022C8  C027  F02D         	movff	___ftge@ff1+2,??___ftge+2
  6448  0022CC  1E2B               	comf	??___ftge,f,c
  6449  0022CE  1E2C               	comf	??___ftge+1,f,c
  6450  0022D0  1E2D               	comf	??___ftge+2,f,c
  6451  0022D2  2A2B               	incf	??___ftge,f,c
  6452  0022D4  0E00               	movlw	0
  6453  0022D6  222C               	addwfc	??___ftge+1,f,c
  6454  0022D8  222D               	addwfc	??___ftge+2,f,c
  6455  0022DA  0E00               	movlw	0
  6456  0022DC  242B               	addwf	??___ftge,w,c
  6457  0022DE  6E25               	movwf	___ftge@ff1,c
  6458  0022E0  0E00               	movlw	0
  6459  0022E2  202C               	addwfc	??___ftge+1,w,c
  6460  0022E4  6E26               	movwf	___ftge@ff1+1,c
  6461  0022E6  0E80               	movlw	128
  6462  0022E8  202D               	addwfc	??___ftge+2,w,c
  6463  0022EA  6E27               	movwf	___ftge@ff1+2,c
  6464  0022EC                     l2357:
  6465  0022EC  AE2A               	btfss	___ftge@ff2+2,7,c
  6466  0022EE  D016               	goto	l2361
  6467  0022F0  C028  F02B         	movff	___ftge@ff2,??___ftge
  6468  0022F4  C029  F02C         	movff	___ftge@ff2+1,??___ftge+1
  6469  0022F8  C02A  F02D         	movff	___ftge@ff2+2,??___ftge+2
  6470  0022FC  1E2B               	comf	??___ftge,f,c
  6471  0022FE  1E2C               	comf	??___ftge+1,f,c
  6472  002300  1E2D               	comf	??___ftge+2,f,c
  6473  002302  2A2B               	incf	??___ftge,f,c
  6474  002304  0E00               	movlw	0
  6475  002306  222C               	addwfc	??___ftge+1,f,c
  6476  002308  222D               	addwfc	??___ftge+2,f,c
  6477  00230A  0E00               	movlw	0
  6478  00230C  242B               	addwf	??___ftge,w,c
  6479  00230E  6E28               	movwf	___ftge@ff2,c
  6480  002310  0E00               	movlw	0
  6481  002312  202C               	addwfc	??___ftge+1,w,c
  6482  002314  6E29               	movwf	___ftge@ff2+1,c
  6483  002316  0E80               	movlw	128
  6484  002318  202D               	addwfc	??___ftge+2,w,c
  6485  00231A  6E2A               	movwf	___ftge@ff2+2,c
  6486  00231C                     l2361:
  6487  00231C  0E00               	movlw	0
  6488  00231E  1A25               	xorwf	___ftge@ff1,f,c
  6489  002320  0E00               	movlw	0
  6490  002322  1A26               	xorwf	___ftge@ff1+1,f,c
  6491  002324  0E80               	movlw	128
  6492  002326  1A27               	xorwf	___ftge@ff1+2,f,c
  6493  002328  0E00               	movlw	0
  6494  00232A  1A28               	xorwf	___ftge@ff2,f,c
  6495  00232C  0E00               	movlw	0
  6496  00232E  1A29               	xorwf	___ftge@ff2+1,f,c
  6497  002330  0E80               	movlw	128
  6498  002332  1A2A               	xorwf	___ftge@ff2+2,f,c
  6499  002334  5028               	movf	___ftge@ff2,w,c
  6500  002336  5C25               	subwf	___ftge@ff1,w,c
  6501  002338  5029               	movf	___ftge@ff2+1,w,c
  6502  00233A  5826               	subwfb	___ftge@ff1+1,w,c
  6503  00233C  502A               	movf	___ftge@ff2+2,w,c
  6504  00233E  5827               	subwfb	___ftge@ff1+2,w,c
  6505  002340  B0D8               	btfsc	status,0,c
  6506  002342  D002               	goto	l2367
  6507  002344  90D8               	bcf	status,0,c
  6508  002346  0012               	return	
  6509  002348                     l2367:
  6510  002348  80D8               	bsf	status,0,c
  6511  00234A  0012               	return	
  6512  00234C                     __end_of___ftge:
  6513                           	opt stack 0
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           intcon	equ	0xFF2
  6521                           postinc0	equ	0xFEE
  6522                           wreg	equ	0xFE8
  6523                           postdec1	equ	0xFE5
  6524                           fsr1h	equ	0xFE2
  6525                           fsr1l	equ	0xFE1
  6526                           indf2	equ	0xFDF
  6527                           postinc2	equ	0xFDE
  6528                           postdec2	equ	0xFDD
  6529                           fsr2h	equ	0xFDA
  6530                           fsr2l	equ	0xFD9
  6531                           status	equ	0xFD8
  6532                           
  6533 ;; *************** function ___lwtoft *****************
  6534 ;; Defined at:
  6535 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;  c               2   44[COMRAM] unsigned int 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  3   44[COMRAM] float 
  6542 ;; Registers used:
  6543 ;;		wreg, status,2, status,0, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6549 ;;      Params:         3       0       0       0       0       0       0
  6550 ;;      Locals:         0       0       0       0       0       0       0
  6551 ;;      Temps:          0       0       0       0       0       0       0
  6552 ;;      Totals:         3       0       0       0       0       0       0
  6553 ;;Total ram usage:        3 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    4
  6556 ;; This function calls:
  6557 ;;		___ftpack
  6558 ;; This function is called by:
  6559 ;;		_main
  6560 ;; This function uses a non-reentrant model
  6561 ;;
  6562                           
  6563                           	psect	text22
  6564  0026E0                     __ptext22:
  6565                           	opt stack 0
  6566  0026E0                     ___lwtoft:
  6567                           	opt stack 26
  6568                           
  6569                           ;incstack = 0
  6570  0026E0  C02D  F025         	movff	___lwtoft@c,___ftpack@arg
  6571  0026E4  C02E  F026         	movff	___lwtoft@c+1,___ftpack@arg+1
  6572  0026E8  6A27               	clrf	___ftpack@arg+2,c
  6573  0026EA  0E8E               	movlw	142
  6574  0026EC  6E28               	movwf	___ftpack@exp,c
  6575  0026EE  0E00               	movlw	0
  6576  0026F0  6E29               	movwf	___ftpack@sign,c
  6577  0026F2  ECBD  F010         	call	___ftpack	;wreg free
  6578  0026F6  C025  F02D         	movff	?___ftpack,?___lwtoft
  6579  0026FA  C026  F02E         	movff	?___ftpack+1,?___lwtoft+1
  6580  0026FE  C027  F02F         	movff	?___ftpack+2,?___lwtoft+2
  6581  002702  0012               	return	
  6582  002704                     __end_of___lwtoft:
  6583                           	opt stack 0
  6584                           tblptru	equ	0xFF8
  6585                           tblptrh	equ	0xFF7
  6586                           tblptrl	equ	0xFF6
  6587                           tablat	equ	0xFF5
  6588                           prodh	equ	0xFF4
  6589                           prodl	equ	0xFF3
  6590                           intcon	equ	0xFF2
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           postdec1	equ	0xFE5
  6594                           fsr1h	equ	0xFE2
  6595                           fsr1l	equ	0xFE1
  6596                           indf2	equ	0xFDF
  6597                           postinc2	equ	0xFDE
  6598                           postdec2	equ	0xFDD
  6599                           fsr2h	equ	0xFDA
  6600                           fsr2l	equ	0xFD9
  6601                           status	equ	0xFD8
  6602                           
  6603 ;; *************** function ___ftpack *****************
  6604 ;; Defined at:
  6605 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;  arg             3   36[COMRAM] unsigned um
  6608 ;;  exp             1   39[COMRAM] unsigned char 
  6609 ;;  sign            1   40[COMRAM] unsigned char 
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;		None
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  3   36[COMRAM] float 
  6614 ;; Registers used:
  6615 ;;		wreg, status,2, status,0
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6621 ;;      Params:         5       0       0       0       0       0       0
  6622 ;;      Locals:         0       0       0       0       0       0       0
  6623 ;;      Temps:          3       0       0       0       0       0       0
  6624 ;;      Totals:         8       0       0       0       0       0       0
  6625 ;;Total ram usage:        8 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    3
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		___ftadd
  6632 ;;		___ftmul
  6633 ;;		___lltoft
  6634 ;;		___lwtoft
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           	psect	text23
  6639  00217A                     __ptext23:
  6640                           	opt stack 0
  6641  00217A                     ___ftpack:
  6642                           	opt stack 24
  6643                           
  6644                           ;incstack = 0
  6645  00217A  5028               	movf	___ftpack@exp,w,c
  6646  00217C  B4D8               	btfsc	status,2,c
  6647  00217E  D005               	goto	l1919
  6648  002180  5025               	movf	___ftpack@arg,w,c
  6649  002182  1026               	iorwf	___ftpack@arg+1,w,c
  6650  002184  1027               	iorwf	___ftpack@arg+2,w,c
  6651  002186  A4D8               	btfss	status,2,c
  6652  002188  D00C               	goto	l1925
  6653  00218A                     l1919:
  6654  00218A  0E00               	movlw	0
  6655  00218C  6E25               	movwf	?___ftpack,c
  6656  00218E  0E00               	movlw	0
  6657  002190  6E26               	movwf	?___ftpack+1,c
  6658  002192  0E00               	movlw	0
  6659  002194  6E27               	movwf	?___ftpack+2,c
  6660  002196  0012               	return	
  6661  002198                     l1923:
  6662  002198  2A28               	incf	___ftpack@exp,f,c
  6663  00219A  90D8               	bcf	status,0,c
  6664  00219C  3227               	rrcf	___ftpack@arg+2,f,c
  6665  00219E  3226               	rrcf	___ftpack@arg+1,f,c
  6666  0021A0  3225               	rrcf	___ftpack@arg,f,c
  6667  0021A2                     l1925:
  6668  0021A2  0E00               	movlw	0
  6669  0021A4  1425               	andwf	___ftpack@arg,w,c
  6670  0021A6  6E2A               	movwf	??___ftpack& (0+255),c
  6671  0021A8  0E00               	movlw	0
  6672  0021AA  1426               	andwf	___ftpack@arg+1,w,c
  6673  0021AC  6E2B               	movwf	(??___ftpack+1)& (0+255),c
  6674  0021AE  0EFE               	movlw	254
  6675  0021B0  1427               	andwf	___ftpack@arg+2,w,c
  6676  0021B2  6E2C               	movwf	(??___ftpack+2)& (0+255),c
  6677  0021B4  502A               	movf	??___ftpack,w,c
  6678  0021B6  102B               	iorwf	??___ftpack+1,w,c
  6679  0021B8  102C               	iorwf	??___ftpack+2,w,c
  6680  0021BA  B4D8               	btfsc	status,2,c
  6681  0021BC  D00C               	goto	l1931
  6682  0021BE  D7EC               	goto	l1923
  6683  0021C0                     l1927:
  6684  0021C0  2A28               	incf	___ftpack@exp,f,c
  6685  0021C2  0E01               	movlw	1
  6686  0021C4  2625               	addwf	___ftpack@arg,f,c
  6687  0021C6  0E00               	movlw	0
  6688  0021C8  2226               	addwfc	___ftpack@arg+1,f,c
  6689  0021CA  0E00               	movlw	0
  6690  0021CC  2227               	addwfc	___ftpack@arg+2,f,c
  6691  0021CE  90D8               	bcf	status,0,c
  6692  0021D0  3227               	rrcf	___ftpack@arg+2,f,c
  6693  0021D2  3226               	rrcf	___ftpack@arg+1,f,c
  6694  0021D4  3225               	rrcf	___ftpack@arg,f,c
  6695  0021D6                     l1931:
  6696  0021D6  0E00               	movlw	0
  6697  0021D8  1425               	andwf	___ftpack@arg,w,c
  6698  0021DA  6E2A               	movwf	??___ftpack& (0+255),c
  6699  0021DC  0E00               	movlw	0
  6700  0021DE  1426               	andwf	___ftpack@arg+1,w,c
  6701  0021E0  6E2B               	movwf	(??___ftpack+1)& (0+255),c
  6702  0021E2  0EFF               	movlw	255
  6703  0021E4  1427               	andwf	___ftpack@arg+2,w,c
  6704  0021E6  6E2C               	movwf	(??___ftpack+2)& (0+255),c
  6705  0021E8  502A               	movf	??___ftpack,w,c
  6706  0021EA  102B               	iorwf	??___ftpack+1,w,c
  6707  0021EC  102C               	iorwf	??___ftpack+2,w,c
  6708  0021EE  B4D8               	btfsc	status,2,c
  6709  0021F0  D006               	goto	l1935
  6710  0021F2  D7E6               	goto	l1927
  6711  0021F4                     l1933:
  6712  0021F4  0628               	decf	___ftpack@exp,f,c
  6713  0021F6  90D8               	bcf	status,0,c
  6714  0021F8  3625               	rlcf	___ftpack@arg,f,c
  6715  0021FA  3626               	rlcf	___ftpack@arg+1,f,c
  6716  0021FC  3627               	rlcf	___ftpack@arg+2,f,c
  6717  0021FE                     l1935:
  6718  0021FE  BE26               	btfsc	___ftpack@arg+1,7,c
  6719  002200  D003               	goto	l490
  6720  002202  0E02               	movlw	2
  6721  002204  6028               	cpfslt	___ftpack@exp,c
  6722  002206  D7F6               	goto	l1933
  6723  002208                     l490:
  6724  002208  A028               	btfss	___ftpack@exp,0,c
  6725  00220A  9E26               	bcf	___ftpack@arg+1,7,c
  6726  00220C  90D8               	bcf	status,0,c
  6727  00220E  3228               	rrcf	___ftpack@exp,f,c
  6728  002210  5028               	movf	___ftpack@exp,w,c
  6729  002212  1227               	iorwf	___ftpack@arg+2,f,c
  6730  002214  5029               	movf	___ftpack@sign,w,c
  6731  002216  A4D8               	btfss	status,2,c
  6732  002218  8E27               	bsf	___ftpack@arg+2,7,c
  6733  00221A  C025  F025         	movff	___ftpack@arg,?___ftpack
  6734  00221E  C026  F026         	movff	___ftpack@arg+1,?___ftpack+1
  6735  002222  C027  F027         	movff	___ftpack@arg+2,?___ftpack+2
  6736  002226  0012               	return	
  6737  002228                     __end_of___ftpack:
  6738                           	opt stack 0
  6739                           tblptru	equ	0xFF8
  6740                           tblptrh	equ	0xFF7
  6741                           tblptrl	equ	0xFF6
  6742                           tablat	equ	0xFF5
  6743                           prodh	equ	0xFF4
  6744                           prodl	equ	0xFF3
  6745                           intcon	equ	0xFF2
  6746                           postinc0	equ	0xFEE
  6747                           wreg	equ	0xFE8
  6748                           postdec1	equ	0xFE5
  6749                           fsr1h	equ	0xFE2
  6750                           fsr1l	equ	0xFE1
  6751                           indf2	equ	0xFDF
  6752                           postinc2	equ	0xFDE
  6753                           postdec2	equ	0xFDD
  6754                           fsr2h	equ	0xFDA
  6755                           fsr2l	equ	0xFD9
  6756                           status	equ	0xFD8
  6757                           
  6758 ;; *************** function _low_isr *****************
  6759 ;; Defined at:
  6760 ;;		line 77 in file "main.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;		None
  6763 ;; Auto vars:     Size  Location     Type
  6764 ;;		None
  6765 ;; Return value:  Size  Location     Type
  6766 ;;                  1    wreg      void 
  6767 ;; Registers used:
  6768 ;;		None
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/0
  6771 ;;		On exit  : 0/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6774 ;;      Params:         0       0       0       0       0       0       0
  6775 ;;      Locals:         0       0       0       0       0       0       0
  6776 ;;      Temps:         17       0       0       0       0       0       0
  6777 ;;      Totals:        17       0       0       0       0       0       0
  6778 ;;Total ram usage:       17 bytes
  6779 ;; Hardware stack levels used:    1
  6780 ;; Hardware stack levels required when called:    2
  6781 ;; This function calls:
  6782 ;;		Nothing
  6783 ;; This function is called by:
  6784 ;;		Interrupt level 1
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	intcodelo
  6789  000018                     __pintcodelo:
  6790                           	opt stack 0
  6791  000018                     _low_isr:
  6792                           	opt stack 24
  6793                           
  6794                           ;incstack = 0
  6795  000018  805A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6796  00001A  CFD8 F014          	movff	status,??_low_isr
  6797  00001E  CFE8 F015          	movff	wreg,??_low_isr+1
  6798  000022  CFE0 F016          	movff	bsr,??_low_isr+2
  6799  000026  CFFA F017          	movff	pclath,??_low_isr+3
  6800  00002A  CFFB F018          	movff	pclatu,??_low_isr+4
  6801  00002E  CFE9 F019          	movff	fsr0l,??_low_isr+5
  6802  000032  CFEA F01A          	movff	fsr0h,??_low_isr+6
  6803  000036  CFE1 F01B          	movff	fsr1l,??_low_isr+7
  6804  00003A  CFE2 F01C          	movff	fsr1h,??_low_isr+8
  6805  00003E  CFD9 F01D          	movff	fsr2l,??_low_isr+9
  6806  000042  CFDA F01E          	movff	fsr2h,??_low_isr+10
  6807  000046  CFF3 F01F          	movff	prodl,??_low_isr+11
  6808  00004A  CFF4 F020          	movff	prodh,??_low_isr+12
  6809  00004E  CFF6 F021          	movff	tblptrl,??_low_isr+13
  6810  000052  CFF7 F022          	movff	tblptrh,??_low_isr+14
  6811  000056  CFF8 F023          	movff	tblptru,??_low_isr+15
  6812  00005A  CFF5 F024          	movff	tablat,??_low_isr+16
  6813                           
  6814                           ;main.c: 78: INTCONbits.GIEH = 0;
  6815  00005E  9EF2               	bcf	intcon,7,c	;volatile
  6816                           
  6817                           ;main.c: 80: INTCONbits.GIEH = 1;
  6818  000060  8EF2               	bsf	intcon,7,c	;volatile
  6819  000062  C024  FFF5         	movff	??_low_isr+16,tablat
  6820  000066  C023  FFF8         	movff	??_low_isr+15,tblptru
  6821  00006A  C022  FFF7         	movff	??_low_isr+14,tblptrh
  6822  00006E  C021  FFF6         	movff	??_low_isr+13,tblptrl
  6823  000072  C020  FFF4         	movff	??_low_isr+12,prodh
  6824  000076  C01F  FFF3         	movff	??_low_isr+11,prodl
  6825  00007A  C01E  FFDA         	movff	??_low_isr+10,fsr2h
  6826  00007E  C01D  FFD9         	movff	??_low_isr+9,fsr2l
  6827  000082  C01C  FFE2         	movff	??_low_isr+8,fsr1h
  6828  000086  C01B  FFE1         	movff	??_low_isr+7,fsr1l
  6829  00008A  C01A  FFEA         	movff	??_low_isr+6,fsr0h
  6830  00008E  C019  FFE9         	movff	??_low_isr+5,fsr0l
  6831  000092  C018  FFFB         	movff	??_low_isr+4,pclatu
  6832  000096  C017  FFFA         	movff	??_low_isr+3,pclath
  6833  00009A  C016  FFE0         	movff	??_low_isr+2,bsr
  6834  00009E  C015  FFE8         	movff	??_low_isr+1,wreg
  6835  0000A2  C014  FFD8         	movff	??_low_isr,status
  6836  0000A6  905A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6837  0000A8  0010               	retfie	
  6838  0000AA                     __end_of_low_isr:
  6839                           	opt stack 0
  6840                           pclatu	equ	0xFFB
  6841                           pclath	equ	0xFFA
  6842                           tblptru	equ	0xFF8
  6843                           tblptrh	equ	0xFF7
  6844                           tblptrl	equ	0xFF6
  6845                           tablat	equ	0xFF5
  6846                           prodh	equ	0xFF4
  6847                           prodl	equ	0xFF3
  6848                           intcon	equ	0xFF2
  6849                           postinc0	equ	0xFEE
  6850                           fsr0h	equ	0xFEA
  6851                           fsr0l	equ	0xFE9
  6852                           wreg	equ	0xFE8
  6853                           postdec1	equ	0xFE5
  6854                           fsr1h	equ	0xFE2
  6855                           fsr1l	equ	0xFE1
  6856                           bsr	equ	0xFE0
  6857                           indf2	equ	0xFDF
  6858                           postinc2	equ	0xFDE
  6859                           postdec2	equ	0xFDD
  6860                           fsr2h	equ	0xFDA
  6861                           fsr2l	equ	0xFD9
  6862                           status	equ	0xFD8
  6863                           
  6864 ;; *************** function _high_isr *****************
  6865 ;; Defined at:
  6866 ;;		line 67 in file "main.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      void 
  6873 ;; Registers used:
  6874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6880 ;;      Params:         0       0       0       0       0       0       0
  6881 ;;      Locals:         0       0       0       0       0       0       0
  6882 ;;      Temps:         14       0       0       0       0       0       0
  6883 ;;      Totals:        14       0       0       0       0       0       0
  6884 ;;Total ram usage:       14 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    1
  6887 ;; This function calls:
  6888 ;;		_uart_receiver
  6889 ;; This function is called by:
  6890 ;;		Interrupt level 2
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	intcode
  6895  000008                     __pintcode:
  6896                           	opt stack 0
  6897  000008                     _high_isr:
  6898                           	opt stack 24
  6899                           
  6900                           ;incstack = 0
  6901  000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6902  00000A  ED14  F011         	call	int_func,f	;refresh shadow registers
  6903                           pclatu	equ	0xFFB
  6904                           pclath	equ	0xFFA
  6905                           tblptru	equ	0xFF8
  6906                           tblptrh	equ	0xFF7
  6907                           tblptrl	equ	0xFF6
  6908                           tablat	equ	0xFF5
  6909                           prodh	equ	0xFF4
  6910                           prodl	equ	0xFF3
  6911                           intcon	equ	0xFF2
  6912                           postinc0	equ	0xFEE
  6913                           fsr0h	equ	0xFEA
  6914                           fsr0l	equ	0xFE9
  6915                           wreg	equ	0xFE8
  6916                           postdec1	equ	0xFE5
  6917                           fsr1h	equ	0xFE2
  6918                           fsr1l	equ	0xFE1
  6919                           bsr	equ	0xFE0
  6920                           indf2	equ	0xFDF
  6921                           postinc2	equ	0xFDE
  6922                           postdec2	equ	0xFDD
  6923                           fsr2h	equ	0xFDA
  6924                           fsr2l	equ	0xFD9
  6925                           status	equ	0xFD8
  6926                           
  6927                           	psect	intcode_body
  6928  002228                     __pintcode_body:
  6929                           	opt stack 24
  6930  002228                     int_func:
  6931                           	opt stack 24
  6932  002228  0006               	pop		; remove dummy address from shadow register refresh
  6933  00222A  CFFA F006          	movff	pclath,??_high_isr
  6934  00222E  CFFB F007          	movff	pclatu,??_high_isr+1
  6935  002232  CFE9 F008          	movff	fsr0l,??_high_isr+2
  6936  002236  CFEA F009          	movff	fsr0h,??_high_isr+3
  6937  00223A  CFE1 F00A          	movff	fsr1l,??_high_isr+4
  6938  00223E  CFE2 F00B          	movff	fsr1h,??_high_isr+5
  6939  002242  CFD9 F00C          	movff	fsr2l,??_high_isr+6
  6940  002246  CFDA F00D          	movff	fsr2h,??_high_isr+7
  6941  00224A  CFF3 F00E          	movff	prodl,??_high_isr+8
  6942  00224E  CFF4 F00F          	movff	prodh,??_high_isr+9
  6943  002252  CFF6 F010          	movff	tblptrl,??_high_isr+10
  6944  002256  CFF7 F011          	movff	tblptrh,??_high_isr+11
  6945  00225A  CFF8 F012          	movff	tblptru,??_high_isr+12
  6946  00225E  CFF5 F013          	movff	tablat,??_high_isr+13
  6947                           
  6948                           ;main.c: 68: INTCONbits.GIEH = 0;
  6949  002262  9EF2               	bcf	intcon,7,c	;volatile
  6950                           
  6951                           ;main.c: 69: if(PIR1bits.RCIF){
  6952  002264  AA9E               	btfss	3998,5,c	;volatile
  6953  002266  D00B               	goto	i2l2897
  6954                           
  6955                           ;main.c: 70: uart_receiver(&data,&got_data_bool);
  6956  002268  0E59               	movlw	low _data
  6957  00226A  6E01               	movwf	uart_receiver@c,c
  6958  00226C  0E00               	movlw	high _data
  6959  00226E  6E02               	movwf	uart_receiver@c+1,c
  6960  002270  0E58               	movlw	low _got_data_bool
  6961  002272  6E03               	movwf	uart_receiver@rx_flag,c
  6962  002274  0E00               	movlw	high _got_data_bool
  6963  002276  6E04               	movwf	uart_receiver@rx_flag+1,c
  6964  002278  EC34  F013         	call	_uart_receiver	;wreg free
  6965                           
  6966                           ;main.c: 71: PIR1bits.RCIF=0;
  6967  00227C  9A9E               	bcf	3998,5,c	;volatile
  6968  00227E                     i2l2897:
  6969                           
  6970                           ;main.c: 72: }
  6971                           ;main.c: 74: INTCONbits.GIEH = 1;
  6972  00227E  8EF2               	bsf	intcon,7,c	;volatile
  6973  002280  C013  FFF5         	movff	??_high_isr+13,tablat
  6974  002284  C012  FFF8         	movff	??_high_isr+12,tblptru
  6975  002288  C011  FFF7         	movff	??_high_isr+11,tblptrh
  6976  00228C  C010  FFF6         	movff	??_high_isr+10,tblptrl
  6977  002290  C00F  FFF4         	movff	??_high_isr+9,prodh
  6978  002294  C00E  FFF3         	movff	??_high_isr+8,prodl
  6979  002298  C00D  FFDA         	movff	??_high_isr+7,fsr2h
  6980  00229C  C00C  FFD9         	movff	??_high_isr+6,fsr2l
  6981  0022A0  C00B  FFE2         	movff	??_high_isr+5,fsr1h
  6982  0022A4  C00A  FFE1         	movff	??_high_isr+4,fsr1l
  6983  0022A8  C009  FFEA         	movff	??_high_isr+3,fsr0h
  6984  0022AC  C008  FFE9         	movff	??_high_isr+2,fsr0l
  6985  0022B0  C007  FFFB         	movff	??_high_isr+1,pclatu
  6986  0022B4  C006  FFFA         	movff	??_high_isr,pclath
  6987  0022B8  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6988  0022BA  0011               	retfie		f
  6989  0022BC                     __end_of_high_isr:
  6990                           	opt stack 0
  6991                           pclatu	equ	0xFFB
  6992                           pclath	equ	0xFFA
  6993                           tblptru	equ	0xFF8
  6994                           tblptrh	equ	0xFF7
  6995                           tblptrl	equ	0xFF6
  6996                           tablat	equ	0xFF5
  6997                           prodh	equ	0xFF4
  6998                           prodl	equ	0xFF3
  6999                           intcon	equ	0xFF2
  7000                           postinc0	equ	0xFEE
  7001                           fsr0h	equ	0xFEA
  7002                           fsr0l	equ	0xFE9
  7003                           wreg	equ	0xFE8
  7004                           postdec1	equ	0xFE5
  7005                           fsr1h	equ	0xFE2
  7006                           fsr1l	equ	0xFE1
  7007                           bsr	equ	0xFE0
  7008                           indf2	equ	0xFDF
  7009                           postinc2	equ	0xFDE
  7010                           postdec2	equ	0xFDD
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           
  7015 ;; *************** function _uart_receiver *****************
  7016 ;; Defined at:
  7017 ;;		line 31 in file "uart_layer.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;  c               2    0[COMRAM] PTR unsigned char 
  7020 ;;		 -> data(1), 
  7021 ;;  rx_flag         2    2[COMRAM] PTR unsigned char 
  7022 ;;		 -> got_data_bool(1), 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  er              1    4[COMRAM] unsigned char 
  7025 ;; Return value:  Size  Location     Type
  7026 ;;                  1    wreg      void 
  7027 ;; Registers used:
  7028 ;;		wreg, fsr2l, fsr2h
  7029 ;; Tracked objects:
  7030 ;;		On entry : 0/0
  7031 ;;		On exit  : 0/0
  7032 ;;		Unchanged: 0/0
  7033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7034 ;;      Params:         4       0       0       0       0       0       0
  7035 ;;      Locals:         1       0       0       0       0       0       0
  7036 ;;      Temps:          0       0       0       0       0       0       0
  7037 ;;      Totals:         5       0       0       0       0       0       0
  7038 ;;Total ram usage:        5 bytes
  7039 ;; Hardware stack levels used:    1
  7040 ;; This function calls:
  7041 ;;		Nothing
  7042 ;; This function is called by:
  7043 ;;		_high_isr
  7044 ;; This function uses a non-reentrant model
  7045 ;;
  7046                           
  7047                           	psect	text26
  7048  002668                     __ptext26:
  7049                           	opt stack 0
  7050  002668                     _uart_receiver:
  7051                           	opt stack 24
  7052                           
  7053                           ;uart_layer.c: 33: if(RCSTAbits.FERR){
  7054                           
  7055                           ;incstack = 0
  7056  002668  A4AB               	btfss	4011,2,c	;volatile
  7057  00266A  D003               	goto	i2l95
  7058                           
  7059                           ;uart_layer.c: 34: uint8_t er = RCREG;
  7060  00266C  CFAE F005          	movff	4014,uart_receiver@er	;volatile
  7061                           
  7062                           ;uart_layer.c: 35: }else if(RCSTAbits.OERR){
  7063  002670  0012               	return	
  7064  002672                     i2l95:
  7065  002672  A2AB               	btfss	4011,1,c	;volatile
  7066  002674  D003               	goto	i2l2833
  7067                           
  7068                           ;uart_layer.c: 36: RCSTAbits.CREN=0;
  7069  002676  98AB               	bcf	4011,4,c	;volatile
  7070                           
  7071                           ;uart_layer.c: 37: RCSTAbits.CREN=1;
  7072  002678  88AB               	bsf	4011,4,c	;volatile
  7073                           
  7074                           ;uart_layer.c: 38: }else{
  7075  00267A  0012               	return	
  7076  00267C                     i2l2833:
  7077                           
  7078                           ;uart_layer.c: 39: *c = RCREG;
  7079  00267C  C001  FFD9         	movff	uart_receiver@c,fsr2l
  7080  002680  C002  FFDA         	movff	uart_receiver@c+1,fsr2h
  7081  002684  CFAE FFDF          	movff	4014,indf2	;volatile
  7082                           
  7083                           ;uart_layer.c: 40: *rx_flag = 1;
  7084  002688  C003  FFD9         	movff	uart_receiver@rx_flag,fsr2l
  7085  00268C  C004  FFDA         	movff	uart_receiver@rx_flag+1,fsr2h
  7086  002690  0E01               	movlw	1
  7087  002692  6EDF               	movwf	indf2,c
  7088  002694  0012               	return	
  7089  002696                     __end_of_uart_receiver:
  7090                           	opt stack 0
  7091                           pclatu	equ	0xFFB
  7092                           pclath	equ	0xFFA
  7093                           tblptru	equ	0xFF8
  7094                           tblptrh	equ	0xFF7
  7095                           tblptrl	equ	0xFF6
  7096                           tablat	equ	0xFF5
  7097                           prodh	equ	0xFF4
  7098                           prodl	equ	0xFF3
  7099                           intcon	equ	0xFF2
  7100                           postinc0	equ	0xFEE
  7101                           fsr0h	equ	0xFEA
  7102                           fsr0l	equ	0xFE9
  7103                           wreg	equ	0xFE8
  7104                           postdec1	equ	0xFE5
  7105                           fsr1h	equ	0xFE2
  7106                           fsr1l	equ	0xFE1
  7107                           bsr	equ	0xFE0
  7108                           indf2	equ	0xFDF
  7109                           postinc2	equ	0xFDE
  7110                           postdec2	equ	0xFDD
  7111                           fsr2h	equ	0xFDA
  7112                           fsr2l	equ	0xFD9
  7113                           status	equ	0xFD8
  7114                           pclatu	equ	0xFFB
  7115                           pclath	equ	0xFFA
  7116                           tblptru	equ	0xFF8
  7117                           tblptrh	equ	0xFF7
  7118                           tblptrl	equ	0xFF6
  7119                           tablat	equ	0xFF5
  7120                           prodh	equ	0xFF4
  7121                           prodl	equ	0xFF3
  7122                           intcon	equ	0xFF2
  7123                           postinc0	equ	0xFEE
  7124                           fsr0h	equ	0xFEA
  7125                           fsr0l	equ	0xFE9
  7126                           wreg	equ	0xFE8
  7127                           postdec1	equ	0xFE5
  7128                           fsr1h	equ	0xFE2
  7129                           fsr1l	equ	0xFE1
  7130                           bsr	equ	0xFE0
  7131                           indf2	equ	0xFDF
  7132                           postinc2	equ	0xFDE
  7133                           postdec2	equ	0xFDD
  7134                           fsr2h	equ	0xFDA
  7135                           fsr2l	equ	0xFD9
  7136                           status	equ	0xFD8
  7137                           
  7138                           	psect	rparam
  7139  0000                     pclatu	equ	0xFFB
  7140                           pclath	equ	0xFFA
  7141                           tblptru	equ	0xFF8
  7142                           tblptrh	equ	0xFF7
  7143                           tblptrl	equ	0xFF6
  7144                           tablat	equ	0xFF5
  7145                           prodh	equ	0xFF4
  7146                           prodl	equ	0xFF3
  7147                           intcon	equ	0xFF2
  7148                           postinc0	equ	0xFEE
  7149                           fsr0h	equ	0xFEA
  7150                           fsr0l	equ	0xFE9
  7151                           wreg	equ	0xFE8
  7152                           postdec1	equ	0xFE5
  7153                           fsr1h	equ	0xFE2
  7154                           fsr1l	equ	0xFE1
  7155                           bsr	equ	0xFE0
  7156                           indf2	equ	0xFDF
  7157                           postinc2	equ	0xFDE
  7158                           postdec2	equ	0xFDD
  7159                           fsr2h	equ	0xFDA
  7160                           fsr2l	equ	0xFD9
  7161                           status	equ	0xFD8
  7162                           
  7163                           	psect	temp
  7164  00005A                     btemp:
  7165                           	opt stack 0
  7166  00005A                     	ds	1
  7167  0000                     int$flags	set	btemp
  7168                           pclatu	equ	0xFFB
  7169                           pclath	equ	0xFFA
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           intcon	equ	0xFF2
  7177                           postinc0	equ	0xFEE
  7178                           fsr0h	equ	0xFEA
  7179                           fsr0l	equ	0xFE9
  7180                           wreg	equ	0xFE8
  7181                           postdec1	equ	0xFE5
  7182                           fsr1h	equ	0xFE2
  7183                           fsr1l	equ	0xFE1
  7184                           bsr	equ	0xFE0
  7185                           indf2	equ	0xFDF
  7186                           postinc2	equ	0xFDE
  7187                           postdec2	equ	0xFDD
  7188                           fsr2h	equ	0xFDA
  7189                           fsr2l	equ	0xFD9
  7190                           status	equ	0xFD8


Data Sizes:
    Strings     56
    Constant    150
    Data        0
    BSS         263
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     82      89
    BANK0           128     61      61
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_2(CODE[16]), STR_1(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 256
		 -> print_buffer(BANK1[256]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    uart_send_string@c	PTR unsigned char  size(2) Largest target is 256
		 -> print_buffer(BANK1[256]), 

    uart_receiver@rx_flag	PTR unsigned char  size(2) Largest target is 1
		 -> got_data_bool(COMRAM[1]), 

    uart_receiver@c	PTR unsigned char  size(2) Largest target is 1
		 -> data(COMRAM[1]), 

    uart_send@c	PTR unsigned char  size(2) Largest target is 256
		 -> print_buffer(BANK1[256]), 


Critical Paths under _main in COMRAM

    _uart_send_string->_uart_send
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftadd->_fround
    ___lwtoft->___ftpack

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_uart_receiver

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    ___ftsub->___ftadd

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   54347
                                             58 BANK0      3     3      0
                            ___ftmul
                           ___lwtoft
                            _sprintf
                          _uart_init
                   _uart_send_string
 ---------------------------------------------------------------------------------
 (1) _uart_send_string                                     3     1      2     368
                                             38 COMRAM     3     1      2
                          _uart_send
 ---------------------------------------------------------------------------------
 (2) _uart_send                                            2     0      2     150
                                             36 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            8     0      8     366
                                             36 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             46    38      8   47039
                                             18 BANK0     40    32      8
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10398
                                             71 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             36 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10200
                                             71 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2463
                                             50 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4418
                                             56 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                             36 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                             42 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                             36 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                             36 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2203
                                             44 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                             36 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                             36 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     602
                                             78 COMRAM     4     0      4
                                              0 BANK0     11    11      0
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4081
                                             12 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3717
                                              0 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                             36 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                             36 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2156
                                             44 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2070
                                             36 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                             19 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            14    14      0     173
                                              5 COMRAM    14    14      0
                      _uart_receiver
 ---------------------------------------------------------------------------------
 (7) _uart_receiver                                        5     1      4     173
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _uart_init
   _uart_send_string
     _uart_send

 _low_isr (ROOT)

 _high_isr (ROOT)
   _uart_receiver

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3D      3D       5       47.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     52      59       1       70.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     196      15        0.0%
DATA                 0      0     196       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Oct 14 02:06:09 2018

 __end_of_uart_send_string 263A                         l45 1B9E                         l49 1C00  
                       l90 2730                         l89 2732               ___awdiv@sign 0030  
                       bsr 000FE0        ___wmul@multiplicand 0035                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000               ___ftadd@exp1 008B               ___ftadd@exp2 008A  
              __CFG_LVP$ON 000000               ___ftadd@sign 0089                        l212 0E24  
                      l513 174E                        l517 1788                        l519 17B0  
                      l528 1886                        l537 18B0                        l490 2208  
                      l458 2074                        l562 1E1E                        l555 1D90  
                      l556 1DB8                        l637 2440                        l647 2516  
                      l587 26D2               __CFG_CPB$OFF 000000               __CFG_CPD$OFF 000000  
             ___awmod@sign 002A            ??_uart_receiver 0005                        wreg 000FE8  
             __CFG_WDT$OFF 000000                       l2111 23B8                       l2033 20AE  
                     l2115 23C6                       l2107 23AE                       l2131 2472  
                     l3021 1F26                       l3013 1EFC                       l2053 2108  
                     l2213 16C2                       l3023 1F30                       l2311 1FDC  
                     l2151 24B8                       l2143 24A0                       l2135 2480  
                     l2127 2466                       l2063 2130                       l2039 20D6  
                     l2207 161E                       l3009 1EE8                       l2241 1D56  
                     l2137 2488                       l2057 2118                       l2225 271A  
                     l3201 0D02                       l3121 09F8                       l3113 0990  
                     l3041 0716                       l3033 06E0                       l3027 1F4C  
                     l3019 1F16                       l2331 203A                       l2235 1D2A  
                     l2083 2360                       l2139 248C                       l2147 24AA  
                     l2067 2140                       l3131 0A7A                       l3051 0750  
                     l2341 2062                       l3205 0D2E                       l3141 0AE2  
                     l3125 0A1E                       l3045 0720                       l2431 2402  
                     l2343 206E                       l2335 204A                       l2319 200C  
                     l2271 1DE4                       l2095 2386                       l2175 1B54  
                     l2167 1A94                       l3311 1166                       l3223 0DF2  
                     l3207 0D36                       l3215 0DCA                       l3151 0B40  
                     l3127 0A34                       l3071 083E                       l3039 0700  
                     l2361 231C                       l2281 1E0C                       l2097 238E  
                     l2089 2370                       l3321 11A8                       l3313 1170  
                     l3305 1124                       l3241 0EAA                       l3225 0E06  
                     l3217 0DD8                       l3137 0ABC                       l3129 0A64  
                     l3081 0882                       l3065 07EC                       l2427 23F2  
                     l2451 24E4                       l2291 1F7C                       l2283 1E18  
                     l2275 1DF4                       l2099 2392                       l2195 14CE  
                     l3331 11DC                       l3307 112E                       l3251 0F90  
                     l3155 0BA6                       l3075 084E                       l3059 07C4  
                     l2357 22EC                       l2429 23FE                       l2461 252E  
                     l2189 142A                       l3253 0F9E                       l3237 0E58  
                     l3229 0E28                       l3173 0C42                       l3157 0BAC  
                     l3261 0FC6                       l3069 0828                       l2367 2348  
                     l2439 2432                       l2455 2508                       l2447 24D4  
                     l2463 253A                       l2199 14F2                       l3343 1230  
                     l3351 12B4                       l3271 1014                       l3191 0CBE  
                     l3087 089C                       l3079 0854                       l2449 24E0  
                     l2297 1F9A                       l3337 1202                       l3329 11D0  
                     l3273 101A                       l3193 0CD4                       l3185 0CA4  
                     l3177 0C6A                       l3169 0BF2                       l3097 08E2  
                     l3353 12CA                       l1931 21D6                       l1923 2198  
                     l3259 0FB8                       l3355 12E8                       l1933 21F4  
                     l1925 21A2                       l3349 12AE                       l3293 10B8  
                     l3285 1060                       l2821 260C                       l1935 21FE  
                     l1927 21C0                       l1919 218A                       l3199 0CEE  
                     l3391 1BFE                       l2921 1796                       l3289 1088  
                     l2825 2622                       l2915 175C                       l3299 10EC  
                     l2943 1816                       l2927 17A6                       l2945 1824  
                     l2937 17E8                       l2963 18DA                       l2955 186C  
                     l2947 1832                       l2973 1928                       l2957 187A  
                     l2949 183E                       l2981 25A6                       l2991 1E66  
                     STR_1 0697                       STR_2 06BF                       STR_3 06AE  
                     u2201 1D3A                       _LATB 000F8A                       u3211 16FC  
                     u3221 171A                       u2181 1D0E                       u1901 2096  
                     u3431 1E44                       u3600 0928                       u1921 20BE  
                     u2545 25E8                       u3450 1E8C                       u2546 25EA  
                     u2555 25F2                       u2556 25F4                       u3605 091C  
                     u2565 25FC                       u2566 25FE                       u3455 1E82  
                     u4095 1C46                       u3820 0E1C                       i2l95 2672  
                     _data 0059                       _main 1B94               ___ftpack@arg 0025  
             ___ftpack@exp 0028                       fsr0h 000FEA                       fsr1h 000FE2  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 005A  
                     prodh 000FF4                       prodl 000FF3                       start 00AA  
            __CFG_IESO$OFF 000000               _sprintf$1401 00A0              __CFG_MCLRE$ON 000000  
             ___ftmul@cntr 0046               ___param_bank 000000               ___ftmul@sign 0047  
             ___fttol@exp1 008A               ___fttol@lval 0086                      ?_main 0001  
          __end_of___awdiv 23D0            __end_of___ftadd 194E            __end_of___awmod 24C2  
          __end_of___ftneg 26E0            __end_of___lldiv 2452            __end_of___ftmul 217A  
          ___awdiv@divisor 002D            __end_of___llmod 2528            __end_of___ftsub 25D0  
          __end_of___fttol 1F5E            ___awdiv@counter 002F                      _RCREG 000FAE  
                    _SPBRG 000FAF                      _TRISB 000F93                      _TXREG 000FAD  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000               ___lltoft@exp 0035  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers 0629                      _scale 12F6            __end_of_isdigit 2722  
            ___ftpack@sign 0029            __end_of_low_isr 00AA             __CFG_BOREN$OFF 000000  
                    pclath 000FFA                      tablat 000FF5                      status 000FD8  
          __end_of_sprintf 12F6            __initialization 263A               __end_of_main 1CFE  
                   ??_main 00BA              ___fttol@sign1 0085              __activetblptr 000002  
     __size_of__tdiv_to_l_ 0132           ___llmod@dividend 0025                     ?_scale 0048  
                   _ADRESH 000FC4                     _ADRESL 000FC3           ___awdiv@dividend 002B  
         __end_of___ftpack 2228           __end_of___lltoft 2584                     i2l2833 267C  
                   i2l2897 227E           __end_of___lwtoft 2704                     _SPBRGH 000FB0  
           __CFG_XINST$OFF 000000           __end_of__powers_ 0650           __end_of_high_isr 22BC  
                   ___ftge 22BC                     ___wmul 2696                  ??___awdiv 002F  
                ??___ftadd 0086             __CFG_STVREN$ON 000000                  ??___awmod 0029  
                ??___ftneg 0028                  ??___lldiv 002D                  ??___ftmul 003F  
                ??___llmod 002D                  ??___ftsub 0052                  ??___fttol 0080  
                   _fround 194E                     clear_0 2642                     clear_1 2654  
         ___awdiv@quotient 0031            ___awmod@divisor 0027            ___awmod@counter 0029  
            _got_data_bool 0058      ___ftmul@f3_as_product 0043                  ??_isdigit 0025  
             __mediumconst 0000                  ??_low_isr 0014                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ??_sprintf 009A  
               __accesstop 0080    __end_of__initialization 265A            __CFG_PBADEN$OFF 000000  
               ___ftadd@f1 0080                 ___ftadd@f2 0083                 ___ftge@ff1 0025  
               ___ftge@ff2 0028              ___rparam_used 000001                 ___ftneg@f1 0025  
               ___ftmul@f1 0039                 ___ftmul@f2 003C                 ___ftsub@f1 008C  
               ___ftsub@f2 008F                 ___fttol@f1 004F             __pcstackCOMRAM 0001  
               ___lltoft@c 002D              __end_of_scale 16E6                 _adc_to_led 0056  
        ?_uart_send_string 0027                 ___lwtoft@c 002D         ??_uart_send_string 0029  
               __div_to_l_ 1F5E            __div_to_l_@exp1 0030            __div_to_l_@cntr 002F  
                  ??_scale 004B            __div_to_l_@quot 002B               sprintf@width 00B2  
               __pbssBANK1 0100              __div_to_l_@f1 0025              __div_to_l_@f2 0028  
                  ?___ftge 0025                    ?___wmul 0033                    ?_fround 0048  
                ?___ftpack 0025                  ?___lltoft 002D                  ?___lwtoft 002D  
       __size_of_uart_init 0036         __size_of_uart_send 0016      __end_of_uart_receiver 2696  
                ?_high_isr 0001          __end_of__npowers_ 0677                    __Hparam 0000  
               _scale$1400 004B                    __Lparam 0000            __size_of___ftge 0090  
                  ___awdiv 234C                    ___ftadd 16E6                    ___awmod 2452  
                  ___ftneg 26BC                    ___lldiv 23D0            __size_of___wmul 0026  
                  ___ftmul 2086                    ___llmod 24C2                    ___ftsub 2584  
                  ___fttol 1E30               __psmallconst 0600                    __pcinit 263A  
               ??___ftpack 002A            __size_of_fround 0246                    __ramtop 0600  
               ??___lltoft 0031                    __ptext0 1B94                    __ptext1 2606  
                  __ptext2 2722                    __ptext3 25D0                    __ptext4 06D0  
                  __ptext5 12F6                    __ptext6 2704                    __ptext7 194E  
                  __ptext8 2696                    __ptext9 2086                 ??___lwtoft 0030  
        __end_of_hexpowers 0697                ?__div_to_l_ 0025                    _dpowers 0601  
        uart_send_string@c 0027          uart_send_string@i 0029                    _isdigit 2704  
         ___awmod@dividend 0025                    _low_isr 0018                    _sprintf 06D0  
               ??_high_isr 0006             __pintcode_body 2228       end_of_initialization 265A  
            __Lmediumconst 0000                    int_func 2228          __end_of_uart_init 2606  
        __end_of_uart_send 2738            ___lldiv@divisor 0029            ___lldiv@counter 0031  
         uart_init@gen_reg 0025                  _RCSTAbits 000FAB                    postdec1 000FE5  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
           __tdiv_to_l_@f1 0025             __tdiv_to_l_@f2 0028              ??__tdiv_to_l_ 002B  
                _TRISAbits 000F92                  _TRISCbits 000F94                  _TXSTAbits 000FAC  
      __size_of__div_to_l_ 0128                ___ftmul@exp 0042             __end_of___ftge 234C  
           __end_of___wmul 26BC                _BAUDCONbits 000FB8             __end_of_fround 1B94  
      start_initialization 263A        __end_of__tdiv_to_l_ 1E30  __size_of_uart_send_string 0034  
          ___llmod@divisor 0029           __CFG_OSC$INTIO67 000000            ___llmod@counter 002D  
                 ??___ftge 002B                   ??___wmul 0037           __CFG_LPT1OSC$OFF 000000  
                 ??_fround 004B              sprintf@tmpval 00AA                 fround@prec 0051  
        __size_of___ftpack 00AE          __size_of___lltoft 005C                __pbssCOMRAM 0053  
        __size_of___lwtoft 0024              __pcstackBANK0 0080               _isdigit$1070 0026  
     uart_receiver@rx_flag 0003          __size_of_high_isr 22B4                sprintf@flag 00B0  
              sprintf@fval 00B4                sprintf@prec 00B7          __CFG_CCP2MX$PORTC 000000  
                __pintcode 0008                   ?___awdiv 002B                   ?___ftadd 0080  
                 ?___awmod 0025                   ?___ftneg 0025                   ?___lldiv 0025  
                 ?___ftmul 0039                   ?___llmod 0025                   ?___ftsub 008C  
                __npowers_ 0650                   ?___fttol 004F                __pintcodelo 0018  
              __tdiv_to_l_ 1CFE               ??__div_to_l_ 002B                __smallconst 0600  
                 ?_isdigit 0001                   ?_low_isr 0001                  _hexpowers 0677  
                 ?_sprintf 0092             __size_of_scale 03F0             ___wmul@product 0037  
                 _IPR1bits 000F9F                   _PIE1bits 000F9D                   _PIR1bits 000F9E  
       __end_of__div_to_l_ 2086                   _RCONbits 000FD0           __CFG_WDTPS$32768 000000  
                _uart_init 25D0                  _uart_send 2722     __size_of_uart_receiver 002E  
               uart_send@c 0025                 _ADCON0bits 000FC2                 _ADCON1bits 000FC1  
               _ADCON2bits 000FC0          ___wmul@multiplier 0033           _uart_send_string 2606  
                 __Hrparam 0000                   __Lrparam 0000            uart_receiver@er 0005  
               ?_uart_init 0025                 ?_uart_send 0025           __size_of___awdiv 0084  
         __size_of___ftadd 0268           __size_of___awmod 0070           __size_of___ftneg 0024  
         __size_of___lldiv 0082           __size_of___ftmul 00F4           __size_of___llmod 0066  
         __size_of___ftsub 004C           __size_of___fttol 012E                   ___ftpack 217A  
              _fround$1398 004E                _fround$1399 004B                   ___lltoft 2528  
                 _adc_volt 0053                   ___lwtoft 26E0                 sprintf@idx 00A3  
               sprintf@exp 00AE                 sprintf@val 00A6           __size_of_isdigit 001E  
         __size_of_low_isr 0092                   __ptext10 2452                   __ptext11 234C  
                 __ptext20 26BC                   __ptext12 1CFE                   __ptext21 22BC  
                 __ptext13 1F5E                   __ptext22 26E0                   __ptext14 2528  
                 __ptext23 217A                   __ptext15 24C2                   __ptext16 23D0  
                 __ptext17 1E30                   __ptext26 2668                   __ptext18 2584  
                 __ptext19 16E6                   __powers_ 0629              _uart_receiver 2668  
                 _high_isr 0008           __size_of_sprintf 0C26              __size_of_main 016A  
           uart_init@brg16 002B                   int$flags 005A                 _INTCONbits 000FF2  
           uart_receiver@c 0001                   isdigit@c 0027             ?_uart_receiver 0001  
                 scale@scl 004E                   intlevel1 0000                   intlevel2 0000  
                sprintf@ap 00A4           __tdiv_to_l_@exp1 0033           __tdiv_to_l_@cntr 0032  
                sprintf@sp 0092           __tdiv_to_l_@quot 002E           ___lldiv@dividend 0025  
               _OSCCONbits 000FD3              uart_init@brgh 0029              uart_init@sync 0027  
              ??_uart_init 002D                ??_uart_send 0027               ?__tdiv_to_l_ 0025  
                 sprintf@c 00B9                   sprintf@f 0094           ___lldiv@quotient 002D  
             _print_buffer 0100  
